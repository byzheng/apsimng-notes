[
  {
    "objectID": "tips/summary.html",
    "href": "tips/summary.html",
    "title": "Writing Debug Info to Summary",
    "section": "",
    "text": "When developing and debugging Manager scripts in APSIM Next Gen, it’s helpful to write custom messages to the Summary window."
  },
  {
    "objectID": "tips/summary.html#purpose",
    "href": "tips/summary.html#purpose",
    "title": "Writing Debug Info to Summary",
    "section": "Purpose",
    "text": "Purpose\nTo output internal script data, such as calculated variables, to the Summary window during simulation."
  },
  {
    "objectID": "tips/summary.html#code-example",
    "href": "tips/summary.html#code-example",
    "title": "Writing Debug Info to Summary",
    "section": "Code Example",
    "text": "Code Example\n\n\n\nusing System;\nusing Models.Core;\nusing Models.Functions;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // Link to the Summary model to write messages to the simulation log\n        [Link] private Summary summary = null;\n\n        // Subscribe to the 'DoManagement' event, which is triggered daily\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            summary.WriteMessage(this, \"Hello from manager script\", MessageType.Diagnostic);\n        }\n    }\n}"
  },
  {
    "objectID": "tips/summary.html#additional-resources",
    "href": "tips/summary.html#additional-resources",
    "title": "Writing Debug Info to Summary",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nManager Model Documentation and Examples\nProvides guidance on scripting within the Manager model, including examples of accessing and manipulating model variables.\nAPSIM Next Gen Training Manuals\nA collection of tutorials and manuals covering various aspects of APSIM Next Gen.\nAPSIM GitHub Discussions\nA community forum for discussing APSIM-related topics and getting help from other users and developers."
  },
  {
    "objectID": "tips/co2.html",
    "href": "tips/co2.html",
    "title": "Setting CO₂ Concentration",
    "section": "",
    "text": "In APSIM Next Gen, the default CO₂ concentration is 350 ppm if not explicitly set.\nThis value may need to be changed when simulating future climate scenarios or FACE (Free-Air CO₂ Enrichment) experiments.\nThis guide explains how to modify the CO₂ level using a Manager script and the PreparingNewWeatherData event."
  },
  {
    "objectID": "tips/co2.html#objective",
    "href": "tips/co2.html#objective",
    "title": "Setting CO₂ Concentration",
    "section": "Objective",
    "text": "Objective\nSet a custom CO₂ concentration during simulation by assigning a value through a Manager script.\n\nRight-click the Field node in your simulation.\nSelect Add model from the context menu.\nAdd a Manager model under Field.\nRename it to something like SetCO2.\nPaste the C# script (see below) into the Script tab.\nSet your desired CO₂ value (e.g., 550) in the Parameters tab."
  },
  {
    "objectID": "tips/co2.html#implementation",
    "href": "tips/co2.html#implementation",
    "title": "Setting CO₂ Concentration",
    "section": "Implementation",
    "text": "Implementation\nBelow is a complete Manager script that demonstrates how to access these variables:\nusing System;\nusing Models.Core;\nusing Models.Climate;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // Link to the Weather and Clock models\n        [Link] private Weather Weather;\n        [Link] private Clock Clock;\n\n        // User-defined CO2 value\n        [Description(\"CO2 concentration\")]\n        public double CO2 { get; set; }\n\n        // Set CO2 before weather data is applied each day\n        [EventSubscribe(\"PreparingNewWeatherData\")]\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\n        {\n            Weather.CO2 = CO2;\n        }\n    }\n}\nAs climate changes, CO2 is increasing in the atmosphere, and this script allows you to dynamically set the CO₂ concentration for your simulation.\nusing System;\nusing Models.Core;\nusing Models.Interfaces;\nusing Models.PMF;\nusing Models.Climate;\nusing APSIM.Shared.Utilities;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] IClock Clock;\n        [Link] ISummary Summary;\n        [Link] Weather Weather;\n\n        // CO2 levels from 1959 to 2024 (index 0 corresponds to 1959)\n        //\n        // Data Source: NOAA GML CO₂ Annual Mean Data, Mauna Loa Observatory\n        // https://gml.noaa.gov/webdata/ccgg/trends/co2/co2_annmean_mlo.txt\n        // This dataset is released under the Creative Commons Zero v1.0 Universal \n        // Public Domain Dedication (CC0 1.0), allowing unrestricted use. \n        private double[] co2Levels = new double[]\n        {\n            315.98, 316.91, 317.64, 318.45, 318.99, 319.62, 320.04, 321.37, 322.18, 323.05,\n            324.62, 325.68, 326.32, 327.46, 329.68, 330.19, 331.13, 332.03, 333.84, 335.41,\n            336.84, 338.76, 340.12, 341.48, 343.15, 344.87, 346.35, 347.61, 349.31, 351.69,\n            353.20, 354.45, 355.70, 356.54, 357.21, 358.96, 360.97, 362.74, 363.88, 366.84,\n            368.54, 369.71, 371.32, 373.45, 375.98, 377.70, 379.98, 382.09, 384.02, 385.83,\n            387.64, 390.10, 391.85, 394.06, 396.74, 398.81, 401.01, 404.41, 406.76, 408.72,\n            411.65, 414.21, 416.41, 418.53, 421.08, 424.61\n        };\n\n        private int startYear = 1959; // Base year for index calculation\n\n\n        [EventSubscribe(\"PreparingNewWeatherData\")]\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\n        {\n            int year = Clock.Today.Year;\n            int index = year - startYear;\n\n            if (index &gt;= 0 && index &lt; co2Levels.Length)\n                Weather.CO2 = co2Levels[index];\n            else\n                Weather.CO2 = co2Levels[co2Levels.Length - 1]; // Use the latest CO₂ for future years\n        }\n   \n    }\n}"
  },
  {
    "objectID": "tips/co2.html#explanation",
    "href": "tips/co2.html#explanation",
    "title": "Setting CO₂ Concentration",
    "section": "Explanation",
    "text": "Explanation\nThe Weather model in APSIM contains a CO2 property, which determines the atmospheric CO₂ concentration used in crop growth and development calculations. This property is normally updated with each day’s weather data.\nBy subscribing to the PreparingNewWeatherData event, the script intercepts the process before daily weather values are applied. This allows you to override the CO₂ value dynamically for the duration of the simulation.\nThis approach is particularly useful for experiments involving elevated CO₂ or simulating long-term climate change effects where static weather files are used but require changes in CO₂ independently."
  },
  {
    "objectID": "tips/co2.html#additional-resources",
    "href": "tips/co2.html#additional-resources",
    "title": "Setting CO₂ Concentration",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nManager Model Documentation and Examples\nProvides guidance on scripting within the Manager model, including examples of accessing and manipulating model variables.\nAPSIM Next Gen Training Manuals\nA collection of tutorials and manuals covering various aspects of APSIM Next Gen.\nAPSIM GitHub Discussions\nA community forum for discussing APSIM-related topics and getting help from other users and developers."
  },
  {
    "objectID": "tips/phy-ppd-oz-wheat.html",
    "href": "tips/phy-ppd-oz-wheat.html",
    "title": "Photoperiod Effects on Leaf Appearance for Wheat in Australia",
    "section": "",
    "text": "Photoperiod, or day length, is a key environmental factor influencing the rate of leaf appearance (phyllochron) in wheat. In Australia, the wide range of latitudes means that day length varies significantly across the country and throughout the year. This variation impacts how quickly wheat plants develop, especially during the critical vegetative phase."
  },
  {
    "objectID": "tips/phy-ppd-oz-wheat.html#day-length",
    "href": "tips/phy-ppd-oz-wheat.html#day-length",
    "title": "Photoperiod Effects on Leaf Appearance for Wheat in Australia",
    "section": "Day Length",
    "text": "Day Length\nAustralia spans a wide latitude range, from about 10°S (northern tip) to 44°S (southern tip, including Tasmania).\nThis range covers tropical to temperate climates, resulting in significant variation in day length and photoperiod effects across the country.\nThe day length is calculated with twilight angle of 6 degrees, which is commonly used in agricultural models to represent the start and end of daylight.\nThe day length varies from 9.9876135 to 16.7005717 hours across Australia, with the longest days occurring in summer (around December) and shortest in winter (around June).\n\n\n\n\n\n\n\n\nFigure 1: Day Length Variation Across Australia"
  },
  {
    "objectID": "tips/phy-ppd-oz-wheat.html#photoperiod-effects-on-phyllochron",
    "href": "tips/phy-ppd-oz-wheat.html#photoperiod-effects-on-phyllochron",
    "title": "Photoperiod Effects on Leaf Appearance for Wheat in Australia",
    "section": "Photoperiod Effects on Phyllochron",
    "text": "Photoperiod Effects on Phyllochron\nPhotoperiod, or day length, impacts on (phyllochron) when day length is shorter than 12 hours.\n\n\n\nDay Length (h)\nModifier \\(f_d(d)\\)\n\n\n\n\n8\n1.0\n\n\n12\n0.0\n\n\n20\n0.0\n\n\n\nThe calculated photoperiod effect \\(f_d(d)\\) is ranged from 0 to 0.5030966 mainly in winter and southern regions.\n\n\n\n\n\n\n\n\nFigure 2: Photoperiod Effect on Phyllochron\n\n\n\n\n\nPhotoperiod impacts on wheat phyllochron in all capital cities from late April to late August which is the major wheat growing season before flag leaf stage in Australia.\n\n\n\n\n\n\n\n\nFigure 3: Photoperiod Effect on Phyllochron for Capital Cities"
  },
  {
    "objectID": "tips/phy-ppd-oz-wheat.html#conclusion",
    "href": "tips/phy-ppd-oz-wheat.html#conclusion",
    "title": "Photoperiod Effects on Leaf Appearance for Wheat in Australia",
    "section": "Conclusion",
    "text": "Conclusion\nPhotoperiod plays a significant role in wheat development across Australia, particularly in the southern regions where day lengths are shorter during the growing season. This impacts the rate of leaf appearance, which is crucial for determining the timing of key growth stages such as flowering and maturity."
  },
  {
    "objectID": "tips/heading-ppd-oz-wheat.html",
    "href": "tips/heading-ppd-oz-wheat.html",
    "title": "Photoperiod Effects on Heading Phase for Wheat in Australia",
    "section": "",
    "text": "Photoperiod, or day length, is a key environmental factor influencing duration of (Heading) phase in wheat. In Australia, the wide range of latitudes means that day length varies significantly across the country and throughout the year. This variation impacts how quickly wheat plants develop."
  },
  {
    "objectID": "tips/heading-ppd-oz-wheat.html#day-length",
    "href": "tips/heading-ppd-oz-wheat.html#day-length",
    "title": "Photoperiod Effects on Heading Phase for Wheat in Australia",
    "section": "Day Length",
    "text": "Day Length\nAustralia spans a wide latitude range, from about 10°S (northern tip) to 44°S (southern tip, including Tasmania).\nThis range covers tropical to temperate climates, resulting in significant variation in day length and photoperiod effects across the country.\nThe day length is calculated with twilight angle of 6 degrees, which is commonly used in agricultural models to represent the start and end of daylight.\nThe day length varies from 9.9876135 to 16.7005717 hours across Australia, with the longest days occurring in summer (around December) and shortest in winter (around June).\n\n\n\n\n\n\n\n\nFigure 1: Day Length Variation Across Australia"
  },
  {
    "objectID": "tips/heading-ppd-oz-wheat.html#photoperiod-effects-on-phyllochron",
    "href": "tips/heading-ppd-oz-wheat.html#photoperiod-effects-on-phyllochron",
    "title": "Photoperiod Effects on Heading Phase for Wheat in Australia",
    "section": "Photoperiod Effects on Phyllochron",
    "text": "Photoperiod Effects on Phyllochron\nPhotoperiod, or day length, impacts on Heading phase when day length is shorter than 20 hours.\n\n\n\nDay Length (h)\nModifier \\(\\text{PpResponse}\\)\n\n\n\n\n6.0\n1.0\n\n\n8.0\n1.0\n\n\n20.0\n0.0\n\n\n22.0\n0.0\n\n\n\nThe calculated photoperiod effect \\(\\text{PpResponse}\\) is ranged from 0.2749524 to 0.8343655 mainly in winter and southern regions.\n\n\n\n\n\n\n\n\nFigure 2: Photoperiod Effect on heading phase\n\n\n\n\n\nPhotoperiod impacts on wheat heading phase in all capital cities from late April to late August which is the major wheat growing season before flag leaf stage in Australia.\n\n\n\n\n\n\n\n\nFigure 3: Photoperiod Effect on Heading Phase for Capital Cities"
  },
  {
    "objectID": "tips/heading-ppd-oz-wheat.html#conclusion",
    "href": "tips/heading-ppd-oz-wheat.html#conclusion",
    "title": "Photoperiod Effects on Heading Phase for Wheat in Australia",
    "section": "Conclusion",
    "text": "Conclusion\nPhotoperiod plays a significant role in wheat development across Australia, particularly in the southern regions where day lengths are shorter during the growing season. This impacts the rate of Heading Phase, which is crucial for determining the timing of key growth stages such as flowering and maturity."
  },
  {
    "objectID": "docs/symbols.html",
    "href": "docs/symbols.html",
    "title": "Symbol Glossary",
    "section": "",
    "text": "This document provides a centralized glossary of mathematical symbols used throughout the APSIM NG documentation.\nTo ensure clarity and avoid confusion between similarly named concepts (e.g. Phyllochron and Photoperiod), we adopt a consistent convention of using two-letter symbols wherever possible.\nSymbols are grouped by functional categories such as Phenology, Climate, Soil Water, and General Simulation Variables to reflect their use across the APSIM NG framework.",
    "crumbs": [
      "Home",
      "Docs",
      "Symbol Glossary"
    ]
  },
  {
    "objectID": "docs/symbols.html#general-conventions",
    "href": "docs/symbols.html#general-conventions",
    "title": "Symbol Glossary",
    "section": "General Conventions",
    "text": "General Conventions\n\nSymbols are written in italic, e.g. \\(TT\\)\nSymbols use two-letter abbreviations to distinguish overlapping concepts (e.g. \\(Ph\\) for phyllochron, \\(PP\\) for photoperiod)\nSubscripts clarify properties or context, e.g. \\(T_{\\text{max}}\\), \\(Ph_{\\text{base}}\\)\nGreek letters represent parameters or coefficients, e.g. \\(\\alpha\\), \\(\\beta\\), \\(\\Delta\\)\nUnits are expressed in SI unless otherwise noted",
    "crumbs": [
      "Home",
      "Docs",
      "Symbol Glossary"
    ]
  },
  {
    "objectID": "docs/symbols.html#phenology",
    "href": "docs/symbols.html#phenology",
    "title": "Symbol Glossary",
    "section": "🌱 Phenology",
    "text": "🌱 Phenology\n\n\n\n\n\n\n\n\n\nSymbol\nName\nUnits\nDescription\n\n\n\n\n\\(TT\\)\nDaily Thermal time\n°Cd\nDaily thermal time accumulated\n\n\n\\(Ph\\)\nPhyllochron\n°Cd\nThermal time required for the appearance of successive leaves on the main stem\n\n\n\\(HS\\)\nHaun Stage\n-\nNumber of fully expanded leaves on the main stem (Haun 1973)\n\n\n\\(Ph_{\\text{base}}\\)\nBase phyllochron\n°Cd\nBase phyllochron for most of leaves",
    "crumbs": [
      "Home",
      "Docs",
      "Symbol Glossary"
    ]
  },
  {
    "objectID": "docs/symbols.html#notes",
    "href": "docs/symbols.html#notes",
    "title": "Symbol Glossary",
    "section": "Notes",
    "text": "Notes\n\nSymbols may appear in multiple modules but should retain their meaning consistently.\nThis glossary will evolve as APSIM NG continues to grow — contributions welcome.",
    "crumbs": [
      "Home",
      "Docs",
      "Symbol Glossary"
    ]
  },
  {
    "objectID": "docs/symbols.html#see-also",
    "href": "docs/symbols.html#see-also",
    "title": "Symbol Glossary",
    "section": "See Also",
    "text": "See Also\n\nAbbreviations",
    "crumbs": [
      "Home",
      "Docs",
      "Symbol Glossary"
    ]
  },
  {
    "objectID": "docs/index.html",
    "href": "docs/index.html",
    "title": "Docs",
    "section": "",
    "text": "Note\n\n\n\n⚠️ This is not the official APSIM documentation. For official information, refer to APSIM Official Website\n\n\n\n\n🧩 Models\nTechnical notes on APSIM NG core models (e.g., soil, management, utilities).\nExplore Model →\n\n\n🌿 Crops\nDocumentation for crop models, including phenology, grain filling, and stress responses.\nView Crop →\n\n\n\n\n🧠 Symbols\nMathematical symbols used across APSIM NG documentation, grouped by function.\nView Symbols →\n\n\n🔤 Abbreviations\nCommon abbreviations and acronyms used in APSIM NG.\nView Abbreviations →\n\n\n\nThese are personal documentation notes for APSIM Next Generation, compiled from various sources and personal experience, including:\n\nAPSIM Official Website\nAPSIM User Documentation\n\nModel Validation Docs\n\nAPSIM GitHub Repository\nPersonal communication with APSIM developers\nMy own interpretation and understanding\nLarge language models (e.g., GitHub Copilot, ChatGPT)\n\nThese notes may contain errors, be incomplete, or reflect outdated information. See the full disclaimer.\nI will continue updating this documentation as I work with APSIM Next Generation. Contributions are welcome via GitHub pull requests or issues.\n\n\n\n\n\n\nNote\n\n\n\nThis documentation is updated to this commit: b9f9abca67191765f8a2de01e7cf0ce1c3f4a615 on 8 July 2025.",
    "crumbs": [
      "Home",
      "Docs"
    ]
  },
  {
    "objectID": "docs/Models/index.html",
    "href": "docs/Models/index.html",
    "title": "Models",
    "section": "",
    "text": "Functions or Models are basic building blocks of crop models in APSIM Next Generations.",
    "crumbs": [
      "Home",
      "Docs",
      "Models"
    ]
  },
  {
    "objectID": "docs/Models/index.html#functions",
    "href": "docs/Models/index.html#functions",
    "title": "Models",
    "section": "",
    "text": "Functions or Models are basic building blocks of crop models in APSIM Next Generations.",
    "crumbs": [
      "Home",
      "Docs",
      "Models"
    ]
  },
  {
    "objectID": "docs/Models/index.html#plant-modelling-framework",
    "href": "docs/Models/index.html#plant-modelling-framework",
    "title": "Models",
    "section": "Plant Modelling Framework",
    "text": "Plant Modelling Framework\nThe Plant Modelling Framework (PMF) offers a modular library of plant organ and process submodels. This design allows for dynamic assembly of complex crop models, such as wheat, by integrating components like photosynthesis and leaf development without additional coding (Brown et al. 2014).",
    "crumbs": [
      "Home",
      "Docs",
      "Models"
    ]
  },
  {
    "objectID": "docs/Models/index.html#graph",
    "href": "docs/Models/index.html#graph",
    "title": "Models",
    "section": "Graph",
    "text": "Graph\nThe Graph module provides a framework to visualise reports in APSIM Next Generation. It allows users to create and manage graphs, which can be used to display various data types, including time series and statistical analyses.",
    "crumbs": [
      "Home",
      "Docs",
      "Models"
    ]
  },
  {
    "objectID": "docs/Models/index.html#traits",
    "href": "docs/Models/index.html#traits",
    "title": "Models",
    "section": "Traits",
    "text": "Traits\nSome Traits are described in multiple components, which are summaried in the Traits section.",
    "crumbs": [
      "Home",
      "Docs",
      "Models"
    ]
  },
  {
    "objectID": "docs/Models/index.html#other-models",
    "href": "docs/Models/index.html#other-models",
    "title": "Models",
    "section": "Other Models",
    "text": "Other Models\n\nClock: The Clock model is responsible for managing the simulation time and triggering events at specific times.\nEvents: Events are used by APSIM NG to trigger actions or notify other models about changes in the simulation state. Models can respond to these events in predefined ways.",
    "crumbs": [
      "Home",
      "Docs",
      "Models"
    ]
  },
  {
    "objectID": "docs/Models/Traits/CO2/index.html",
    "href": "docs/Models/Traits/CO2/index.html",
    "title": "CO2",
    "section": "",
    "text": "CO2 is a key factor in plant growth and development, influencing various physiological processes. In APSIM NG, CO2 effects can be modeled to simulate its impact on radiation use efficiency (RUE), stomatal conductance, and critical nitrogen concentration.\nThe default CO2 concentration in APSIM NG is set to 350 ppm, but it can be adjusted to simulate different atmospheric conditions with manager script.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Traits",
      "CO2"
    ]
  },
  {
    "objectID": "docs/Models/Traits/CO2/index.html#radiation-use-efficiency-rue",
    "href": "docs/Models/Traits/CO2/index.html#radiation-use-efficiency-rue",
    "title": "CO2",
    "section": "Radiation Use Efficiency (RUE)",
    "text": "Radiation Use Efficiency (RUE)\n\nC3\nFor C3 plants (like wheat), Radiation Use Efficiency is scaled by the \\(CO_{\\text{2}}\\) factor which is calculated by a function of environmental \\(CO_{\\text{2}}\\) concentration (\\(C\\), ppm) and daily mean temperature (\\(T_{mean}\\)) as published by (Reyenga et al. 1999).\n\\[\nf_{c}=\\frac{(C-C_{i})(350+2C_{i})}{(C+2C_{i})(350-C_{i})}\n\\]\nwhere \\(C_{i}\\) is the temperature dependent \\(CO_{\\text{2}}\\) compensation point (ppm) and is derived from the following function.\n\\[\nC_{i}=\\frac{163-T_{mean}}{5-0.1T_{mean}}\n\\]\n\n\n\nCO2 factor of Radiation Use Efficiency in response to the CO2 level (C) for different daily mean air temperatures.\n\n\n\n\nC4\nFor C4 crops (e.g. Rice), Radiation Use Efficiency is increasing with CO2 concentration (\\(C\\), ppm) with a factor (\\(f_{c}\\)) according personal communications with Mark Howden.\n\\[\nf_{c}=0.000143 \\times C + 0.95\n\\]\n\n\n\nCO2 factor of Radiation Use Efficiency in response to the CO2 level for C4 crops.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Traits",
      "CO2"
    ]
  },
  {
    "objectID": "docs/Models/Traits/CO2/index.html#critical-nitrogen-concentration",
    "href": "docs/Models/Traits/CO2/index.html#critical-nitrogen-concentration",
    "title": "CO2",
    "section": "Critical Nitrogen Concentration",
    "text": "Critical Nitrogen Concentration\nIn APSIM NG, the Critical Nitrogen Concentration in Leaf is modified by CO,,2,, concentration.\n\n\n\nCritical Nitrogen Concentration in Leaf",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Traits",
      "CO2"
    ]
  },
  {
    "objectID": "docs/Models/Traits/CO2/index.html#stomatal-conductance",
    "href": "docs/Models/Traits/CO2/index.html#stomatal-conductance",
    "title": "CO2",
    "section": "Stomatal Conductance",
    "text": "Stomatal Conductance\nThe APSIM model considers a reduction in Stomatal Conductance with increasing CO2 levels and its interaction with enhanced RUE|CO2 for RUE of C3. The Stomatal Conductance reduction is likely to reduce water loss but maintain photosynthesis due to higher water potential and internal CO2 levels, resulting in an increased transpiration efficiency (Reyenga et al. 1999). The response Stomatal Conductance of to increased CO2 concentration is calculated as follows (Elli et al. 2020).\n\\[\nSC = f_{c} / (\\frac {CO2 - C_{i}} {350 - C_{i}})\n\\]\nwhere \\[C_{i}\\] temperature-dependent CO2 compensation point, which is calculated by:\n\\[\nC_{i}=\\frac{163-T_{mean}}{5-0.1T_{mean}}\n\\]",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Traits",
      "CO2"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/index.html",
    "href": "docs/Models/PMF/Phenology/index.html",
    "title": "Phenology",
    "section": "",
    "text": "Phenology is the component responsible for simulating developmental stages of a plant—from emergence to flowering, grain filling, and maturity.\nPhenology is the main model to simulate the developmental progression of a plant through a series of defined growth stages based on progression to completion.\nPhases are the individual growth stages that define the plant’s lifecycle, such as emergence, flowering, and maturity. Each phase has specific characteristics and requirements for progression.\nCAMP is the Cereal Anthesis Molecular Phenology (CAMP) model which is based on the Kirby Framework, and assumes the timing of anthesis is a result of the timing of flag leaf and an additional thermal time passage from there to heading then anthesis.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/index.html",
    "href": "docs/Models/PMF/Phenology/Phases/index.html",
    "title": "Phases",
    "section": "",
    "text": "Phases are the individual growth stages that define the plant’s lifecycle, such as emergence, flowering, and maturity. Each phase has specific characteristics and requirements for progression.\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\n\n\n\n\n\nEmergingPhase\n\n\n\n\n\n\n\n\n\nEndPhase\n\n\n\n\n\n\n\n\n\nGenericPhase\n\n\n\n\n\n\n\n\n\nGerminatingPhase\n\n\n\n\n\n\n\n\n\nIPhase\n\n\n\n\n\n\n\n\n\nLeafAppearancePhase\n\n\n\n\n\n\n\n\n\nVernalisationPhase\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html",
    "href": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html",
    "title": "LeafAppearancePhase",
    "section": "",
    "text": "The LeafAppearancePhase represents a developmental phase in a plant’s life cycle. The Final leaf number is fixed at the start of this phase. The remaining leaves continue to appear at a rate set by thermal time and phyllochron until flag leaf ligule appears and this phase is completed.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "LeafAppearancePhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#overview",
    "href": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#overview",
    "title": "LeafAppearancePhase",
    "section": "Overview",
    "text": "Overview\nThe LeafAppearancePhase is a phenological stage within the APSIM Next Generation framework that models the interval from a specified start stage to an end stage. The Final leaf number is fixed at the start of this phase (e.g. terminal spikelet). The remaining leaves continue to appear at a rate set by thermal time and phyllochron until flag leaf ligule appears and this phase is completed.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "LeafAppearancePhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#inputs",
    "href": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#inputs",
    "title": "LeafAppearancePhase",
    "section": "Inputs",
    "text": "Inputs\nThe following input functions are required by LeafAppearancePhase:\n\nFinalLeafNumber — Total number of leaves the plant will develop.\nLeafNumber — The current number of leaves that have appeared on the plant.\nFullyExpandedLeafNo — The number of leaves that have fully expanded.\nInitialisedLeafNumber — The number of leaf primordia that have been initiated.\n\nThe following configuration parameters can be set:\n\nStart — Name of the phenological stage at which this phase begins.\nEnd — Name of the phenological stage at which this phase ends.\nIsEmerged — Boolean flag indicating whether this phase begins post-emergence. Default is true.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "LeafAppearancePhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#methodology",
    "href": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#methodology",
    "title": "LeafAppearancePhase",
    "section": "Methodology",
    "text": "Methodology\nThe LeafAppearancePhase calculates the fraction of the phase completed (\\(F\\)) using:\n\\[\nF = \\frac{LN_i - LN_0}{FLN - LN_0}\n\\]\nWhere:\n\n\\(LN_i\\) is the current leaf number at day \\(i\\),\n\\(LN_0\\) is the leaf number at the start of the phase,\n\\(FLN\\) is the final leaf number.\n\nWhen all initialised leaf primordia have fully expanded, the phase is considered complete and moves to the next phase.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "LeafAppearancePhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#events",
    "href": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#events",
    "title": "LeafAppearancePhase",
    "section": "Events",
    "text": "Events\nEvents Listened For\nThese are signals or notifications that the function listens for from other parts of the simulation:\n\n\n\nEvent\nPurpose\n\n\n\n\nCommencing\nResets the phase state variables at the start of the simulation\n\n\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "LeafAppearancePhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#properties",
    "href": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#properties",
    "title": "LeafAppearancePhase",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nStart\nstring\nPhenological stage at which this phase begins\n\n\nEnd\nstring\nPhenological stage at which this phase ends\n\n\nIsEmerged\nbool\nIndicates whether the phase occurs after emergence\n\n\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nFractionComplete\ndouble\nFractional completion of the phase, ranging from 0 to 1",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "LeafAppearancePhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#user-interface",
    "href": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#user-interface",
    "title": "LeafAppearancePhase",
    "section": "User Interface",
    "text": "User Interface\nLeafAppearancePhase can be added as a child of a Phenology node in the model tree. Right-click the Phenology node, select “Add Model…”, and search for LeafAppearancePhase in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "LeafAppearancePhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#practical-example",
    "href": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#practical-example",
    "title": "LeafAppearancePhase",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "LeafAppearancePhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#see-also",
    "href": "docs/Models/PMF/Phenology/Phases/LeafAppearancePhase.html#see-also",
    "title": "LeafAppearancePhase",
    "section": "See Also",
    "text": "See Also\n\nSource code: LeafAppearancePhase.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "LeafAppearancePhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html",
    "href": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html",
    "title": "GerminatingPhase",
    "section": "",
    "text": "The GerminatingPhase represents a phenological sub-phase within a plant’s developmental timeline, responsible for simulating the transition from sowing to germination. It defines the conditions under which a seed germinates and completes the phase once those criteria are satisfied. Typically, it spans from the Sowing stage to the Germinated stage, and its completion is determined by either environmental triggers, e.g. soil moisture, temperature, or a user-specified germination date.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GerminatingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html#overview",
    "href": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html#overview",
    "title": "GerminatingPhase",
    "section": "Overview",
    "text": "Overview\nThe GerminatingPhase models the transition from sowing to germination in the crop’s phenological development. Germination is assumed to occur on the day after sowing, when any of the following conditions are met:\n\nSoil water at the sowing depth exceeds the lower limit (LL15),\nSoil temperature at the sowing depth is greater than or equal to the minimum soil temperature (as defined by the MinSoilTemperature child function),\nA specific germination date is provided via the GerminationDate property.\n\nOnce any of these conditions is satisfied, the seed is considered germinated, the SeedImbibed event is raised, and the simulation advances to the next phenological phase.\n\nGermination Triggers\nGermination occurs in one of two ways:\n\nUser-defined germination date\n\nIf GerminationDate is specified, germination occurs exactly on that date, regardless of soil moisture or temperature.\n\nEnvironmental conditions at sowing depth\n\nIf no date is defined, germination is triggered when:\n\nSoil water content exceeds the lower limit (LL15) for the sowing layer:\n\nSWmm[layer] &gt; LL15mm[layer]\n\nSoil temperature at sowing depth exceeds the minimum required value:\n\nSoilTemperature[layer] &gt;= MinSoilTemperature.Value()\n\nThe current day is not the sowing day.\n\nSowing Depth: The sowing layer is determined using the value of plant.SowingData.Depth, which maps to the appropriate soil layer index.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GerminatingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html#events",
    "href": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html#events",
    "title": "GerminatingPhase",
    "section": "Events",
    "text": "Events\nEvents Listened For\nThese are signals or notifications that the GerminatingPhase listens for from other parts of the simulation:\n\n\n\nEvent\nPurpose\n\n\n\n\nPlantSowing\nIndicates when the plant is sown, allowing the phase to determine the soil layer depth where seeds are placed. This is essential for checking soil conditions relevant to germination.\n\n\n\nEvents Raised to\nThese are signals that the GerminatingPhase sends out to notify other components when actions occur:\n\n\n\nEvent\nDescription\n\n\n\n\nSeedImbibed\nRaised when germination occurs, signaling other models or processes to begin their activities related to the germinated seed.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GerminatingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html#properties",
    "href": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html#properties",
    "title": "GerminatingPhase",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\nRequired\n\n\n\n\nStart\nstring\nPhenological stage at which this phase begins (e.g. Sowing).\nYes\n\n\nEnd\nstring\nPhenological stage that marks completion of the phase (e.g. Germinated).\nYes\n\n\nMinSoilTemperature\ndouble\nMinimum soil temperature required for germination (default is 0°C).\nYes\n\n\nGerminationDate\nstring\nOptional fixed calendar date to override environmental conditions.\nNo\n\n\n\nIsEmerged | bool | Boolean flag indicating whether the crop has emerged above the soil surface (i.e. this phase is happening above ground). | No |\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nFractionComplete\ndouble\nFraction (0–1) indicating how much of the phase is complete. Always returns 0 as germination has occurred in next day of sowing.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GerminatingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html#usage",
    "href": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html#usage",
    "title": "GerminatingPhase",
    "section": "Usage",
    "text": "Usage\nA GerminatingPhase can be used to represent the germination process of a plant, which is primarily influenced by soil moisture and temperature conditions.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GerminatingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html#see-also",
    "href": "docs/Models/PMF/Phenology/Phases/GerminatingPhase.html#see-also",
    "title": "GerminatingPhase",
    "section": "See Also",
    "text": "See Also\n\nSource code: GerminatingPhase.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GerminatingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EndPhase.html",
    "href": "docs/Models/PMF/Phenology/Phases/EndPhase.html",
    "title": "EndPhase",
    "section": "",
    "text": "EndPhase is the final phase in a crop’s phenological development. Once this phase is reached, the crop remains in this state indefinitely until it is harvested or removed.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EndPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EndPhase.html#overview",
    "href": "docs/Models/PMF/Phenology/Phases/EndPhase.html#overview",
    "title": "EndPhase",
    "section": "Overview",
    "text": "Overview\nIn the APSIM Next Gen phenology system, crop development is divided into sequential phases. EndPhase defines the last phase in this sequence. When the crop reaches this stage, it no longer accumulates thermal time or progresses through development.\nThis phase typically represents physiological maturity, senescence, or the point at which no further crop growth or development is expected. The model does not advance past this phase unless an external event (such as harvest or crop removal) occurs.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EndPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EndPhase.html#inputs",
    "href": "docs/Models/PMF/Phenology/Phases/EndPhase.html#inputs",
    "title": "EndPhase",
    "section": "Inputs",
    "text": "Inputs\n\nStart: The name of the stage that marks the beginning of this phase.\nEnd: The name of the stage that marks the end of this phase (usually not used since this is terminal).\nIsEmerged: Logical value indicating whether this phase assumes the crop has emerged (default is true).",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EndPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EndPhase.html#methodology",
    "href": "docs/Models/PMF/Phenology/Phases/EndPhase.html#methodology",
    "title": "EndPhase",
    "section": "Methodology",
    "text": "Methodology\nOnce the crop enters the EndPhase, it performs no further development:\n\nFractionComplete is always 0.\nTarget thermal time is 0.\nDoTimeStep() always returns false, indicating no development occurs.\nNo reset logic is required.\n\nThis phase ensures the crop’s development is paused or concluded until harvest or removal.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EndPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EndPhase.html#events",
    "href": "docs/Models/PMF/Phenology/Phases/EndPhase.html#events",
    "title": "EndPhase",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EndPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EndPhase.html#properties",
    "href": "docs/Models/PMF/Phenology/Phases/EndPhase.html#properties",
    "title": "EndPhase",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nStart\nstring\nStage that marks the beginning of this phase\n\n\nEnd\nstring\nStage name marking the end of this phase (optional)\n\n\nIsEmerged\nbool\nBoolean flag indicating whether the crop has emerged above the soil surface (i.e. this phase is happening above ground).\n\n\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nFractionComplete\ndouble\nAlways returns 0.0\n\n\nTarget\ndouble\nAlways returns 0 (no thermal time required)",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EndPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EndPhase.html#user-interface",
    "href": "docs/Models/PMF/Phenology/Phases/EndPhase.html#user-interface",
    "title": "EndPhase",
    "section": "User Interface",
    "text": "User Interface\nEndPhase is added as a child of a Phenology node to mark the final crop development stage. To use:\n\nRight-click on a Phenology component in the model tree.\nSelect “Add Model…”.\nChoose “EndPhase”.\nSet Start to the name of the phase where final development begins.\n\nNo child models are needed for EndPhase.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EndPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EndPhase.html#practical-example",
    "href": "docs/Models/PMF/Phenology/Phases/EndPhase.html#practical-example",
    "title": "EndPhase",
    "section": "Practical Example",
    "text": "Practical Example\nUse EndPhase in a crop model where development halts at a defined maturity point (e.g., “HarvestRipe”):\n\nSet Start = \"HarvestRipe\"\nThe crop will remain in this phase until harvested\n\n\nNo practical example is available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EndPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EndPhase.html#see-also",
    "href": "docs/Models/PMF/Phenology/Phases/EndPhase.html#see-also",
    "title": "EndPhase",
    "section": "See Also",
    "text": "See Also\n\nSource code: EndPhase.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EndPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/index.html",
    "href": "docs/Models/PMF/Phenology/CAMP/index.html",
    "title": "CAMP",
    "section": "",
    "text": "Cereal Anthesis Molecular Phenology (CAMP) model (Brown et al. 2013) is based on the Kirby (1988)’s Framework which assumes the timing of anthesis is a result of the timing of flag leaf and an additional thermal time passage from there to heading then anthesis. It also assumes the timing of flag leaf is a result of the Final Leaf Number (which sets a target) and leaf appearance rate (which sets the rate of progress toward the target). Leaf appearance rate is a function of Thermal time and a cultivar specific Phyllochron which changes with Haun stage as described by (Jamieson et al. 1998).\nMaster model, CAMP, is the main entry point for the Cereal Anthesis Molecular Phenology model in APSIM NG. Others are the submodels required by CAMP.\nThe table below lists the submodels that are required by CAMP:\n\n\n\nTitle\nDescription\n\n\n\n\nFinalLeafNumberSet\nStore the final leaf number parameters estimated for a cultivar under controlled environments\n\n\nFLNParameterEnvironment\nCapture the controlled environment conditions to observe final leaf number\n\n\nCultivarRateParams\nStores vernalisation rate parameters for a specific cultivar\n\n\nColdVrnResponse\nModels the upregulation of the Vrn1 gene in response to cold temperatures\n\n\nCalcCAMPVrnRates\nCalculates vernalization expression for the given cultivar and environmental conditions\n\n\n\n\n\n\n\nReferences\n\nBrown, Hamish E., Peter D. Jamieson, Ian R. Brooking, Derrick J. Moot, and Neil I. Huth. 2013. “Integration of Molecular and Physiological Models to Explain Time of Anthesis in Wheat.” Annals of Botany 112 (9): 1683–703. https://doi.org/10.1093/aob/mct224.\n\n\nJamieson, P. D., M. A. Semenov, I. R. Brooking, and G. S. Francis. 1998. “Sirius: A Mechanistic Model of Wheat Response to Environmental Variation.” European Journal of Agronomy 8 (3–4): 161–79. https://doi.org/16/S1161-0301(98)00020-3.\n\n\nKirby, E. J. M. 1988. “Analysis of Leaf, Stem and Ear Growth in Wheat from Terminal Spikelet Stage to Anthesis.” Field Crops Research 18 (2): 127–40. https://doi.org/10.1016/0378-4290(88)90004-4.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html",
    "href": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html",
    "title": "FLNParameterEnvironment",
    "section": "",
    "text": "A model that captures the controlled environmental conditions under which Final Leaf Number (FLN) observations were made. It is used to parameterize developmental responses under varying vernalisation and photoperiod conditions in APSIM NG phenology simulations.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FLNParameterEnvironment"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#overview",
    "href": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#overview",
    "title": "FLNParameterEnvironment",
    "section": "Overview",
    "text": "Overview\nThe FLNParameterEnvironment function is part of the phenology module in APSIM NG, specifically under the CAMP parent model. It describes the specific environmental settings such as vernalisation treatment temperature, duration, and photoperiod under which Final Leaf Number (FLN) was observed. These data are used for calibrating genotype responses to temperature and photoperiod cues.\nThis function serves as a data container and is typically used in experimental or modeling contexts where genotype × environment interactions affecting phenological development are being studied or simulated.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FLNParameterEnvironment"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#inputs",
    "href": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#inputs",
    "title": "FLNParameterEnvironment",
    "section": "Inputs",
    "text": "Inputs\nThe FLNParameterEnvironment function requires the following input parameters:\n\nVrnTreatTemp: Vernalisation treatment temperature (\\(^\\circ\\)C)\nVrnTreatDuration: Duration of exposure to vernalising temperature (days)\nTreatmentPp_L: Photoperiod during long-day treatment (hours)\nTtEmerge: Thermal time from sowing to emergence (degree-days)",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FLNParameterEnvironment"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#methodology",
    "href": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#methodology",
    "title": "FLNParameterEnvironment",
    "section": "Methodology",
    "text": "Methodology\nThis function does not contain computational logic or algorithms. Instead, it stores parameter values representing environmental conditions for vernalisation and photoperiod treatments. These inputs can be used by other functions in the APSIM phenology pipeline (e.g., for modeling development rate, phase transitions, or FLN prediction) to simulate plant responses to different environmental conditions.\nBy encapsulating experimental treatment data, this function supports modular and reusable parameterization within simulation scenarios involving phenological modeling.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FLNParameterEnvironment"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#events",
    "href": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#events",
    "title": "FLNParameterEnvironment",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FLNParameterEnvironment"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#properties",
    "href": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#properties",
    "title": "FLNParameterEnvironment",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nVrnTreatTemp\ndouble\nVernalisation treatment temperature (\\(^\\circ\\)C)\n\n\nVrnTreatDuration\ndouble\nDays of exposure to vernalising temperature\n\n\nTreatmentPp_L\ndouble\nPhotoperiod under long-day treatment (hours)\n\n\nTtEmerge\ndouble\nObserved thermal time from sowing to emergence (degree-days)\n\n\n\nRead-Only Reportable Properties\n\nNo read-only properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FLNParameterEnvironment"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#user-interface",
    "href": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#user-interface",
    "title": "FLNParameterEnvironment",
    "section": "User Interface",
    "text": "User Interface\nFLNParameterEnvironment can be added as a child of a CAMP node in the model tree. Right-click the CAMP node, select “Add Model…”, and search for FLNParameterEnvironment in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FLNParameterEnvironment"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#practical-example",
    "href": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#practical-example",
    "title": "FLNParameterEnvironment",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FLNParameterEnvironment"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#see-also",
    "href": "docs/Models/PMF/Phenology/CAMP/FLNParameterEnvironment.html#see-also",
    "title": "FLNParameterEnvironment",
    "section": "See Also",
    "text": "See Also\n\nSource code: FLNParameterEnvironment.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FLNParameterEnvironment"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html",
    "href": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html",
    "title": "ColdVrnResponse",
    "section": "",
    "text": "The ColdVrnResponse function models the upregulation of the Vrn1 gene in response to cold temperatures. This function is an extension of the base Vrn1 expression and represents how cold temperatures enhance vernalisation responses in cereal crops, as described in Brown et al. (2013). It is part of the vernalisation module used in the phenology model within APSIM NG.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "ColdVrnResponse"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#overview",
    "href": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#overview",
    "title": "ColdVrnResponse",
    "section": "Overview",
    "text": "Overview\nThe ColdVrnResponse function calculates an additional contribution to Vrn1 expression due to exposure to low temperatures, allowing plants to progress through their vernalisation requirement. It uses a temperature-dependent response, where expression increases exponentially with decreasing temperature. When temperatures exceed a threshold, the response is either reduced or suppressed, mimicking de-vernalisation effects. This function plays a crucial role in modeling development timing for cold-requiring cultivars.\nIt implements the IFunction and IIndexedFunction interfaces, and is used within the context of the CAMP model for phase progression in phenology.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "ColdVrnResponse"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#inputs",
    "href": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#inputs",
    "title": "ColdVrnResponse",
    "section": "Inputs",
    "text": "Inputs\nThe following inputs are required by the function, supplied as child models or linked references:\n\nCAMP: The parent model that contains the parameters and context for the CAMP model.\nk: The exponential shape factor controlling the temperature response curve.\ndeVernalisationTemp: The temperature threshold above which vernalisation is reduced.\ndeVernalisationRate: The rate of down-regulation of Vrn1 when temperature exceeds the de-vernalisation threshold.\ncamp.Params: A parameter check from the CAMP model indicating whether computation is active.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "ColdVrnResponse"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#methodology",
    "href": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#methodology",
    "title": "ColdVrnResponse",
    "section": "Methodology",
    "text": "Methodology\nThe function computes the Vrn1 upregulation for a given temperature \\(T\\) (likely a sub-daily temperature). Vrn1 expression is calculated after sowing as follows:\nIf temperature \\(T\\) is less than devernalisation temperature \\(T_{\\text{devernalisation}}\\), Vrn expression is an exponential function of temperature and divided by 24 to convert from daily to hourly as the hourly interpolation is used in the model.\n\\[ \\Delta Vrn1_{T} = \\frac{e^{k \\cdot T} }{24} \\]\nWhere:\n\n\\(\\Delta Vrn1_{T}\\) is the upregulation of Vrn1 from cold at temperature \\(T\\),\n\\(k\\) is the exponential shape factor for cold temperature response,\n\\(T\\) is the temperature in degrees Celsius.\n\nIf temperature \\(T\\) exceeds the de-vernalisation threshold \\(T_{\\text{devernalisation}}\\), the response is determined by down-regulation devernalisation rate through the parameter deVernalisationRate and divided by 24 to convert from daily to hourly as the hourly interpolation is used in the model:\n\\[ \\Delta Vrn1_{T} = \\frac{R_{\\text{devernalisationRate}}}{24} \\]",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "ColdVrnResponse"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#events",
    "href": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#events",
    "title": "ColdVrnResponse",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "ColdVrnResponse"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#properties",
    "href": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#properties",
    "title": "ColdVrnResponse",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nk\nIFunction\nThe exponential shape factor for cold temperature response.\n\n\ndeVernalisationTemp\nIFunction\nTemperature above which de-vernalisation occurs.\n\n\ndeVernalisationRate\nIFunction\nRate of Vrn1 downregulation above the temperature threshold.\n\n\n\nRead-Only Reportable Properties\n\nNo read-only properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "ColdVrnResponse"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#user-interface",
    "href": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#user-interface",
    "title": "ColdVrnResponse",
    "section": "User Interface",
    "text": "User Interface\nColdVrnResponse can be added as a child of a Function node in the model tree. Right-click the parent node, select “Add Model…”, and search for ColdVrnResponse in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "ColdVrnResponse"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#practical-example",
    "href": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#practical-example",
    "title": "ColdVrnResponse",
    "section": "Practical Example",
    "text": "Practical Example\nIn the wheat CAMP model or LeavesInitiating phase, the following parameters are used for the ColdVrnResponse function:\n\n\n\n\n\n\n\n\nName\nDescription\nValue\n\n\n\n\nk\nExponential shape factor for cold temperature response.\n-0.17\n\n\ndeVernalisationTemp\nTemperature above which de-vernalisation occurs.\n20\n\n\ndeVernalisationRate\nRate of Vrn1 downregulation above the temperature threshold.\n0\n\n\n\ndeVernalisationRate is set to 0, indicating that there is no down-regulation of Vrn1 expression at temperatures above the de-vernalisation threshold (i.e. 20°C).\nThe upregulation of Vrn1 from cold at temperature \\(T\\) (\\(\\Delta Vrn1_{T}\\)) is shown in the following plot.\n\n\n\n\n\nCold Vrn Response as a Function of Temperature",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "ColdVrnResponse"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#see-also",
    "href": "docs/Models/PMF/Phenology/CAMP/ColdVrnResponse.html#see-also",
    "title": "ColdVrnResponse",
    "section": "See Also",
    "text": "See Also\n\nSource code: ColdVrnResponse.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "ColdVrnResponse"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CAMP.html",
    "href": "docs/Models/PMF/Phenology/CAMP/CAMP.html",
    "title": "CAMP",
    "section": "",
    "text": "Cereal Anthesis Molecular Phenology (CAMP) model (Brown et al. 2013) is based on the Kirby (1988)’s Framework which assumes the timing of anthesis is a result of the timing of flag leaf and an additional thermal time passage from there to heading then anthesis. It also assumes the timing of flag leaf is a result of the Final Leaf Number (which sets a target) and leaf appearance rate (which sets the rate of progress toward the target). Leaf appearance rate is a function of Thermal time and a genotype specific Phyllochron which changes with Haun stage as described by (Jamieson et al. 1998).",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CAMP"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CAMP.html#overview",
    "href": "docs/Models/PMF/Phenology/CAMP/CAMP.html#overview",
    "title": "CAMP",
    "section": "Overview",
    "text": "Overview\nThe CAMP models vernalisation gene expression in wheat and other temperate cereals. It simulates molecular responses to temperature and photoperiod signals that regulate flowering transitions, including upregulation of Vrn1, Vrn2, and Vrn3 (Brown et al. 2013). These genes regulate the timing of key developmental transitions, particularly the completion of vernalisation and initiation of the reproductive phase.\nProgress through the vernalising phase is determined by the apparent expression of Vrn1 and Vrn2 genes. Vrn1 is the gene that orchestrates cold temperature responses in development. To complete the vernalising stage, Vrn1 expression must first reach a threshold of at least 1.0. In warm temperatures (above 18 °C), Vrn1 is expressed at a genotype-dependent base rate. This base rate is lower for vernalisation-sensitive genotypes, which develop slower under warm conditions. However, exposure to cold temperatures accelerates Vrn1 expression, causing vernalisation-sensitive varieties to reach this stage at a lower Haun stage.\nVrn2 is upregulated by longer photoperiods and acts as a repressor of Vrn3, which is essential for progression to spikelet initiation. Vrn1 in turn represses Vrn2. Thus, higher photoperiod-induced Vrn2 expression raises the Vrn1 target above 1.0, extending the vernalisation phase. Conversely, shorter days reduce the Vrn1 target, a phenomenon known as short-day vernalisation. Vrn3 may also contribute to the acceleration of Vrn1 expression during vernalisation, a process represented by a composite parameter VrnX in the CAMP model.\nThe CAMP model integrates molecular and physiological representations to better capture genotype × environment × management (G×E×M) interactions and to provide a mechanistic bridge between genetic parameters and field-level crop behavior. All gene expressions are derived daily based on haun stage increment, temperature, and photoperiod.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CAMP"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CAMP.html#inputs",
    "href": "docs/Models/PMF/Phenology/CAMP/CAMP.html#inputs",
    "title": "CAMP",
    "section": "Inputs",
    "text": "Inputs\n\n\n\n\n\n\n\n\nInput\nType\nDescription\n\n\n\n\ntt\nIFunction\nDaily thermal time (°Cd)\n\n\nColdVrnResponse\nIFunction\nFunction for cold temperature response driving Vrn1 expression\n\n\nPpResponse\nIFunction\nRelative photoperiod function (scaled between 0–1)\n\n\nhaunStage\nIFunction\nDaily Haun Stage value\n\n\nbasePhyllochron\nIFunction\nPhyllochron used for growth rate before emergence\n\n\ndeltaHaunStage\nIFunction\nHaun stage increment post-emergence\n\n\nFLNparams\nFinalLeafNumberSet\nCultivar-specific final leaf number parameters\n\n\nEnvData\nFLNParameterEnvironment\nEnvironmental inputs for parameterisation\n\n\ncalcCAMPVrnRates\nCalcCAMPVrnRates\nSubmodule that calculates cultivar-specific rate parameters",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CAMP"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CAMP.html#methodology",
    "href": "docs/Models/PMF/Phenology/CAMP/CAMP.html#methodology",
    "title": "CAMP",
    "section": "Methodology",
    "text": "Methodology\nGenotype-specific rates of gene expression in CAMP are defined by FLNparams, which includes:\n\nMinLN: Base final leaf number under full vernalisation and long photoperiod.\nPpLN: Increase in FLN when grown under short photoperiod (e.g. 8h) after full vernalisation.\nVrnLN: Increase in FLN due to lack of vernalisation when grown under short photoperiod.\nVxPLN: Modification to FLN due to photoperiod interaction under unvernalised conditions.\n\nControlled environment conditions under which final leaf number (FinalLeafNumberSet) was observed and defined by EnvData:\n\nVrnTreatTemp: Temperature (°C) used during the vernalisation treatment.\nVrnTreatDuration: Number of days the plants were exposed to the vernalising temperature.\nTreatmentPp_L: Photoperiod (hours) during the long-day photoperiod treatment.\nTtEmerge: Measured thermal time (°Cd) from sowing to emergence.\n\n\nOn Plant Sowing\nWhen the plant is sown, the CAMP model\n\nresets all vernalisation gene expressions,\ncalculates vernalisation rate parameters using a set of final leaf number parameters and controlled environment data.\n\n\n\nOn Seed Imbibed\nWhen the seed is imbibed after germination, the CAMP model set isImbibed to true, indicating that the seed has absorbed water and is ready for germination.\n\n\nON Plant Emerged\nWhen the plant emerges, the CAMP model set IsEmerged to true, indicating that the plant has successfully emerged from the soil.\n\n\nOn Pre Phenology\nIn each day before phenology calculations, the CAMP model updates the expression of Vrn1, Vrn2, and Vrn3 based on current Haun stage, temperature, and photoperiod. The rate of gene expression is genotype-specific and internally derived from FLN parameters.\n\nVrn1 is expressed at a base rate under warm conditions, increasing under colder temperatures. The total expression includes both base and cold-driven components. Once Vrn1 expression exceeds the threshold of 1.0, the plant is considered vernalised.\nVrn2 is upregulated by long photoperiods. It inhibits Vrn3 expression and must be repressed (via increased Vrn1) before reproductive development can proceed.\nVrn3 is upregulated after vernalisation is complete and is necessary for terminal spikelet initiation. Its expression accelerates phenological progression.\nVrnX captures the net effect of photoperiod (via Vrn2 and Vrn3) on vernalisation duration.\n\nThe following steps are performed on event PrePhenology:\n\nCalculate daily Haun Stage changes\nWhether the crop has emerged is determined by whether the current phase represents development above the soil surface — that is, the phase itself occurs above ground or comes after emergence in most plants.\nIf the crop has not emerged, the Haun Stage delta (\\(\\Delta HS\\)) is estimated based on daily thermal time (\\(TT\\)) and a base phyllochron:\n\\[\n\\Delta HS = \\frac{TT}{Ph_\\text{base}} \\times F_{\\text{emgDur}}\n\\]\nWhere:\n\n\\(Ph_\\text{base}\\) is the base phyllochron (thermal time per leaf appearance) for the crop, is a factor that slows down leaf appearance\n\\(F_{\\text{emgDur}}\\) is a factor that accounts for the duration of emergence, which is set to 1.0 if the accumulated thermal time since sowing does not exceed 90°C·d.\n\nIf the accumulated thermal time since sowing exceeds 90°C·d, a correction factor is applied to account for prolonged or delayed emergence conditions:\n\\[\nF_{\\text{emgDur}} = e^{-0.015 \\times ( \\sum_{t = t_{\\text{sow}}}^{t_{\\text{today}}} TT_t - 90)}\n\\]\nWhere:\n\n\\(\\sum_{t = \\text{sow}}^{\\text{today}} TT_t\\) is the cumulative thermal time from sowing to today.\n\nIf the crop has emerged, \\(\\Delta HS\\) is calculated from the model input variable deltaHaunStage. In general, this variable is updated daily based on the daily thermal time and actual phyllochron.\n\n\nBase and Maximum Vernalisation Expression\nGene expression is divided into:\n\n\\(Vrn_{\\text{base}}\\): Baseline vernalisation expression, which is the cumulative amount of Vrn1 expressed under baseline conditions,\n\\(Vrn_{\\text{max}}\\): Maximum vernalisation expression, which is the cumulative amount of Vrn1 expressed under maximum conditions (e.g. cold temperatures),\n\\(F_{\\text{Pp, Vrn3}}\\): Photoperiod factor for Vrn3 expression, which is the factor that modifies Vrn3 expression based on photoperiod\nIf not yet vernalised, e.g. from sowing to vernalisation saturation:\n\n\\[\n\\Delta Vrn_{\\text{base}} = \\Delta Vrn_{\\text{base, veg}} \\times \\Delta HS\n\\]\nWhere:\n\n\\(\\Delta Vrn_{\\text{base, veg}}\\) is the baseline rate of Vrn1 expression during the vegetative phase, which is derived from the calcCAMPVrnRates submodule at event PlantSowing,\n\\(\\Delta HS\\) is the daily Haun stage increment.\n\n\\[\n\\Delta Vrn_{\\text{max}} = \\Delta Vrn_{\\text{max, veg}} \\times \\Delta HS\n\\]\nWhere:\n\n\\(\\Delta Vrn_{\\text{max, veg}}\\) is the maximum rate of Vrn1 expression during the vegetative phase, also derived from the calcCAMPVrnRates submodule at event PlantSowing,\n\\(\\Delta HS\\) is the daily Haun stage increment.\n\n\\[\nF_{\\text{Pp, Vrn3}} = F_{\\text{Pp, Vrn3, veg}}\n\\]\nWhere:\n\n\\(F_{\\text{Pp, Vrn3, veg}}\\) is the photoperiod factor for Vrn3 expression during the vegetative phase, derived from the calcCAMPVrnRates submodule at event PlantSowing.\nIf vernalised but not reproductive, e.g. from vernalisation saturation to floral initiation:\n\n\\[\n\\Delta Vrn_{\\text{base}} = \\Delta Vrn_{\\text{base, ER}} \\times \\Delta HS\n\\]\nWhere:\n\n\\(\\Delta Vrn_{\\text{base, ER}}\\) is the baseline rate of Vrn1 expression during the early reproductive phase, derived from the calcCAMPVrnRates submodule at event PlantSowing,\n\\(\\Delta HS\\) is the daily Haun stage increment.\n\n\\[\n\\Delta Vrn_{\\text{max}} = \\Delta Vrn_{\\text{max, ER}} \\times \\Delta HS\n\\]\nWhere:\n\n\\(\\Delta Vrn_{\\text{max, ER}}\\) is the maximum rate of Vrn1 expression during the early reproductive phase, derived from the calcCAMPVrnRates submodule at event PlantSowing,\n\\(\\Delta HS\\) is the daily Haun stage increment.\n\n\\[\nF_{\\text{Pp, Vrn3}} = F_{\\text{Pp, Vrn3, ER}}\n\\]\nWhere:\n\n\\(F_{\\text{Pp, Vrn3, ER}}\\) is the photoperiod factor for Vrn3 expression during the early reproductive phase, derived from the calcCAMPVrnRates submodule at event PlantSowing.\n\n\\(Vrn_{\\text{base}}\\) and \\(Vrn _{\\text{max}}\\) are accumulated since isImbibed is true, in general starting from germination.\n\\[\nVrn_{\\text{base}} = \\sum_{t = \\text{imbibed}}^{\\text{today}} \\Delta Vrn_{\\text{base}}\n\\]\n\\[\nVrn_{\\text{max}} = \\sum_{t = \\text{imbibed}}^{\\text{today}} \\Delta Vrn_{\\text{max}}\n\\]\n\n\nCold Vernalisation (Vrn1)\nCold response affects Vrn1 expression:\n\\[\n\\Delta Cold = R_{\\text{cold,\\ vrn}} \\times \\Delta Vrn_{\\text{base}} \\times F_{\\text{cold, vrn1}}\n\\]\nWhere:\n\n\\(R_{\\text{cold,\\ vrn}}\\) is the cold upregulation response for Vrn1 expression, specified by the input child function ColdVrnResponse,\n\\(F_{\\text{cold, vrn1}}\\) is the cold upregulation factor for Vrn1 expression, derived from the calcCAMPVrnRates submodule at event PlantSowing.\n\nThen the total Cold exposure is accumulated since imbibition (i.g. germination):\n\\[\nCold = \\sum_{t = \\text{imbibed}}^{\\text{today}} \\Delta Cold\n\\]\nIf cold exposure surpasses a methylation threshold \\(\\theta_{\\text{meth}}\\), which is derived from the calcCAMPVrnRates submodule at event PlantSowing. Changes of Vrn1 expression is equal to changes of cold exposure:\n\\[\n\\Delta Vrn1 = \\Delta Cold \\qquad \\text{if}\\ Cold\\ \\geq \\theta_{\\text{meth}}\n\\]\nThen the total Vrn1 expression is accumulated since imbibition (i.g. germination): \\[\nVrn1 = \\sum_{t = \\text{imbibed}}^{\\text{today}} \\Delta Vrn1\n\\]\n\n\nPhotoperiod Response and Vrn2/Vrn3\nVrn2 expression is set as relative to the maximum vernalisation expression (\\(Vrn_{\\text{max}}\\)) and photoperiod response before vernalisation saturation:\n\\[\nVrn2 = Vrn_{\\text{max}} \\times R_{\\text{Pp}}\n\\]\nWhere:\n\n\\(R_{\\text{PP}}\\) is the photoperiod response for Vrn2 expression, specified by the input child function PpResponse,\n\\(V_{\\text{max}}\\) is the maximum vernalisation expression, derived from the calcCAMPVrnRates submodule at event PlantSowing.\n\nPhotoperiod gene expression is active only if isEmerged is true, i.e. after emergence in general.\n\\[\n\\begin{align}\n\\Delta Vrn3 = \\left( F_{\\text{Pp, Vrn3}} - 1\\right) \\times R_{\\text{Pp}} \\times \\Delta V_{\\text{base}} \\\\\n\\qquad \\ \\qquad if\\quad  Vrn_{\\text{base}} + Vrn1 &gt; Vrn2\n\\end{align}\n\\]\nWhere:\n\n\\(F_{\\text{Pp, Vrn3}}\\) is the photoperiod factor for Vrn3 expression, derived from the calcCAMPVrnRates submodule at event PlantSowing,\n\\(R_{\\text{PP}}\\) is the photoperiod response for Vrn1 expression, specified by the input child function PpResponse,\n\\(\\Delta V_{\\text{base}}\\) is the baseline rate of Vrn1 expression.\n\nThen the total Vrn3 expression is accumulated since imbibition (i.g. germination): \\[\nVrn3 = \\sum_{t = \\text{imbibed}}^{\\text{today}} \\Delta Vrn3\n\\]\n\n\nFinal Vernalisation Level (Vrn)\nThe total vernalisation expression (\\(Vrn\\)) is accumulated from imbibition (i.e. germination) as follows:\n\nIf not vernalised:\n\n\\[\nVrn = Vrn_{\\text{base}} + Vrn1 + Vrn3 - Vrn2\n\\]\nWhere:\n\n\\(Vrn_{\\text{base}}\\) is the baseline vernalisation expression,\n\\(Vrn1\\) is the cold-induced vernalisation expression,\n\\(Vrn2\\) is the photoperiod-induced repressor of flowering,\n\\(Vrn3\\) is the photoperiod-dependent promoter of flowering.\n\n\\(Vrn\\) is bounded from 0 to \\(Vrn_{\\text{max}}\\).\n\nIf vernalised:\n\n\\[\nVrn = \\sum_{t = \\text{imbibed}}^{\\text{today}} \\left( \\Delta Vrn_{\\text{base}} + \\Delta Vrn3 \\right)\n\\]\nDelta change of \\(Vrn\\) is calculated through the difference between the current and previous day’s vernalisation level:\n\\[\n\\Delta Vrn = Vrn_{\\text{today}} - Vrn_{\\text{yesterday}}\n\\]\n\n\n\nPhase Transitions\nThe plant is\n\nfully vernalised when the total vernalisation (\\(Vrn\\)) reaches a threshold of 1.0,\ntransitioning to the reproductive phase when the total vernalisation (\\(Vrn\\)) reaches a threshold of 2.0.\n\nThe Haun Stage at vernalisation saturation (\\(HS_{VS}\\)) and terminal spikelet (\\(HS_{TS}\\)) are recorded from child function HaunStage.\n\n\nFinal Leaf Number (FLN)\nThe Final Leaf Number is calculated at terminal spikelet following the method of Brown et al. (2013): \\[\nFLN = 2.85 + 1.1 \\times HS_{TS}\n\\]",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CAMP"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CAMP.html#events",
    "href": "docs/Models/PMF/Phenology/CAMP/CAMP.html#events",
    "title": "CAMP",
    "section": "Events",
    "text": "Events\nEvents Listened For\nThese are signals or notifications that the function listens for from other parts of the simulation:\n\n\n\n\n\n\n\nEvent\nPurpose\n\n\n\n\nSeedImbibed\nTriggers start of imbibition and gene expression\n\n\nPlantEmerged\nActivates photoperiod sensitivity and post-emergence expression\n\n\nPlantSowing\nResets all gene expression and loads cultivar-specific parameters\n\n\nPrePhenology\nMain daily update loop for gene expression and state transitions\n\n\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CAMP"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CAMP.html#properties",
    "href": "docs/Models/PMF/Phenology/CAMP/CAMP.html#properties",
    "title": "CAMP",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nIsGerminated\nbool\nTrue if seed is imbibed\n\n\nIsEmerged\nbool\nTrue if seed has emerged\n\n\nIsVernalised\nbool\nTrue if vernalisation threshold reached (\\(Vrn ≥ 1.0\\))\n\n\nIsReproductive\nbool\nTrue if reproductive threshold reached (\\(Vrn ≥ 2.0\\))\n\n\nBaseVrn\ndouble\nBaseline upregulated Vrn1 expression\n\n\nCold\ndouble\nCold-induced Vrn1 expression\n\n\nVrn1\ndouble\nMethalated Vrn1 expression (persisting)\n\n\nVrn2\ndouble\nLong-day induced repressor of flowering\n\n\nVrn3\ndouble\nPhotoperiod-dependent promoter of flowering\n\n\nVrn\ndouble\nNet vernalisation signal (Vrn1 + Vrn3 + BaseVrn - Vrn2)\n\n\nFLN\ndouble\nFinal leaf number\n\n\nTSHS\ndouble\nTerminal spikelet Haun stage\n\n\nVSHS\ndouble\nVernalisation saturation Haun stage\n\n\nRelPp\ndouble\nRelative photoperiod between 0 (short) and 1 (long)\n\n\nRelCold\ndouble\nCold effectiveness from ColdVrnResponse",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CAMP"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CAMP.html#user-interface",
    "href": "docs/Models/PMF/Phenology/CAMP/CAMP.html#user-interface",
    "title": "CAMP",
    "section": "User Interface",
    "text": "User Interface\nCAMP can be added as a child of a Phenology node in the model tree. Right-click the parent node, select “Add Model…”, and search for CAMP in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CAMP"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CAMP.html#practical-example",
    "href": "docs/Models/PMF/Phenology/CAMP/CAMP.html#practical-example",
    "title": "CAMP",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CAMP"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CAMP.html#see-also",
    "href": "docs/Models/PMF/Phenology/CAMP/CAMP.html#see-also",
    "title": "CAMP",
    "section": "See Also",
    "text": "See Also\n\nSource code: CAMP.cs on GitHub\nRelated function: CalcCAMPVrnRates.cs",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CAMP"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/RelativeAllocation.html",
    "href": "docs/Models/PMF/Arbitrator/RelativeAllocation.html",
    "title": "Relative Allocation",
    "section": "",
    "text": "The RelativeAllocation module implements a proportional allocation strategy to distribute available biomass or nutrient supply among plant organs. This strategy is a general-purpose mechanism that underpins how APSIM handles partitioning of dry matter (DM) and nutrients (e.g. nitrogen) based on each organ’s demand.\nThis method is part of the broader plant allocation system and is invoked by arbitrator components such as BiomassTypeArbitrator.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Relative Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#biological-motivation",
    "href": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#biological-motivation",
    "title": "Relative Allocation",
    "section": "Biological Motivation",
    "text": "Biological Motivation\nPlants must allocate available assimilates or nutrients among organs in a coordinated way. The RelativeAllocation method mimics this by:\n\nPrioritizing structural and metabolic demands (essential growth),\nThen allocating any residual supply to storage pools (non-essential, luxury uptake).\n\nThis reflects physiological prioritization in plant growth.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Relative Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#allocation-logic",
    "href": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#allocation-logic",
    "title": "Relative Allocation",
    "section": "Allocation Logic",
    "text": "Allocation Logic\nThe allocation occurs in two sequential passes:\n\nFirst Pass – Structural and Metabolic Allocation\nSecond Pass – Storage (Luxury) Allocation",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Relative Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#first-pass-structural-and-metabolic-allocation",
    "href": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#first-pass-structural-and-metabolic-allocation",
    "title": "Relative Allocation",
    "section": "First Pass – Structural and Metabolic Allocation",
    "text": "First Pass – Structural and Metabolic Allocation\n\nObjective\nDistribute available supply to fulfill structural and metabolic demands proportionally.\n\n\nDefinitions\nLet:\n\n\\(S_{\\text{total}}\\): Total supply available (e.g. Dry biomass or nitrogen).\n\\(D_s^{(i)}\\): Structural demand of organ \\(i\\)\n\\(D_m^{(i)}\\): Metabolic demand of organ \\(i\\)\n\\(D_{s,\\text{total}} = \\sum_i D_s^{(i)}\\): Total structural demand across all organs.\n\\(D_{m,\\text{total}} = \\sum_i D_m^{(i)}\\): Total metabolic demand across all organs.\n\nWe define the structural fraction of supply as:\n\\[\nf_s = \\frac{D_{s,\\text{total}}}{D_{s,\\text{total}} + D_{m,\\text{total}}}\n\\]\nThen, for each organ \\(i\\):\n\nStructural allocation:\n\n\\[\nA_s^{(i)} = \\min\\left(R_s^{(i)}, S_{\\text{total}} \\cdot f_s \\cdot \\frac{D_s^{(i)}}{D_{s,\\text{total}}} \\right)\n\\]\n\nMetabolic allocation:\n\n\\[\nA_m^{(i)} = \\min\\left(R_m^{(i)}, S_{\\text{total}} \\cdot (1 - f_s) \\cdot \\frac{D_m^{(i)}}{D_{m,\\text{total}}} \\right)\n\\]\nwhere \\(R_s^{(i)}\\) and \\(R_m^{(i)}\\) are the remaining unmet demand for structural and metabolic pools, respectively.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Relative Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#second-pass-storage-luxury-allocation",
    "href": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#second-pass-storage-luxury-allocation",
    "title": "Relative Allocation",
    "section": "Second Pass – Storage (Luxury) Allocation",
    "text": "Second Pass – Storage (Luxury) Allocation\n\nObjective\nAllocate any remaining supply to storage pools (non-essential or luxury growth) based on proportional demand.\n\n\nDefinitions\nLet:\n\n\\(S_{\\text{rem}}\\): Remaining supply after first pass\n\\(D_t^{(i)}\\): Storage demand of organ \\(i\\)\n\\(D_{t,\\text{total}} = \\sum_i D_t^{(i)}\\): Total storage demand across all organs\n\nThen, for each organ \\(i\\):\n\\[\nA_t^{(i)} = \\min\\left(R_t^{(i)}, S_{\\text{rem}} \\cdot \\frac{D_t^{(i)}}{D_{t,\\text{total}}} \\right)\n\\]\nwhere \\(R_t^{(i)}\\) is the remaining unmet storage demand for organ \\(i\\).",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Relative Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#final-accounting",
    "href": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#final-accounting",
    "title": "Relative Allocation",
    "section": "Final Accounting",
    "text": "Final Accounting\nAfter both passes, the module tracks:\n\nTotal allocation: Sum of structural, metabolic, and storage allocations across all organs.\nNot allocated: Any supply that remains unallocated due to demand being fully satisfied or due to zero total demand (e.g., at early stages).\n\n\\[\nS_{\\text{not\\_allocated}} = S_{\\text{total}} - \\sum_i \\left( A_s^{(i)} + A_m^{(i)} + A_t^{(i)} \\right)\n\\]\nThis is useful for diagnostics, such as reporting sink limitations.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Relative Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#key-features",
    "href": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#key-features",
    "title": "Relative Allocation",
    "section": "Key Features",
    "text": "Key Features\n\nPrioritizes essential growth (structural and metabolic) over luxury (storage).\nProportional to each organ’s share of total demand.\nApplies generically to both biomass and nutrients.\nUses a two-pass method to avoid allocating luxury growth when essential needs are unmet.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Relative Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#practical-example",
    "href": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#practical-example",
    "title": "Relative Allocation",
    "section": "Practical Example",
    "text": "Practical Example\nAssume:\n\nLeaf has a structural demand of 50 units and a metabolic demand of 20 units.\nStem has a structural demand of 60 units and a metabolic demand of 60 units.\nTotal supply is 120 units.\n\nThen:\n\nTotal structural demand = 50 (leaf) + 60 (stem) = 110 units\nTotal metabolic demand = 20 (leaf) + 60 (stem) = 80 units\nStructural fraction:\n\\(f_s = \\frac{110}{110 + 80} = 0.579\\)\nFirst pass allocates:\n\nStructural: \\(120 \\times 0.579 = 69.48\\) units, distributed as:\n\nLeaf: \\(69.48 \\times \\frac{50}{110} = 31.58\\) units\nStem: \\(69.48 \\times \\frac{60}{110} = 37.90\\) units\n\nMetabolic: \\(120 \\times 0.421 = 50.52\\) units, distributed as:\n\nLeaf: \\(50.52 \\times \\frac{20}{80} = 12.63\\) units\nStem: \\(50.52 \\times \\frac{60}{80} = 37.89\\) units\n\n\nSecond pass allocates any leftover proportionally to storage demands.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Relative Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#applications",
    "href": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#applications",
    "title": "Relative Allocation",
    "section": "Applications",
    "text": "Applications\n\nBiomass partitioning after photosynthesis, reallocation, and retranslocation.\nNitrogen allocation after uptake, reallocation, and retranslocation.\nAny generic resource arbitration among competing sinks.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Relative Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#references",
    "href": "docs/Models/PMF/Arbitrator/RelativeAllocation.html#references",
    "title": "Relative Allocation",
    "section": "References",
    "text": "References\n\nAPSIM Next Generation Source Code: github.com/APSIMInitiative/ApsimX\nAPSIM NG Source Code: RelativeAllocation.cs",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Relative Allocation"
    ]
  },
  {
    "objectID": "docs/Models/Graph/index.html",
    "href": "docs/Models/Graph/index.html",
    "title": "Graph",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\n\n\n\n\n\nShow Event Names on Graph\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Graph"
    ]
  },
  {
    "objectID": "docs/Models/Functions/index.html",
    "href": "docs/Models/Functions/index.html",
    "title": "Functions",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\n\n\n\n\n\nAccumulateFunction\n\n\n\n\n\n\n\n\n\nAddFunction\n\n\n\n\n\n\n\n\n\nConstant\n\n\n\n\n\n\n\n\n\nDaily Nitrogen Demand for Storage Organs\n\n\n\n\n\n\n\n\n\nDivideFunction\n\n\n\n\n\n\n\n\n\nHourlySinPpAdjusted\n\n\n\n\n\n\n\n\n\nMaximumFunction\n\n\n\n\n\n\n\n\n\nMinimumFunction\n\n\n\n\n\n\n\n\n\nMultiplyFunction\n\n\n\n\n\n\n\n\n\nPhaseLookup\n\n\n\n\n\n\n\n\n\nPhaseLookupValue\n\n\n\n\n\n\n\n\n\nPhotoperiod\n\n\n\n\n\n\n\n\n\nSubDailyInterpolation\n\n\n\n\n\n\n\n\n\nSubtractFunction\n\n\n\n\n\n\n\n\n\nThreeHourAirTemperature\n\n\n\n\n\n\n\n\n\nXYPairs Function\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions"
    ]
  },
  {
    "objectID": "docs/Models/Functions/ThreeHourAirTemperature.html",
    "href": "docs/Models/Functions/ThreeHourAirTemperature.html",
    "title": "ThreeHourAirTemperature",
    "section": "",
    "text": "The ThreeHourAirTemperature function provides 3-hourly estimates of air temperature by interpolating between daily maximum and minimum temperatures using a sinusoidal method.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "ThreeHourAirTemperature"
    ]
  },
  {
    "objectID": "docs/Models/Functions/ThreeHourAirTemperature.html#overview",
    "href": "docs/Models/Functions/ThreeHourAirTemperature.html#overview",
    "title": "ThreeHourAirTemperature",
    "section": "Overview",
    "text": "Overview\nThreeHourAirTemperature is used to generate sub-daily (3-hourly) air temperature values from daily weather data. This is important for models that require finer temporal resolution of temperature, such as those simulating plant or soil processes sensitive to diurnal temperature variation.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "ThreeHourAirTemperature"
    ]
  },
  {
    "objectID": "docs/Models/Functions/ThreeHourAirTemperature.html#inputs",
    "href": "docs/Models/Functions/ThreeHourAirTemperature.html#inputs",
    "title": "ThreeHourAirTemperature",
    "section": "Inputs",
    "text": "Inputs\n\nMetData: A IWeather model for maximum air minimum and maximum temperature from weather data, i.e. a Weather model is required in the simulation to provide daily maximum and minimum temperatures.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "ThreeHourAirTemperature"
    ]
  },
  {
    "objectID": "docs/Models/Functions/ThreeHourAirTemperature.html#methodology",
    "href": "docs/Models/Functions/ThreeHourAirTemperature.html#methodology",
    "title": "ThreeHourAirTemperature",
    "section": "Methodology",
    "text": "Methodology\nThe 24-hour day is divided into 8 equal 3-hour periods. For each period \\(p \\in \\{1, 2, \\dots, 8\\}\\), a temperature range factor \\(\\text{TRF}_p\\) is calculated as:\n\\[\n\\text{TRF}_p = 0.92105 + 0.1140p - 0.0703p^2 + 0.0053p^3\n\\]\nThese factors represent the proportion of the daily diurnal range \\((T_\\text{max} - T_\\text{min})\\) added to the daily minimum temperature to estimate sub-daily temperatures.\nFor each 3-hour interval \\(p\\), the temperature \\(T_p\\) is computed as:\n\\[\nT_p = T_\\text{min} + \\text{TRF}_p \\cdot (T_\\text{max} - T_\\text{min})\n\\]\nWhere:\n\n\\(T_\\text{min}\\): Minimum air temperature for the day\n\n\\(T_\\text{max}\\): Maximum air temperature for the day\n\n\\(\\text{TRF}_p\\): Temperature range factor for period \\(p\\)",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "ThreeHourAirTemperature"
    ]
  },
  {
    "objectID": "docs/Models/Functions/ThreeHourAirTemperature.html#events",
    "href": "docs/Models/Functions/ThreeHourAirTemperature.html#events",
    "title": "ThreeHourAirTemperature",
    "section": "Events",
    "text": "Events\nEvents Listened For\nThese are signals or notifications that the function listens for from other parts of the simulation:\n\n\n\nEvent\nPurpose\n\n\n\n\nCommencing\nCalculate \\(\\text{TRF}_p\\) at starting of simulation\n\n\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "ThreeHourAirTemperature"
    ]
  },
  {
    "objectID": "docs/Models/Functions/ThreeHourAirTemperature.html#properties",
    "href": "docs/Models/Functions/ThreeHourAirTemperature.html#properties",
    "title": "ThreeHourAirTemperature",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nOutputValueType\nstring\nThe type of variable for sub-daily values as air temperature",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "ThreeHourAirTemperature"
    ]
  },
  {
    "objectID": "docs/Models/Functions/ThreeHourAirTemperature.html#user-interface",
    "href": "docs/Models/Functions/ThreeHourAirTemperature.html#user-interface",
    "title": "ThreeHourAirTemperature",
    "section": "User Interface",
    "text": "User Interface\nThreeHourAirTemperature can be added as a child of a SubDailyInterpolation node in the model tree. Right-click the parent node, select “Add Model…”, and search for ThreeHourAirTemperature in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "ThreeHourAirTemperature"
    ]
  },
  {
    "objectID": "docs/Models/Functions/ThreeHourAirTemperature.html#practical-example",
    "href": "docs/Models/Functions/ThreeHourAirTemperature.html#practical-example",
    "title": "ThreeHourAirTemperature",
    "section": "Practical Example",
    "text": "Practical Example\nIf the daily temperature ranges from 10 °C to 30 °C, and you want the interpolated value for whole day, the function will calculate the 3-hourly temperatures as follows:\n\nCompute the range: \\(T_\\text{max} - T_\\text{min} = 20\\) °C.\nCompute \\(\\text{TRF}_3\\) at period \\(p = 3\\):\n\n\\[\n\\text{TRF}_3 = 0.92105 + 0.1140 \\cdot 3 - 0.0703 \\cdot 3^2 + 0.0053 \\cdot 3^3 = 0.77345\n\\]\n\nCompute sub-daily temperature:\n\n\\[\nT_3 = 10 + 0.77345 \\cdot 20 = 25.469^\\circ \\text{C}\n\\]",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "ThreeHourAirTemperature"
    ]
  },
  {
    "objectID": "docs/Models/Functions/ThreeHourAirTemperature.html#see-also",
    "href": "docs/Models/Functions/ThreeHourAirTemperature.html#see-also",
    "title": "ThreeHourAirTemperature",
    "section": "See Also",
    "text": "See Also\n\nSource code: ThreeHourAirTemperature.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "ThreeHourAirTemperature"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubDailyInterpolation.html",
    "href": "docs/Models/Functions/SubDailyInterpolation.html",
    "title": "SubDailyInterpolation",
    "section": "",
    "text": "SubDailyInterpolation is a function module that enables fine-resolution simulation of temperature-driven biological responses by computing sub-daily (e.g., hourly) air temperatures. It does so by interpolating daily minimum and maximum temperatures using a chosen method (e.g., ThreeHourAirTemperature) or HourlySinPpAdjusted, and applying a temperature response function to each sub-daily point, aggregating the result as a sum or average. This allows temperature-dependent processes such as growth, phenology, or respiration to respond more realistically to daily temperature cycles.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubDailyInterpolation"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubDailyInterpolation.html#overview",
    "href": "docs/Models/Functions/SubDailyInterpolation.html#overview",
    "title": "SubDailyInterpolation",
    "section": "Overview",
    "text": "Overview\nThe SubDailyInterpolation model enables simulation of plant and environmental processes that require sub-daily temperature information. It operates by:\n\nInterpolating sub-daily air temperatures using a child model that implements IInterpolationMethod (e.g., HourlySinPpAdjusted or ThreeHourAirTemperature).\nApplying a child IIndexedFunction response function to each of the sub-daily temperature values.\nAggregating the responses using either the average or the sum, depending on the selected AgregationMethod (Average or Sum).\n\nThis approach is especially valuable in contexts where biological rates (e.g., enzymatic activity or stress responses) are non-linear with respect to temperature.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubDailyInterpolation"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubDailyInterpolation.html#inputs",
    "href": "docs/Models/Functions/SubDailyInterpolation.html#inputs",
    "title": "SubDailyInterpolation",
    "section": "Inputs",
    "text": "Inputs\nThe following inputs are required for SubDailyInterpolation to operate:\n\nMetData: A model implementing IWeather, typically the Weather module, which supplies daily Tmin and Tmax.\nInterpolationMethod: A child model that implements IInterpolationMethod and provides sub-daily temperature estimates (e.g., HourlySinPpAdjusted or ThreeHourAirTemperature).\nResponse: A child model implementing IIndexedFunction, which calculates a biological or physical response for each sub-daily temperature.\nagregationMethod: A user-configurable enum determining whether the output is the Average or the Sum of the sub-daily responses.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubDailyInterpolation"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubDailyInterpolation.html#methodology",
    "href": "docs/Models/Functions/SubDailyInterpolation.html#methodology",
    "title": "SubDailyInterpolation",
    "section": "Methodology",
    "text": "Methodology\nThe function operates in two stages each day:\n\nInterpolation of Sub-daily Temperatures\nThe selected InterpolationMethod model returns a list of sub-daily temperatures:\n\\[\nT_1, T_2, \\dots, T_n\n\\]\nApplication of Temperature Response Function\nThe response function \\(f(T)\\) is applied to each temperature:\n\\[\nR_i = f(T_i) \\quad \\text{for } i = 1 \\dots n\n\\]\nAggregation\nDepending on the selected agregationMethod, the result is:\n\n\n\nAverage: \\[\nR = \\frac{1}{n} \\sum_{i=1}^n R_i\n\\]\nSum: \\[\nR = \\sum_{i=1}^n R_i\n\\]\n\nThe result \\(R\\) becomes the output of the SubDailyInterpolation function for that day.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubDailyInterpolation"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubDailyInterpolation.html#events",
    "href": "docs/Models/Functions/SubDailyInterpolation.html#events",
    "title": "SubDailyInterpolation",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\n\n\nEvent\nPurpose\n\n\n\n\nDoDailyInitialisation\nTriggers the interpolation and response function application each day.\n\n\n\nEvents Raised To\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubDailyInterpolation"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubDailyInterpolation.html#properties",
    "href": "docs/Models/Functions/SubDailyInterpolation.html#properties",
    "title": "SubDailyInterpolation",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nagregationMethod\nenum (Average, Sum)\nMethod used to aggregate sub-daily response values.\n\n\n\nRead-Only Reportable Properties\n\nNo read-only properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubDailyInterpolation"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubDailyInterpolation.html#user-interface",
    "href": "docs/Models/Functions/SubDailyInterpolation.html#user-interface",
    "title": "SubDailyInterpolation",
    "section": "User Interface",
    "text": "User Interface\nSubDailyInterpolation can be added as a child of a function node in the model tree (e.g., [Phenology]).\nRight-click the parent node, select “Add Model…”, and search for SubDailyInterpolation in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubDailyInterpolation"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubDailyInterpolation.html#practical-example",
    "href": "docs/Models/Functions/SubDailyInterpolation.html#practical-example",
    "title": "SubDailyInterpolation",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is provided for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubDailyInterpolation"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubDailyInterpolation.html#see-also",
    "href": "docs/Models/Functions/SubDailyInterpolation.html#see-also",
    "title": "SubDailyInterpolation",
    "section": "See Also",
    "text": "See Also\n\nSource code: SubDailyInterpolation.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubDailyInterpolation"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookupValue.html",
    "href": "docs/Models/Functions/PhaseLookupValue.html",
    "title": "PhaseLookupValue",
    "section": "",
    "text": "PhaseLookupValue defines a value or function that applies only within a specified phase range in a crop’s development. It is used as a child of PhaseLookup to provide values that change according to phenological stages.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookupValue"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookupValue.html#overview",
    "href": "docs/Models/Functions/PhaseLookupValue.html#overview",
    "title": "PhaseLookupValue",
    "section": "Overview",
    "text": "Overview\nThis function enables conditional logic based on crop development stage. When the crop is between two specified stages—such as Emergence to FloralInitiation—PhaseLookupValue activates and returns the value of its child function. Outside this phase range, the function returns zero.\nIn APSIM NG, PhaseLookupValue is typically used under PhaseLookup to define phase-specific values for key processes like growth rates, stress responses, or developmental signals.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookupValue"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookupValue.html#inputs",
    "href": "docs/Models/Functions/PhaseLookupValue.html#inputs",
    "title": "PhaseLookupValue",
    "section": "Inputs",
    "text": "Inputs\n\nStart: The name of the crop stage where this value becomes active.\nEnd: The name of the crop stage where this value becomes inactive.\nChild function: The first child model (e.g., constant, multiplier) providing the value when active. If multiple children are present, only the first is used.\nPhenology: The current phenological state of the crop (linked internally).",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookupValue"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookupValue.html#methodology",
    "href": "docs/Models/Functions/PhaseLookupValue.html#methodology",
    "title": "PhaseLookupValue",
    "section": "Methodology",
    "text": "Methodology\nWhen simulation begins, PhaseLookupValue maps the Start and End crop stage names to internal indices.\nEach day during the simulation:\n\nIt checks whether the current crop stage falls between the defined start and end stages.\nIf yes, it evaluates the first child function and returns that value.\nIf no, it returns 0.0.\n\nMathematically:\n\\[\n\\text{Value} =\n\\begin{cases}\n\\text{ChildFunction}(), & \\text{if in phase} \\\\\n0, & \\text{otherwise}\n\\end{cases}\n\\]\nThis allows you to define rules or responses that are only active during specific crop phases.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookupValue"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookupValue.html#events",
    "href": "docs/Models/Functions/PhaseLookupValue.html#events",
    "title": "PhaseLookupValue",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\n\n\n\n\n\n\nEvent\nPurpose\n\n\n\n\nCommencing\nConvert stage names to internal indices at the beginning of simulation\n\n\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookupValue"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookupValue.html#properties",
    "href": "docs/Models/Functions/PhaseLookupValue.html#properties",
    "title": "PhaseLookupValue",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\nProperty\nType\nDescription\n\n\n\n\nStart\nstring\nName of the stage when activation begins\n\n\nEnd\nstring\nName of the stage when activation ends\n\n\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nInPhase\nboolean\ntrue if current crop stage is within range",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookupValue"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookupValue.html#user-interface",
    "href": "docs/Models/Functions/PhaseLookupValue.html#user-interface",
    "title": "PhaseLookupValue",
    "section": "User Interface",
    "text": "User Interface\nPhaseLookupValue is used as a child of a PhaseLookup node. To use it:\n\nRight-click on the PhaseLookup in the model tree.\nSelect “Add Model…”.\nChoose “PhaseLookupValue”.\nSet Start and End crop stages, and add a child function such as Constant or MultiplyFunction.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookupValue"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookupValue.html#practical-example",
    "href": "docs/Models/Functions/PhaseLookupValue.html#practical-example",
    "title": "PhaseLookupValue",
    "section": "Practical Example",
    "text": "Practical Example\nSuppose you want to return a value of 1.0 during the vegetative phase and 0.5 during grain filling:\n\nFirst PhaseLookupValue:\n\nStart = “Emergence”, End = “FloralInitiation”\n\nChild = Constant (1.0)\n\nSecond PhaseLookupValue:\n\nStart = “FloralInitiation”, End = “Maturity”\n\nChild = Constant (0.5)\n\n\nTogether, under a parent PhaseLookup, these values define different behavior for the crop across development.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookupValue"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookupValue.html#see-also",
    "href": "docs/Models/Functions/PhaseLookupValue.html#see-also",
    "title": "PhaseLookupValue",
    "section": "See Also",
    "text": "See Also\n\nSource code: PhaseLookupValue.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookupValue"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MultiplyFunction.html",
    "href": "docs/Models/Functions/MultiplyFunction.html",
    "title": "MultiplyFunction",
    "section": "",
    "text": "The MultiplyFunction is a utility function that returns the product of values from all of its child functions.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MultiplyFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MultiplyFunction.html#overview",
    "href": "docs/Models/Functions/MultiplyFunction.html#overview",
    "title": "MultiplyFunction",
    "section": "Overview",
    "text": "Overview\nThe MultiplyFunction is used to multiply multiple values for a mathematical equation. It calculates the product values of all children functions and returns the total product. This is useful when you need to combine multiple traits or parameters into a single value for further calculations in plant growth models.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MultiplyFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MultiplyFunction.html#events",
    "href": "docs/Models/Functions/MultiplyFunction.html#events",
    "title": "MultiplyFunction",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened for by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MultiplyFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MultiplyFunction.html#properties",
    "href": "docs/Models/Functions/MultiplyFunction.html#properties",
    "title": "MultiplyFunction",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\nNo read-only reportable properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MultiplyFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MultiplyFunction.html#user-interface",
    "href": "docs/Models/Functions/MultiplyFunction.html#user-interface",
    "title": "MultiplyFunction",
    "section": "User Interface",
    "text": "User Interface\nMultiplyFunction can be added into the model tree by right-clicking on a parent node and selecting “Add Model…”, and then search MultiplyFunction in the Filter Box. A symbol for the MultiplyFunction is displayed in the user interface to represent the function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MultiplyFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MultiplyFunction.html#practical-example",
    "href": "docs/Models/Functions/MultiplyFunction.html#practical-example",
    "title": "MultiplyFunction",
    "section": "Practical Example",
    "text": "Practical Example\nThe target thermal time from germination to emergence in the wheat model is determined by ShootLag (\\(ShootLag\\)), Sowing Depth (\\(SowingDepth\\)), and Shoot Rate (\\(ShootRate\\)).\n\\[\nTT = ShootLag + (SowingDepth \\times ShootRate)\n\\]\nThe MultiplyFunction is used to multiply these two values to get the total target thermal time in the equation above.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MultiplyFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MultiplyFunction.html#see-also",
    "href": "docs/Models/Functions/MultiplyFunction.html#see-also",
    "title": "MultiplyFunction",
    "section": "See Also",
    "text": "See Also\n\nSource code: MultiplyFunction.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MultiplyFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MaximumFunction.html",
    "href": "docs/Models/Functions/MaximumFunction.html",
    "title": "MaximumFunction",
    "section": "",
    "text": "The MaximumFunction is a utility function that returns the maximum value from all of its child functions.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MaximumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MaximumFunction.html#overview",
    "href": "docs/Models/Functions/MaximumFunction.html#overview",
    "title": "MaximumFunction",
    "section": "Overview",
    "text": "Overview\nThe MaximumFunction is used to determine the largest value among multiple child functions. It evaluates each child and returns the maximum result. This is useful when you need to select the most permissive factor or the highest value among several parameters in plant or soil models.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MaximumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MaximumFunction.html#events",
    "href": "docs/Models/Functions/MaximumFunction.html#events",
    "title": "MaximumFunction",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened for by this function.\n\nEvents Raised\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MaximumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MaximumFunction.html#properties",
    "href": "docs/Models/Functions/MaximumFunction.html#properties",
    "title": "MaximumFunction",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\nNo read-only reportable properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MaximumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MaximumFunction.html#user-interface",
    "href": "docs/Models/Functions/MaximumFunction.html#user-interface",
    "title": "MaximumFunction",
    "section": "User Interface",
    "text": "User Interface\nMaximumFunction can be added into the model tree by right-clicking on a parent node and selecting “Add Model…”, then searching for MaximumFunction in the Filter Box. A symbol for the MaximumFunction is displayed in the user interface to represent the function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MaximumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MaximumFunction.html#practical-example",
    "href": "docs/Models/Functions/MaximumFunction.html#practical-example",
    "title": "MaximumFunction",
    "section": "Practical Example",
    "text": "Practical Example\nSuppose you want to determine the maximum soil water available from several soil layers, or the most permissive nutrient for plant growth. You can use the MaximumFunction to select the highest value among all relevant child functions.\nFor example, if you have three child functions representing different constraints:\n\\[\nPermissiveFactor = \\max(Value_1, Value_2, Value_3)\n\\]\nThe MaximumFunction will return the largest of these values.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MaximumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MaximumFunction.html#see-also",
    "href": "docs/Models/Functions/MaximumFunction.html#see-also",
    "title": "MaximumFunction",
    "section": "See Also",
    "text": "See Also\n\nSource code: MaximumFunction.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MaximumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DivideFunction.html",
    "href": "docs/Models/Functions/DivideFunction.html",
    "title": "DivideFunction",
    "section": "",
    "text": "The DivideFunction is a utility function that divides the value of its first child (the numerator) by the product of its subsequent children (the denominators).",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DivideFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DivideFunction.html#overview",
    "href": "docs/Models/Functions/DivideFunction.html#overview",
    "title": "DivideFunction",
    "section": "Overview",
    "text": "Overview\nThe DivideFunction divides the value of the first child function by the product of all subsequent child functions (i.e. It starts from the first child function, recursively divide by the values of the subsequent child functions). If the numerator is zero, the function returns zero. If any denominator is zero, the function returns double.MaxValue (close to 1.8 × 10^308). This is useful for safely performing division operations in plant growth models, such as calculating ratios or efficiencies, while avoiding division-by-zero errors.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DivideFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DivideFunction.html#events",
    "href": "docs/Models/Functions/DivideFunction.html#events",
    "title": "DivideFunction",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened for by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DivideFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DivideFunction.html#properties",
    "href": "docs/Models/Functions/DivideFunction.html#properties",
    "title": "DivideFunction",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\nNo read-only reportable properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DivideFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DivideFunction.html#user-interface",
    "href": "docs/Models/Functions/DivideFunction.html#user-interface",
    "title": "DivideFunction",
    "section": "User Interface",
    "text": "User Interface\nDivideFunction can be added into the model tree by right-clicking on a parent node and selecting “Add Model…”, then searching for DivideFunction in the Filter Box. A symbol for the DivideFunction is displayed in the user interface to represent the function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DivideFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DivideFunction.html#practical-example",
    "href": "docs/Models/Functions/DivideFunction.html#practical-example",
    "title": "DivideFunction",
    "section": "Practical Example",
    "text": "Practical Example\nSuppose you want to calculate the water use efficiency (WUE) of a crop, which is the ratio of yield to water used:\n\\[\nWUE = \\frac{Yield}{WaterUsed}\n\\]\nThe DivideFunction can be used to divide the Yield by WaterUsed. If WaterUsed is zero, the function will return double.MaxValue to indicate an undefined or infinite result.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DivideFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DivideFunction.html#see-also",
    "href": "docs/Models/Functions/DivideFunction.html#see-also",
    "title": "DivideFunction",
    "section": "See Also",
    "text": "See Also\n\nSource code: DivideFunction.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DivideFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/Constant.html",
    "href": "docs/Models/Functions/Constant.html",
    "title": "Constant",
    "section": "",
    "text": "The Constant function returns a fixed value throughout the simulation. It is often used to supply a constant input (e.g., temperature threshold, fixed growth rate, photoperiod sensitivity) to other models in APSIM Next Gen.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Constant"
    ]
  },
  {
    "objectID": "docs/Models/Functions/Constant.html#overview",
    "href": "docs/Models/Functions/Constant.html#overview",
    "title": "Constant",
    "section": "Overview",
    "text": "Overview\nThis function provides a simple way to input a value that does not change over time. It can be added wherever a numerical input is required and does not depend on environmental conditions, crop stage, or other simulation variables.\nIn APSIM NG, Constant is widely used as a basic building block within more complex functions, or to define cultivar-specific constants (e.g., base temperature = 0 °C, leaf width = 10 mm).",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Constant"
    ]
  },
  {
    "objectID": "docs/Models/Functions/Constant.html#inputs",
    "href": "docs/Models/Functions/Constant.html#inputs",
    "title": "Constant",
    "section": "Inputs",
    "text": "Inputs\n\nFixedValue: The constant numerical value returned.\nUnits (optional): The units associated with the value (e.g., °C, mm/day).",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Constant"
    ]
  },
  {
    "objectID": "docs/Models/Functions/Constant.html#methodology",
    "href": "docs/Models/Functions/Constant.html#methodology",
    "title": "Constant",
    "section": "Methodology",
    "text": "Methodology\nThis function always returns the same value, specified by the user in the FixedValue property. It does not depend on any conditions or crop stages.\nMathematically: \\[\n\\text{Value} = \\text{FixedValue}\n\\]\nIt implements the IFunction interface, making it compatible with any APSIM component that accepts functions as inputs.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Constant"
    ]
  },
  {
    "objectID": "docs/Models/Functions/Constant.html#events",
    "href": "docs/Models/Functions/Constant.html#events",
    "title": "Constant",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Constant"
    ]
  },
  {
    "objectID": "docs/Models/Functions/Constant.html#properties",
    "href": "docs/Models/Functions/Constant.html#properties",
    "title": "Constant",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\nProperty\nType\nDescription\n\n\n\n\nFixedValue\ndouble\nThe constant value to return\n\n\nUnits\nstring\nOptional units associated with the value\n\n\n\nRead-Only Reportable Properties\n\nNo read-only properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Constant"
    ]
  },
  {
    "objectID": "docs/Models/Functions/Constant.html#user-interface",
    "href": "docs/Models/Functions/Constant.html#user-interface",
    "title": "Constant",
    "section": "User Interface",
    "text": "User Interface\nConstant can be added as a child of any function-based node (e.g., PhaseLookupValue, MultiplyFunction, AddFunction) in the model tree. To use:\n\nRight-click the parent node.\nSelect “Add Model…”.\nSearch for “Constant” and select it.\nEnter the desired numeric value and optional units.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Constant"
    ]
  },
  {
    "objectID": "docs/Models/Functions/Constant.html#practical-example",
    "href": "docs/Models/Functions/Constant.html#practical-example",
    "title": "Constant",
    "section": "Practical Example",
    "text": "Practical Example\nTo define a base temperature of 0 °C used in a thermal time calculation:\n\nAdd a Constant function under a ThermalTime node.\nSet FixedValue to 0.0\nSet Units to °C\n\nThis constant will now serve as the threshold temperature in the growing degree-day calculation.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Constant"
    ]
  },
  {
    "objectID": "docs/Models/Functions/Constant.html#see-also",
    "href": "docs/Models/Functions/Constant.html#see-also",
    "title": "Constant",
    "section": "See Also",
    "text": "See Also\n\nSource code: Constant.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Constant"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AccumulateFunction.html",
    "href": "docs/Models/Functions/AccumulateFunction.html",
    "title": "AccumulateFunction",
    "section": "",
    "text": "AccumulateFunction collects the output of one or more child functions between defined growth stages of a crop. It is commonly used to sum variables like thermal time, biomass, or nutrient supply during a crop phase (e.g., between emergence and flowering). It supports resetting and adjusting the accumulated value based on crop events like harvest, cut, or graze.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AccumulateFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AccumulateFunction.html#overview",
    "href": "docs/Models/Functions/AccumulateFunction.html#overview",
    "title": "AccumulateFunction",
    "section": "Overview",
    "text": "Overview\nThis function is used to accumulate values from one or more child functions across a specific range of crop development stages. It is particularly useful for tracking the total input of a variable (e.g., thermal time or growth factor) over a defined period in the crop lifecycle.\nIn APSIM NG, this function fits within a crop model to monitor cumulative values that influence or indicate plant performance. The accumulation starts at a given phenological stage (e.g., Emergence) and stops at another (e.g., Flowering or FlagLeaf). AccumulateFunction can also respond to crop management events (e.g., grazing, cutting) by reducing its value.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AccumulateFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AccumulateFunction.html#inputs",
    "href": "docs/Models/Functions/AccumulateFunction.html#inputs",
    "title": "AccumulateFunction",
    "section": "Inputs",
    "text": "Inputs\n\nStartStageName (Required): The crop stage when accumulation starts (e.g., “Emergence”)\nEndStageName (Required): The crop stage when accumulation ends (e.g., “FlagLeafAppearance”)\nResetStageName (optional): A stage at which the accumulated value resets\nFractionRemovedOnCut (optional): Proportion of accumulated value removed when the crop is cut\nFractionRemovedOnHarvest (optional): Proportion removed during harvest\nFractionRemovedOnGraze (optional): Proportion removed when grazed\nFractionRemovedOnPrune (optional): Proportion removed when pruned\nChild functions (required): One or more child functions whose values are summed daily",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AccumulateFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AccumulateFunction.html#methodology",
    "href": "docs/Models/Functions/AccumulateFunction.html#methodology",
    "title": "AccumulateFunction",
    "section": "Methodology",
    "text": "Methodology\nEach day after phenology estimation in Event PostPhenology, if the current crop development stage is between the start and end stage, the AccumulateFunction performs the following steps:\n\nEvaluate each child function to get its current value.\nSum the values of all child functions: \\[\n\\text{DailyIncrement} = \\sum_{i=1}^n \\text{ChildFunction}_i\n\\]\nAdd the daily increment to the running total: \\[\n\\text{AccumulatedValue}_{t} = \\text{AccumulatedValue}_{t-1} + \\text{DailyIncrement}\n\\]\n\nIf a stage is reached that matches ResetStageName in event PhaseChanged, the accumulated value is set to zero: \\[\n\\text{AccumulatedValue} = 0 \\quad \\text{when Stage = ResetStageName}\n\\]\nIf a following event,\n\nCutting\nPostHarvesting\nGrazing\nPruning\n\noccurs, the function reduces the accumulated value: \\[\n\\text{AccumulatedValue} = \\text{AccumulatedValue} \\times (1 - \\text{FractionRemoved})\n\\]\nThis allows realistic simulation of loss in growth or reserves due to agronomic practices.\nAt event PlantEnding, the accumulated value is reset to zero, indicating the end of the crop cycle:",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AccumulateFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AccumulateFunction.html#events",
    "href": "docs/Models/Functions/AccumulateFunction.html#events",
    "title": "AccumulateFunction",
    "section": "Events",
    "text": "Events\nEvents Listened For\nThese are signals or notifications that the function listens for from other parts of the simulation:\n\n\n\n\n\n\n\nEvent\nPurpose\n\n\n\n\nCommencing\nInitializes accumulation and determines start/end phase indices\n\n\nPostPhenology\nDaily update of accumulated value during the simulation\n\n\nPhaseChanged\nResets value if specified stage is reached\n\n\nCutting\nApplies FractionRemovedOnCut to reduce value\n\n\nPostHarvesting\nApplies FractionRemovedOnHarvest to reduce value\n\n\nGrazing\nApplies FractionRemovedOnGraze to reduce value\n\n\nPruning\nApplies FractionRemovedOnPrune to reduce value\n\n\nPlantEnding\nResets accumulated value at end of crop cycle\n\n\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AccumulateFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AccumulateFunction.html#properties",
    "href": "docs/Models/Functions/AccumulateFunction.html#properties",
    "title": "AccumulateFunction",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nStartStageName\nstring\nCrop stage name to begin accumulation\n\n\nEndStageName\nstring\nCrop stage name to end accumulation\n\n\nResetStageName\nstring\nCrop stage name to reset accumulation\n\n\nFractionRemovedOnCut\ndouble\nFraction of value to remove on cutting\n\n\nFractionRemovedOnHarvest\ndouble\nFraction of value to remove on harvesting\n\n\nFractionRemovedOnGraze\ndouble\nFraction of value to remove on grazing\n\n\nFractionRemovedOnPrune\ndouble\nFraction of value to remove on pruning\n\n\n\nRead-Only Reportable Properties\n\nNo read-only reportable properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AccumulateFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AccumulateFunction.html#user-interface",
    "href": "docs/Models/Functions/AccumulateFunction.html#user-interface",
    "title": "AccumulateFunction",
    "section": "User Interface",
    "text": "User Interface\nAccumulateFunction can be added into the model tree by right-clicking on a parent node and selecting “Add Model…”, and then search AccumulateFunction in the Filter Box. A symbol for the AccumulateFunction is displayed in the user interface to represent the function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AccumulateFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AccumulateFunction.html#practical-example",
    "href": "docs/Models/Functions/AccumulateFunction.html#practical-example",
    "title": "AccumulateFunction",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AccumulateFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AccumulateFunction.html#see-also",
    "href": "docs/Models/Functions/AccumulateFunction.html#see-also",
    "title": "AccumulateFunction",
    "section": "See Also",
    "text": "See Also\n\nSource code: AccumulateFunction.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AccumulateFunction"
    ]
  },
  {
    "objectID": "docs/Models/Clock.html",
    "href": "docs/Models/Clock.html",
    "title": "Clock",
    "section": "",
    "text": "The APSIM Clock is a central component of the APSIM simulation framework, responsible for managing the simulation time and orchestrating the sequence of events that occur during a simulation. It defines the start and end dates of the simulation and raises various events at specific times to allow different models to perform their calculations.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Clock"
    ]
  },
  {
    "objectID": "docs/Models/Clock.html#overview",
    "href": "docs/Models/Clock.html#overview",
    "title": "Clock",
    "section": "Overview",
    "text": "Overview\nThe Clock model defines the simulation’s start and end dates, controls the passage of time, and raises numerous events used to coordinate actions across models. It forms the central timing mechanism within the APSIM NG framework, driving the daily timestep loop.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Clock"
    ]
  },
  {
    "objectID": "docs/Models/Clock.html#inputs",
    "href": "docs/Models/Clock.html#inputs",
    "title": "Clock",
    "section": "Inputs",
    "text": "Inputs\n\nStart: The start date of the simulation with format YYYY-MM-DD (optional if weather data is available).\nEnd: The end date of the simulation with format YYYY-MM-DD (optional if weather data is available).\nWeather: If no explicit start/end dates are defined, the model will attempt to derive them from the associated weather model.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Clock"
    ]
  },
  {
    "objectID": "docs/Models/Clock.html#methodology",
    "href": "docs/Models/Clock.html#methodology",
    "title": "Clock",
    "section": "Methodology",
    "text": "Methodology\nIf Start or End are not defined, the model looks for a weather model in the scope and adopts its StartDate or EndDate. The simulation begins on the resolved start date and continues day by day until the end date. Each day, the Clock publishes multiple events to signal simulation actions across components. These include daily updates, management actions, soil processes, plant growth, CLEM processes, and reporting.\n\nDoInitialSummary – Initial summary at the start.\nStartOfSimulation – Marks the simulation’s beginning.\nFinalInitialise – Final initialisation before the first day.\nStartOfFirstDay – First day setup.\nFor each day (from StartDate to EndDate), the following events are raised in sequence (some only on specific days): DoCatchYesterday, DoWeather, DoDailyInitialisation, StartOfDay, StartOfMonth, StartOfYear, StartOfWeek, DoManagement, DoFertiliserApplications, DoPestDiseaseDamage, DoEnergyArbitration, DoSoilErosion, DoSoilWaterMovement, DoSoilTemperature, DoSolute, DoSurfaceOrganicMatterPotentialDecomposition, DoSoilOrganicMatter, DoSurfaceOrganicMatterDecomposition, DoUpdateWaterDemand, DoDCAPST, DoWaterArbitration, PrePhenology, DoPhenology, DoPotentialPlantGrowth, DoPotentialPlantPartioning, DoPastureWater, DoNutrientArbitration, DoActualPlantPartioning, DoActualPlantGrowth, PartitioningComplete, DoStock, DoLifecycle, DoUpdate, DoManagementCalculations, DoEndPasture, DoReportCalculations, EndOfWeek, EndOfYear, EndOfMonth, EndOfDay, DoReport.\nAfter the last day, EndOfSimulation is raised.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Clock"
    ]
  },
  {
    "objectID": "docs/Models/Clock.html#events",
    "href": "docs/Models/Clock.html#events",
    "title": "Clock",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\n\n\nEvent\nPurpose\n\n\n\n\nCommencing\nSet Today as StartDate\n\n\nOnDoCommence\nThe main function to run a simulation to trigger major loop\n\n\n\nEvents Raised To\n\n\n\nEvent\nPurpose\n\n\n\n\nStartOfSimulation\nOccurs once at the start of the simulation\n\n\nStartOfFirstDay\nOccurs once at the start of the first day of the simulation\n\n\nStartOfDay\nOccurs at start of each day\n\n\nStartOfMonth\nOccurs at start of each month\n\n\nStartOfYear\nOccurs at start of each year\n\n\nStartOfWeek\nOccurs at start of each week\n\n\nEndOfDay\nOccurs at end of each day\n\n\nEndOfMonth\nOccurs at end of each month\n\n\nEndOfYear\nOccurs at end of each year\n\n\nEndOfWeek\nOccurs at end of each week\n\n\nEndOfSimulation\nOccurs at end of simulation\n\n\nFinalInitialise\nFinal Initialise event. Occurs once at start of simulation\n\n\nDoCatchYesterday\nOccurs first each day to allow yesterdays values to be caught\n\n\nDoWeather\nOccurs each day to calculate weather\n\n\nDoDailyInitialisation\nOccurs each day to do daily updates to models\n\n\nDoInitialSummary\nOccurs each day to make the initial summary\n\n\nDoManagement\nOccurs each day to do management actions and changes\n\n\nDoFertiliserApplications\nInvoked to perform all fertiliser applications\n\n\nDoPestDiseaseDamage\nOccurs to do Pest/Disease actions\n\n\nDoEnergyArbitration\nOccurs when the canopy energy balance needs to be calculated with MicroClimate\n\n\nDoSoilWaterMovement\nOccurs each day to do water calculations such as irrigation, swim, water balance etc\n\n\nDoSoilErosion\nOccurs to tell soil erosion to perform its calculations\n\n\nDoSoilTemperature\nOccurs to perform soil temperature calculations to do solute processes\n\n\nDoSolute\nOccurs each day\n\n\nDoSurfaceOrganicMatterPotentialDecomposition\nOccurs each day to perform daily calculations of organic soil matter\n\n\nDoSoilOrganicMatter\nOccurs each day to perform daily calculations of organic soil matter\n\n\nDoSurfaceOrganicMatterDecomposition\nOccurs each day to do the daily residue decomposition\n\n\nDoUpdateWaterDemand\nOccurs each day to do daily growth increment of total plant biomass\n\n\nDoWaterArbitration\nOccurs each day to do water arbitration\n\n\nDoPastureWater\nInitiates water calculations for the Pasture model\n\n\nPrePhenology\nOccurs between DoWaterArbitration and DoPhenology. Performs sorghum final leaf no calcs\n\n\nDoPhenology\nOccurs each day to perform phenology\n\n\nDoPotentialPlantGrowth\nOccurs each day to do potential growth\n\n\nDoPotentialPlantPartioning\nOccurs each day to do the water limited dm allocations. Water constraints to growth are accounted for in the calculation of DM supply and does initial N calculations to work out how much N uptake is required to pass to SoilArbitrator\n\n\nDoNutrientArbitration\nOccurs each day to do nutrient arbitration\n\n\nDoActualPlantPartioning\nOccurs each day to do nutrient allocations\n\n\nDoActualPlantGrowth\nOccurs each day to do nutrient allocations. Pasture growth\n\n\nPartitioningComplete\nOccurs each day to finish partitioning\n\n\nDoUpdate\nOccurs near end of each day to do checks and finalising\n\n\nDoStock\nOccurs each day to process stock methods in GrazPlan Stock\n\n\nDoLifecycle\nOccurs each day to process a Pest and Disease lifecycle object\n\n\nDoManagementCalculations\nOccurs each day after the simulation is done. Does management calculations\n\n\nDoEndPasture\nOccurs after pasture growth and sends material to SOM\n\n\nDoReportCalculations\nOccurs when do report calculations\n\n\nDoReport\nOccurs at end of each day\n\n\nDoDCAPST\nOccurs each day when dcaps performs its calculations. This must happen between DoPotentialPlantGrowth and DoPotentialPlantPartitioning\n\n\nCLEMInitialiseResource\nCLEM initialise Resources occurs once at start of simulation\n\n\nCLEMInitialiseActivity\nCLEM initialise Activity occurs once at start of simulation\n\n\nCLEMValidate\nCLEM validate all data entry\n\n\nCLEMStartOfTimeStep\nCLEM start of timestep event\n\n\nCLEMUpdateLabourAvailability\nCLEM set labour availability after start of timestep and financial considerations\n\n\nCLEMUpdatePasture\nCLEM update pasture\n\n\nCLEMDetachPasture\nCLEM detach pasture\n\n\nCLEMPastureReady\nCLEM pasture has been added and is ready for use\n\n\nCLEMDoCutAndCarry\nCLEM cut and carry\n\n\nCLEMAnimalBreeding\nCLEM Do Animal (Ruminant and Other) Breeding and milk calculations\n\n\nCLEMPotentialIntake\nGet potential intake. This includes suckling milk consumption\n\n\nCLEMCalculateManure\nRequest and allocate resources to all Activities based on UI Tree order of priority. Some activities will obtain resources here and perform actions later\n\n\nCLEMCollectManure\nRequest and allocate resources to all Activities based on UI Tree order of priority. Some activities will obtain resources here and perform actions later\n\n\nCLEMGetResourcesRequired\nRequest and perform the collection of manure after resources are allocated and manure produced in time-step\n\n\nCLEMAnimalMilkProduction\nCLEM Calculate Animals (Ruminant and Other) milk production\n\n\nCLEMAnimalWeightGain\nCLEM Calculate Animals(Ruminant and Other) weight gain\n\n\nCLEMAnimalDeath\nCLEM Do Animal (Ruminant and Other) death\n\n\nCLEMAnimalMilking\nCLEM Do Animal (Ruminant and Other) milking\n\n\nCLEMCalculateEcologicalState\nCLEM Calculate ecological state after all deaths and before management\n\n\nCLEMAnimalMark\nCLEM Do animal marking so complete before undertaking management decisions\n\n\nCLEMAnimalManage\nCLEM Do Animal (Ruminant and Other) Herd Management (adjust breeders and sires etc.)\n\n\nCLEMAnimalStock\nCLEM stock animals to pasture availability or other metrics\n\n\nCLEMAnimalSell\nCLEM sell animals to market including transporting and labour\n\n\nCLEMAnimalBuy\nCLEM buy animals including transporting and labour\n\n\nCLEMAgeResources\nCLEM Age your resources (eg. Decompose Fodder, Age your labour, Age your Animals)\n\n\nCLEMHerdSummary\nCLEM event to calculate monthly herd summary\n\n\nCLEMFinalizeTimeStep\nCLEM finalize time-step before end\n\n\nCLEMEndOfTimeStep\nCLEM end of timestep event",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Clock"
    ]
  },
  {
    "objectID": "docs/Models/Clock.html#properties",
    "href": "docs/Models/Clock.html#properties",
    "title": "Clock",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n|————–|———–|————————————————-| | Start | DateTime? | Start date of the simulation with format YYYY-MM-DD | | End | DateTime? | End date of the simulation with format YYYY-MM-DD |\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nStartDate\nDateTime\nDerived start date\n\n\nEndDate\nDateTime\nDerived end date\n\n\nToday\nDateTime\nCurrent simulation date\n\n\nFractionComplete\ndouble\nFraction of the simulation completed\n\n\nIsStartMonth\nbool\nWhether today is the first of the month\n\n\nIsStartYear\nbool\nWhether today is the first day of the year\n\n\nIsEndMonth\nbool\nWhether today is the last day of the month\n\n\nIsEndYear\nbool\nWhether today is the last day of the year",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Clock"
    ]
  },
  {
    "objectID": "docs/Models/Clock.html#user-interface",
    "href": "docs/Models/Clock.html#user-interface",
    "title": "Clock",
    "section": "User Interface",
    "text": "User Interface\nClock can be added as a child of a Simulation node in the model tree. Right-click the simulation node, select “Add Model…”, and search for Clock in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Clock"
    ]
  },
  {
    "objectID": "docs/Models/Clock.html#practical-example",
    "href": "docs/Models/Clock.html#practical-example",
    "title": "Clock",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is provided for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Clock"
    ]
  },
  {
    "objectID": "docs/Models/Clock.html#see-also",
    "href": "docs/Models/Clock.html#see-also",
    "title": "Clock",
    "section": "See Also",
    "text": "See Also\n\nSource code: Clock.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Clock"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/index.html",
    "href": "docs/Crops/Wheat/index.html",
    "title": "Wheat",
    "section": "",
    "text": "The APSIM Wheat model is constructed using the Plant Modelling Framework (PMF) (Brown et al. 2014) by Brown, H.E., Huth, N.I. and Holzworth, D.P., which offers a modular library of plant organ and process submodels. This design allows for dynamic assembly of complex crop models, such as wheat, by integrating components like photosynthesis and leaf development without additional coding.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/index.html#phenology",
    "href": "docs/Crops/Wheat/index.html#phenology",
    "title": "Wheat",
    "section": "Phenology",
    "text": "Phenology\nThe wheat phenology is simulated from sowing to harvest.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/index.html#grain",
    "href": "docs/Crops/Wheat/index.html#grain",
    "title": "Wheat",
    "section": "Grain",
    "text": "Grain\nThe wheat grain is only for parts for economic yield without Spike.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/index.html#traits",
    "href": "docs/Crops/Wheat/index.html#traits",
    "title": "Wheat",
    "section": "Traits",
    "text": "Traits\nSome Traits are described in multiple components, which are summaried in the Traits section.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/index.html#see-also",
    "href": "docs/Crops/Wheat/index.html#see-also",
    "title": "Wheat",
    "section": "See Also",
    "text": "See Also\n\nOnline Resource File",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/grain/NitrogenDemand.html",
    "href": "docs/Crops/Wheat/grain/NitrogenDemand.html",
    "title": "Grain Nitrogen Filling Rate or Nitrogen Demand (Wheat)",
    "section": "",
    "text": "The wheat nitrogen filling rate or nitrogen demand of grain is calculated during the grain filling period, specifically between the phenological stages of Anthesis and EndGrainFill. During this period, grain is the only organ that requires nitrogen for development as other organs (e.g., leaves, stems and roots) have already completed their growth and are not actively accumulating nitrogen for grain development.\nWheat grain nitrogen demand is only for structural nitrogen, which is not the same as other organs including metabolic and storage nitrogen (e.g., leaves, stems, and roots).",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Grain",
      "Grain Nitrogen Filling Rate or Nitrogen Demand (Wheat)"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/grain/NitrogenDemand.html#overview",
    "href": "docs/Crops/Wheat/grain/NitrogenDemand.html#overview",
    "title": "Grain Nitrogen Filling Rate or Nitrogen Demand (Wheat)",
    "section": "Overview",
    "text": "Overview\nThe demand is defined by a PhaseLookup function (NFillingRate):\n\nBefore Anthesis (Sowing to Anthesis) as zero for no grain nitrogen demand as no grain development occurs.\nDuring Grain Filling (Anthesis → EndGrainFill):\n\n\\[\n\\text{N demand} = \\frac{N_\\text{kernel}}{D_\\text{filling}} \\times \\text{ThermalTime} \\times \\text{GrainNumber}\n\\]\nWhere:\n\n\n\n\n\n\n\nTerm\nDescription\n\n\n\n\n\\(N_\\text{kernel}\\)\nPotential nitrogen per kernel (default = 0.0011 g/kernel)\n\n\n\\(D_\\text{filling}\\)\nGrain filling duration from anthesis to end of filling (°Cd) = GrainExpanding.Target + GrainFilling.Target\n\n\nThermalTime\nDaily thermal time (°Cd), from [Phenology].ThermalTime\n\n\nGrainNumber\nNumber of kernels, from [Grain].NumberFunction\n\n\n\nThe equation above is used because it distributes the total potential nitrogen content per kernel evenly across the grain filling period, scaled by the daily thermal time and the number of grains. This approach ensures that nitrogen demand reflects both the developmental stage (timed by thermal accumulation) and the actual sink size (number of kernels), providing a biologically realistic and process-driven estimate of daily grain nitrogen requirements.\nA linear nitrogen filling rate is assumed, meaning that the demand increases uniformly from anthesis to the end of grain filling. This is a simplification but is commonly used in crop models to represent nitrogen uptake during grain development.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Grain",
      "Grain Nitrogen Filling Rate or Nitrogen Demand (Wheat)"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/grain/NitrogenDemand.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/grain/NitrogenDemand.html#cultivar-specific-parameters",
    "title": "Grain Nitrogen Filling Rate or Nitrogen Demand (Wheat)",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Grain].NFillingRate.GrainGrowthPhase.Demand.Rate.PotentialKernalN.FixedValue\nPotential nitrogen per kernel (g/kernel)\n0.0011",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Grain",
      "Grain Nitrogen Filling Rate or Nitrogen Demand (Wheat)"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/grain/NitrogenDemand.html#practical-example",
    "href": "docs/Crops/Wheat/grain/NitrogenDemand.html#practical-example",
    "title": "Grain Nitrogen Filling Rate or Nitrogen Demand (Wheat)",
    "section": "Practical Example",
    "text": "Practical Example\nSuppose:\n\nNitrogen per kernel (\\(N_\\text{kernel}\\)) = 0.0011 g/kernel\nGrain filling duration (\\(D_\\text{filling}\\)) = 120 + 545 = 665 °Cd\nDaily thermal time (ThermalTime) = 20 °Cd\nNumber of kernels (GrainNumber) = 18,000 per m² (typical range: 15,000–22,000 per m²)\n\nPlug into the formula:\n\\[\n\\text{N demand} = \\frac{0.0011}{665} \\times 20 \\times 18000 = 0.5955 \\text{ g N/day}\n\\]\nSo, the daily nitrogen demand for grain is 0.5955 g N/day under these conditions.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Grain",
      "Grain Nitrogen Filling Rate or Nitrogen Demand (Wheat)"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/grain/NitrogenDemand.html#references",
    "href": "docs/Crops/Wheat/grain/NitrogenDemand.html#references",
    "title": "Grain Nitrogen Filling Rate or Nitrogen Demand (Wheat)",
    "section": "References",
    "text": "References\n\nAPSIM NG Documentation\nAPSIM Next Gen Wheat Model",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Grain",
      "Grain Nitrogen Filling Rate or Nitrogen Demand (Wheat)"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Traits/co2-wheat.html",
    "href": "docs/Crops/Wheat/Traits/co2-wheat.html",
    "title": "CO2 for Wheat",
    "section": "",
    "text": "For C3 plants (like wheat), Radiation Use Efficiency is scaled by the \\(CO_{\\text{2}}\\) factor which is calculated by a function of environmental \\(CO_{\\text{2}}\\) concentration (\\(C\\), ppm) and daily mean temperature (\\(T_{mean}\\)) as published by (Reyenga et al. 1999).\n\\[\nf_{c}=\\frac{(C-C_{i})(350+2C_{i})}{(C+2C_{i})(350-C_{i})}\n\\]\nwhere \\(C_{i}\\) is the temperature dependent \\(CO_{\\text{2}}\\) compensation point (ppm) and is derived from the following function.\n\\[\nC_{i}=\\frac{163-T_{mean}}{5-0.1T_{mean}}\n\\]\n\n\n\nCO2 factor of Radiation Use Efficiency in response to the CO2 level (C) for different daily mean air temperatures.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Traits",
      "CO2 for Wheat"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Traits/co2-wheat.html#radiation-use-efficiency",
    "href": "docs/Crops/Wheat/Traits/co2-wheat.html#radiation-use-efficiency",
    "title": "CO2 for Wheat",
    "section": "",
    "text": "For C3 plants (like wheat), Radiation Use Efficiency is scaled by the \\(CO_{\\text{2}}\\) factor which is calculated by a function of environmental \\(CO_{\\text{2}}\\) concentration (\\(C\\), ppm) and daily mean temperature (\\(T_{mean}\\)) as published by (Reyenga et al. 1999).\n\\[\nf_{c}=\\frac{(C-C_{i})(350+2C_{i})}{(C+2C_{i})(350-C_{i})}\n\\]\nwhere \\(C_{i}\\) is the temperature dependent \\(CO_{\\text{2}}\\) compensation point (ppm) and is derived from the following function.\n\\[\nC_{i}=\\frac{163-T_{mean}}{5-0.1T_{mean}}\n\\]\n\n\n\nCO2 factor of Radiation Use Efficiency in response to the CO2 level (C) for different daily mean air temperatures.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Traits",
      "CO2 for Wheat"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Traits/co2-wheat.html#stomatal-conductance",
    "href": "docs/Crops/Wheat/Traits/co2-wheat.html#stomatal-conductance",
    "title": "CO2 for Wheat",
    "section": "Stomatal Conductance",
    "text": "Stomatal Conductance\nThe APSIM model considers a reduction in Stomatal Conductance with increasing CO2 levels and its interaction with enhanced RUE|CO2 for RUE of C3. The Stomatal Conductance reduction is likely to reduce water loss but maintain photosynthesis due to higher water potential and internal CO2 levels, resulting in an increased transpiration efficiency (Reyenga et al. 1999). The response Stomatal Conductance of to increased CO2 concentration is calculated as follows (Elli et al. 2020).\n\\[\nSC = f_{c} / (\\frac {CO2 - C_{i}} {350 - C_{i}})\n\\]\nwhere \\[C_{i}\\] temperature-dependent CO2 compensation point, which is calculated by:\n\\[\nC_{i}=\\frac{163-T_{mean}}{5-0.1T_{mean}}\n\\]",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Traits",
      "CO2 for Wheat"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Traits/co2-wheat.html#critical-nitrogen-concentration",
    "href": "docs/Crops/Wheat/Traits/co2-wheat.html#critical-nitrogen-concentration",
    "title": "CO2 for Wheat",
    "section": "Critical Nitrogen Concentration",
    "text": "Critical Nitrogen Concentration\nIn APSIM NG, the Critical Nitrogen Concentration in Leaf is modified by CO,,2,, concentration.\n\n\n\nCritical Nitrogen Concentration in Leaf",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Traits",
      "CO2 for Wheat"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/ThermalTime.html",
    "href": "docs/Crops/Wheat/Phenology/ThermalTime.html",
    "title": "Thermal Time",
    "section": "",
    "text": "Daily thermal time for wheat based on SubDailyInterpolation with three cardinal temperature and ThreeHourAirTemperature interpolation method.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Thermal Time"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/ThermalTime.html#overview",
    "href": "docs/Crops/Wheat/Phenology/ThermalTime.html#overview",
    "title": "Thermal Time",
    "section": "Overview",
    "text": "Overview\nThe Thermal Time function in wheat model calculates the daily thermal time. This is crucial for crop development and organ growth. The model uses a sub-daily interpolation method to estimate air temperatures at three hourly interpolation method (ThreeHourAirTemperature), then applies a three cardinal temperature function to each interpolated temperature. These values are averaged to give a daily thermal time used in phenological and growth calculations.\n\nInterpolationMethod: ThreeHourAirTemperature is used for sub-daily interpolation, i.e. 3-hourly temperature estimates.\nResponse: Three cardinal temperature using XYPairs to define the temperature response function. This function determines how effective the temperature is for thermal time accumulation.\n\n\n\n\nCardinal Point\nDescription\nValue (°C)\n\n\n\n\nBase\nMinimum for growth\n0\n\n\nOptimum\nMaximum rate of growth\n26\n\n\nMaximum\nGrowth ceases above this\n37\n\n\n\n\n\n\n\n\nThermal Time Function with Three Cardinal Temperatures",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Thermal Time"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/ThermalTime.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/ThermalTime.html#cultivar-specific-parameters",
    "title": "Thermal Time",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\nIn general, we do not modify the thermal time function for different cultivars.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Thermal Time"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/ThermalTime.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/ThermalTime.html#practical-example",
    "title": "Thermal Time",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is provided for the thermal time function.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Thermal Time"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/ThermalTime.html#simulation-example",
    "href": "docs/Crops/Wheat/Phenology/ThermalTime.html#simulation-example",
    "title": "Thermal Time",
    "section": "Simulation Example",
    "text": "Simulation Example\nWe demonstrate daily thermal time using example simulations for wheat. These simulations illustrate how daily thermal time is calculated based on daily minimum and maximum temperatures, which are key drivers of crop development.\nThe output variable Wheat.Phenology.ThermalTime reports the daily thermal time values. These values represent the crop’s physiological response to temperature, and are used to model development processes such as leaf appearance, stem elongation, and flowering.\nIn the example below, we plot thermal time against days after sowing (Wheat.DaysAfterSowing) to visualize how thermal time accumulates across the season. The used cultivar is Sunlamb, and the sowing date is 1 May. The figure overlays thermal time accumulation with daily temperature conditions to provide context for interpreting crop development.\n\n\n\n\n\n\n\n\nFigure 1: Thermal Time Simulation for Wheat Example 1. The blue and red lines represent daily minimum and maximum temperatures, respectively. The black line and symbols represent the thermal time accumulation for the cultivar ‘Sunlamb’ on the sowing date ‘1-May’.\n\n\n\n\n\nThis plot provides insight into how daily thermal time values fluctuate in response to daily temperatures and how these values accumulate to drive crop development.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Thermal Time"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/SpikeletsDifferentiating.html",
    "href": "docs/Crops/Wheat/Phenology/SpikeletsDifferentiating.html",
    "title": "SpikeletsDifferentiating",
    "section": "",
    "text": "The SpikeletsDifferentiating phase in Wheat represents the developmental period from DoubleRidge to MaximumSpikeletPrimordia. It is influenced by vernalisation expression after double ridge.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "SpikeletsDifferentiating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/SpikeletsDifferentiating.html#overview",
    "href": "docs/Crops/Wheat/Phenology/SpikeletsDifferentiating.html#overview",
    "title": "SpikeletsDifferentiating",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the DoubleRidge and MaximumSpikeletPrimordia stages.\n\nThis phase starts at DoubleRidge and ends at MaximumSpikeletPrimordia.\nThe model uses daily changes of vernalisation expression (\\(\\Delta Vrn\\) in the CAMP) to progress phase development.\nThe Target is fixed as constant for this phase, with default value of 1 which means the total vernalisation expression is reached 2 to proceed into next phase.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "SpikeletsDifferentiating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/SpikeletsDifferentiating.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/SpikeletsDifferentiating.html#cultivar-specific-parameters",
    "title": "SpikeletsDifferentiating",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\nno cultivar-specific parameters available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "SpikeletsDifferentiating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/SpikeletsDifferentiating.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/SpikeletsDifferentiating.html#practical-example",
    "title": "SpikeletsDifferentiating",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "SpikeletsDifferentiating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/SpikeletsDifferentiating.html#simulation-example",
    "href": "docs/Crops/Wheat/Phenology/SpikeletsDifferentiating.html#simulation-example",
    "title": "SpikeletsDifferentiating",
    "section": "Simulation Example",
    "text": "Simulation Example\nSee the practical example in the LeafInitiating.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "SpikeletsDifferentiating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Phyllochron.html",
    "href": "docs/Crops/Wheat/Phenology/Phyllochron.html",
    "title": "Phyllochron",
    "section": "",
    "text": "Phyllochron is a model that estimates how quickly new leaves appear on a wheat plant after it emerges from the soil. This timing is important because it influences later growth stages and ultimately affects crop yield and development.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Phyllochron"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Phyllochron.html#overview",
    "href": "docs/Crops/Wheat/Phenology/Phyllochron.html#overview",
    "title": "Phyllochron",
    "section": "Overview",
    "text": "Overview\nThe Phyllochron model simulates the interval between the appearance of successive leaf tips on a wheat plant. It acts like a biological clock, helping researchers and agronomists predict how fast a plant will grow new leaves under different conditions. This model is a key part of the crop’s phenology (developmental timing), which is crucial for understanding when the plant will reach important stages like flowering and grain filling.\nLeaf appearance rate is influenced by temperature (how warm it is), the plant’s stage of development (which leaf is appearing), and the length of the day (photoperiod). By adjusting these parameters, the model can represent different wheat varieties and growing environments. This helps breeders and agronomists select varieties that are better suited to specific climates or management practices.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Phyllochron"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Phyllochron.html#methodology",
    "href": "docs/Crops/Wheat/Phenology/Phyllochron.html#methodology",
    "title": "Phyllochron",
    "section": "Methodology",
    "text": "Methodology\nThe Phyllochron model is based on the idea that the time between new leaf appearances (measured in degree-days, or °C·days) is not constant. Instead, it changes depending on the leaf’s position on the plant and the day length.\nThe effective phyllochron (\\(P_{\\text{eff}}\\)) is calculated as:\n\\[\nP_{\\text{eff}} = P_{\\text{base}} \\times f_{\\text{leaf}}(n) \\times f_{\\text{pp}}(d)\n\\]\n\n\\(P_{\\text{base}}\\) is the base phyllochron (default: 120 °C·days), representing the typical interval between leaves under standard conditions for leaf rank from 3 to 7.\n\\(f_{\\text{leaf}}(n)\\) is a factor that adjusts the phyllochron depending on which leaf is appearing (\\(n\\) is the leaf cohort number).\n\\(f_{\\text{pp}}(d)\\) is a modifier that accounts for the effect of day length (\\(d\\) is the photoperiod in hours).\n\n\nLeaf Stage Factor\nThe rate at which new leaves appear changes as the plant grows. Early leaves appear faster, while later leaves take longer (Jamieson et al. 1998). This is represented by a piecewise function:\n\n\n\nLeaf Cohort Number (\\(n\\))\nFactor\n\n\n\n\n0–2\n0.75\n\n\n3–7\n1.0\n\n\n8+\n1.4\n\n\n\nThis means the first 2 leaves appear more quickly, leaves in the middle appear at a standard rate, and later leaves appear more slowly.\n\n\n\n\n\nLeaf Stage Factor as a Function of Leaf Cohort Number\n\n\n\n\n\n\nPhotoperiod Effect\nThe model also accounts for how sensitive the plant is to day length with 6 degrees twilight. When days are short (less than 12 hours), leaf appearance slows down. The photoperiod effect is calculated as:\n\\[\nf_{\\text{pp}}(d) = 1 + S \\cdot f_d(d)\n\\]\n\n\\(S\\) is the photoperiod sensitivity (a parameter that can be adjusted for different varieties). \\(S\\) is typically set to 0.6 for wheat, which means the phyllochron increases by 60% (i.e. \\(120 \\times (1 + 0.6) = 192\\) °C·days) when day length is less than 8 hours, and not at all (i.e. \\(120 \\times (1 + 0) = 120\\) °C·days) when it is above 12 hours.\n\\(f_d(d)\\) describes how the effect changes with day length:\n\n\n\n\nDay Length (h)\nModifier \\(f_d(d)\\)\n\n\n\n\n8\n1.0\n\n\n12\n0.0\n\n\n20\n0.0\n\n\n\n\n\n\n\n\nPhotoperiod Effect on Phyllochron\n\n\n\n\nSo, for day lengths below 12 hours, the phyllochron increases (leaves appear more slowly), but above 12 hours, there is no further effect.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Phyllochron"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Phyllochron.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/Phyllochron.html#cultivar-specific-parameters",
    "title": "Phyllochron",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].PhyllochronPpSensitivity.FixedValue\nSensitivity of leaf appearance rate to photoperiod\n0.6\n\n\n[Phenology].Phyllochron.BasePhyllochron.FixedValue\nBase phyllochron\n120",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Phyllochron"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Phyllochron.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/Phyllochron.html#practical-example",
    "title": "Phyllochron",
    "section": "Practical Example",
    "text": "Practical Example\nLeaf Rank Effects\nWe assume a wheat cultivar with a base phyllochron of 100 °C·days, a photoperiod sensitivity of 0.6, and sown at Inverleigh, Victoria, which has a day length of 11 hours in winter. The phyllochron for leaf 1 to 8 can be calculated as follows:\n\nBase phyllochron (\\(P_{\\text{base}}\\)): 100 °C·days\nPhotoperiod modifier (\\(f_{\\text{pp}}(11)\\)):\n\n\\(f_d(11) = \\frac{12 - 11}{12 - 8} = 0.25\\)\n\\(f_{\\text{pp}}(11) = 1 + 0.6 \\times 0.25 = 1.15\\)\n\nLeaf stage factor (\\(f_{\\text{leaf}}(n)\\)):\n\nLeaves 1–2: 0.75\nLeaves 3–7: 1.0\nLeaf 8: 1.4\n\n\nExample calculations:\nThis table shows the phyllochron for each leaf cohort under these example conditions.\n\n\n\n\n\n\n\n\nLeaf Cohort (\\(n\\))\n\\(f_{\\text{leaf}}(n)\\)\n\\(P_{\\text{eff}}\\) (°C·days)\n\n\n\n\n1\n0.75\n\\(100 \\times 0.75 \\times 1.15 = 86.25\\)\n\n\n2\n0.75\n\\(100 \\times 0.75 \\times 1.15 = 86.25\\)\n\n\n3\n1.0\n\\(100 \\times 1.0 \\times 1.15 = 115.0\\)\n\n\n4\n1.0\n\\(100 \\times 1.0 \\times 1.15 = 115.0\\)\n\n\n5\n1.0\n\\(100 \\times 1.0 \\times 1.15 = 115.0\\)\n\n\n6\n1.0\n\\(100 \\times 1.0 \\times 1.15 = 115.0\\)\n\n\n7\n1.0\n\\(100 \\times 1.0 \\times 1.15 = 115.0\\)\n\n\n8\n1.4\n\\(100 \\times 1.4 \\times 1.15 = 161.0\\)\n\n\n\nEffect of Photoperiod Sensitivity\nTo illustrate how photoperiod sensitivity (\\(S\\)) affects the phyllochron, let’s calculate \\(P_{\\text{eff}}\\) for a range of \\(S\\) values from 0 to 1 (at 0.2 intervals) with a fixed day length of 10 hours. We’ll use a base phyllochron of 100 °C·days and the leaf stage factor for leaf 3 (\\(f_{\\text{leaf}}(3) = 1.0\\)).\nFirst, calculate \\(f_d(10)\\): - \\(f_d(10) = \\frac{12 - 10}{12 - 8} = \\frac{2}{4} = 0.5\\)\nNow, for each \\(S\\):\n\n\n\n\n\n\n\n\nPhotoperiod Sensitivity (\\(S\\))\n\\(f_{\\text{pp}}(10)\\)\n\\(P_{\\text{eff}}\\) (°C·days)\n\n\n\n\n0.0\n\\(1 + 0.0 \\times 0.5 = 1.00\\)\n\\(100 \\times 1.0 \\times 1.00 = 100.0\\)\n\n\n0.2\n\\(1 + 0.2 \\times 0.5 = 1.10\\)\n\\(100 \\times 1.0 \\times 1.10 = 110.0\\)\n\n\n0.4\n\\(1 + 0.4 \\times 0.5 = 1.20\\)\n\\(100 \\times 1.0 \\times 1.20 = 120.0\\)\n\n\n0.6\n\\(1 + 0.6 \\times 0.5 = 1.30\\)\n\\(100 \\times 1.0 \\times 1.30 = 130.0\\)\n\n\n0.8\n\\(1 + 0.8 \\times 0.5 = 1.40\\)\n\\(100 \\times 1.0 \\times 1.40 = 140.0\\)\n\n\n1.0\n\\(1 + 1.0 \\times 0.5 = 1.50\\)\n\\(100 \\times 1.0 \\times 1.50 = 150.0\\)",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Phyllochron"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Phyllochron.html#see-also",
    "href": "docs/Crops/Wheat/Phenology/Phyllochron.html#see-also",
    "title": "Phyllochron",
    "section": "See Also",
    "text": "See Also\n\nPhotoperiod Effect on Phyllochron in Australian Wheat",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Phyllochron"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Heading.html",
    "href": "docs/Crops/Wheat/Phenology/Heading.html",
    "title": "Heading",
    "section": "",
    "text": "The Heading phase represents the developmental stage between FlagLeafAppearance and HeadEmergence in wheat crops. It models the progression of time and environmental responses that lead to the visible emergence of the crop’s head.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Heading"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Heading.html#overview",
    "href": "docs/Crops/Wheat/Phenology/Heading.html#overview",
    "title": "Heading",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the FlagLeafAppearance and HeadEmergence stages.\n\nThe Heading simulates the transition from flag leaf appearance to head emergence.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is depending on photoperiod response and fixed constant of thermal time target at long days \\[\n\\text{Target} = \\text{LongPpBase} \\times \\left( 1 +  \\text{PpSens} \\times \\text{PpResponse} \\right)\n\\]\n\nWhere:\n\n\\(\\text{LongPpBase}\\) = base thermal time under long day condition, i.e. at 20 hours of daylight with default value of 200.0 °Cd\n\\(\\text{PpSens}\\) = sensitivity to photoperiod, with default value of 2 (unitless multiplier)\n\\(\\text{PpResponse}\\) = interpolated modifier (0 to 1) based on day length\n\nThe photoperiod response is modeled using a piecewise linear interpolation:\n\n\n\nPhotoperiod (h)\nResponse\n\n\n\n\n6.0\n1.0\n\n\n8.0\n1.0\n\n\n20.0\n0.0\n\n\n22.0\n0.0\n\n\n\n\n\n\n\n\nPhotoperiod Effect on Heading Phase\n\n\n\n\nThe daily Photoperiod is calculated using the PhotoperiodFunction with 6 degrees twilight.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Heading"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Heading.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/Heading.html#cultivar-specific-parameters",
    "title": "Heading",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\nThese parameters can vary between crop cultivars and are typically found in the Phenology module:\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].HeadEmergenceLongDayBase.FixedValue\nBase thermal time (°Cd) required under long days\n200\n\n\n[Phenology].HeadEmergencePpSensitivity.FixedValue\nSensitivity to photoperiod (unitless multiplier)\n2",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Heading"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Heading.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/Heading.html#practical-example",
    "title": "Heading",
    "section": "Practical Example",
    "text": "Practical Example\nEffect of Photoperiod Sensitivity on Heading Phase Let’s recalculate the target thermal time for a day length of 12 hours. The photoperiod response \\(f_d(12)\\) can be interpolated from the table above:\n\nBetween 8 h (response = 1.0) and 20 h (response = 0.0), the response decreases linearly.\n\\(f_d(12) = 1.0 - \\frac{12 - 8}{20 - 8} = 1.0 - \\frac{4}{12} = 1.0 - 0.333 = 0.667\\)\n\nNow, for each \\(\\text{PpSens}\\):\n\n\n\n\n\n\n\n\nPhotoperiod Sensitivity (\\(\\text{PpSens}\\))\n\\(1 + \\text{PpSens} \\times 0.667\\)\nTarget Thermal Time (°C·days)\n\n\n\n\n0.0\n\\(1 + 0.0 \\times 0.667 = 1.000\\)\n\\(200 \\times 1.000 = 200.0\\)\n\n\n0.5\n\\(1 + 0.5 \\times 0.667 = 1.333\\)\n\\(200 \\times 1.333 = 266.7\\)\n\n\n1.0\n\\(1 + 1.0 \\times 0.667 = 1.667\\)\n\\(200 \\times 1.667 = 333.3\\)\n\n\n1.5\n\\(1 + 1.5 \\times 0.667 = 2.000\\)\n\\(200 \\times 2.000 = 400.0\\)\n\n\n2.0\n\\(1 + 2.0 \\times 0.667 = 2.333\\)\n\\(200 \\times 2.333 = 466.7\\)",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Heading"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Heading.html#see-also",
    "href": "docs/Crops/Wheat/Phenology/Heading.html#see-also",
    "title": "Heading",
    "section": "See Also",
    "text": "See Also\n\nPhotoperiod Effect on Heading in Australian Wheat",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Heading"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainRipening.html",
    "href": "docs/Crops/Wheat/Phenology/GrainRipening.html",
    "title": "GrainRipening",
    "section": "",
    "text": "The GrainRipening phase in Wheat represents the developmental period from EndGrainFill to HarvestRipe. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainRipening"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainRipening.html#overview",
    "href": "docs/Crops/Wheat/Phenology/GrainRipening.html#overview",
    "title": "GrainRipening",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the EndGrainFill and HarvestRipe stages.\n\nThis phase starts at EndGrainFill and ends at HarvestRipe, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is fixed as constant for this phase, with default value of 335.0 °Cd.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainRipening"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainRipening.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/GrainRipening.html#cultivar-specific-parameters",
    "title": "GrainRipening",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].GrainRipening.Target.FixedValue\nThermal time target during grain ripening (°Cd)\n335.0",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainRipening"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainRipening.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/GrainRipening.html#practical-example",
    "title": "GrainRipening",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainRipening"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainExpanding.html",
    "href": "docs/Crops/Wheat/Phenology/GrainExpanding.html",
    "title": "GrainExpanding",
    "section": "",
    "text": "The GrainExpanding phase in Wheat represents the developmental period from Anthesis to MaximumGrainLength. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainExpanding"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainExpanding.html#overview",
    "href": "docs/Crops/Wheat/Phenology/GrainExpanding.html#overview",
    "title": "GrainExpanding",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the Anthesis and MaximumGrainLength stages.\n\nThis phase starts at Anthesis and ends at MaximumGrainLength, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is fixed as constant for this phase, with default value of 120.0 °Cd.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainExpanding"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainExpanding.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/GrainExpanding.html#cultivar-specific-parameters",
    "title": "GrainExpanding",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].GrainExpanding.Target.FixedValue\nThermal time target during grain expanding (°Cd)\n120.0",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainExpanding"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainExpanding.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/GrainExpanding.html#practical-example",
    "title": "GrainExpanding",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainExpanding"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Flowering.html",
    "href": "docs/Crops/Wheat/Phenology/Flowering.html",
    "title": "Flowering",
    "section": "",
    "text": "The Flowering phase in Wheat represents the developmental period from HeadEmergence to Anthesis. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Flowering"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Flowering.html#overview",
    "href": "docs/Crops/Wheat/Phenology/Flowering.html#overview",
    "title": "Flowering",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the HeadEmergence and Anthesis stages.\n\nThis phase starts at HeadEmergence and ends at Anthesis, when the flower is fully developed.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is fixed as constant for this phase, with default value of 80.0 °Cd.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Flowering"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Flowering.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/Flowering.html#cultivar-specific-parameters",
    "title": "Flowering",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].Flowering.Target.FixedValue\nThermal time target during flowering (°Cd)\n80.0",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Flowering"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Flowering.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/Flowering.html#practical-example",
    "title": "Flowering",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Flowering"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Examples/wheat_example1.html",
    "href": "docs/Crops/Wheat/Examples/wheat_example1.html",
    "title": "Wheat Example Simulation 1",
    "section": "",
    "text": "This example demonstrates a wheat simulation using APSIM Next Generation (APSIM NG) at two contrasting locations in Australia, two different cultivars, and two different sowing dates. The simulation is designed to illustrate the impact of these variables on wheat growth and development.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Examples",
      "Wheat Example Simulation 1"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Examples/wheat_example1.html#simulation-configuration",
    "href": "docs/Crops/Wheat/Examples/wheat_example1.html#simulation-configuration",
    "title": "Wheat Example Simulation 1",
    "section": "Simulation Configuration",
    "text": "Simulation Configuration\nThe two contrasting cultivars are Emu Rock for early maturity type and Sunlamb for late maturity type, which represent different growth characteristics. The two different sowing dates are 1st May and 1st June.\nThe two contrasting locations are Roma in Queensland and Hamilton in Victoria, Australia. The weather data are obtained from SILO Patched Point Dataset.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Examples",
      "Wheat Example Simulation 1"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/index.html",
    "href": "docs/Crops/Canola/Phenology/index.html",
    "title": "Phenology",
    "section": "",
    "text": "The Phenology model in APSIM NG simulates the development of canola plants.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/index.html#thermal-time",
    "href": "docs/Crops/Canola/Phenology/index.html#thermal-time",
    "title": "Phenology",
    "section": "Thermal Time",
    "text": "Thermal Time\nDaily Thermal Time is based on SubDailyInterpolation with three cardinal temperature and ThreeHourAirTemperature interpolation method.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/index.html#photoperiod",
    "href": "docs/Crops/Canola/Phenology/index.html#photoperiod",
    "title": "Phenology",
    "section": "Photoperiod",
    "text": "Photoperiod\nThe daily photoperiod is calculated using the PhotoperiodFunction with 6 degrees twilight.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/index.html#stages-and-phases",
    "href": "docs/Crops/Canola/Phenology/index.html#stages-and-phases",
    "title": "Phenology",
    "section": "Stages and Phases",
    "text": "Stages and Phases\nThe numerical system is used to represent the development of wheat plants starting from 1. The stages are:\n\n\n\n\n\n\n\n\nStage\nName\nDescription\n\n\n\n\n1\nSowing\nSeeds are planted in the soil\n\n\n2\nGermination\nSeeds absorb water and begin to sprout\n\n\n3\nEmergence\nSeedlings break through the soil surface\n\n\n4\nFloralInitiation\nFloral organs begin to form in the shoot apex\n\n\n5\nGreenBud\nGreen buds become visible\n\n\n6\nStartFlowering\nFirst flowers open\n\n\n7\nStartPodDevelopment\nPods begin to form after flowering\n\n\n8\nStartGrainFilling\nSeeds begin to accumulate dry matter (grain filling starts)\n\n\n9\nEndFlowering\nFlowering is complete\n\n\n10\nEndPodDevelopment\nPod development is complete\n\n\n11\nEndGrainFill\nGrain filling is complete; seeds reach final size\n\n\n12\nMaturity\nSeeds reach physiological maturity\n\n\n13\nHarvestRipe\nSeeds are fully ripened and ready for harvest\n\n\n\nPhases are used to represent the development between two stages. The phases are:\n\n\n\nOrder\nName\nFrom\nTo\n\n\n\n\n1\nGerminating\nSowing\nGermination\n\n\n2\nEmerging\nGermination\nEmergence\n\n\n3\nVegetative\nEmergence\nFloralInitiation\n\n\n4\nBudDevelopment\nFloralInitiation\nGreenBud\n\n\n5\nStemElongation\nGreenBud\nStartFlowering\n\n\n6\nEarlyFlowering\nStartFlowering\nStartPodDevelopment\n\n\n7\nEarlyPodDevelopment\nStartPodDevelopment\nStartGrainFilling\n\n\n8\nEarlyGrainFilling\nStartGrainFilling\nEndFlowering\n\n\n9\nMidGrainFilling\nEndFlowering\nEndPodDevelopment\n\n\n10\nLateGrainFilling\nEndPodDevelopment\nEndGrainFill\n\n\n11\nMaturing\nEndGrainFill\nMaturity\n\n\n12\nRipening\nMaturity\nHarvestRipe\n\n\n13\nReadyForHarvesting\nHarvestRipe",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/ThermalTime.html",
    "href": "docs/Crops/Canola/Phenology/ThermalTime.html",
    "title": "Thermal Time",
    "section": "",
    "text": "Daily thermal time for wheat based on SubDailyInterpolation with three cardinal temperature and ThreeHourAirTemperature interpolation method.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Thermal Time"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/ThermalTime.html#overview",
    "href": "docs/Crops/Canola/Phenology/ThermalTime.html#overview",
    "title": "Thermal Time",
    "section": "Overview",
    "text": "Overview\nThe Thermal Time function in canola model calculates the daily thermal time. This is crucial for crop development and organ growth. The model uses a sub-daily interpolation method to estimate air temperatures at three hourly interpolation method (ThreeHourAirTemperature), then applies a three cardinal temperature function to each interpolated temperature. These values are averaged to give a daily thermal time used in phenological and growth calculations.\n\nInterpolationMethod: ThreeHourAirTemperature is used for sub-daily interpolation, i.e. 3-hourly temperature estimates.\nResponse: Three cardinal temperature using XYPairs to define the temperature response function. This function determines how effective the temperature is for thermal time accumulation (Whish et al. 2020; Robertson and Lilley 2016).\n\n\n\n\nCardinal Point\nDescription\nValue (°C)\n\n\n\n\nBase\nMinimum for growth\n2\n\n\nOptimum\nMaximum rate of growth\n30\n\n\nMaximum\nGrowth ceases above this\n35\n\n\n\n\n\n\n\n\nThermal Time Function with Three Cardinal Temperatures",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Thermal Time"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/ThermalTime.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/ThermalTime.html#cultivar-specific-parameters",
    "title": "Thermal Time",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\nIn general, we do not modify the thermal time function for different cultivars.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Thermal Time"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/ThermalTime.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/ThermalTime.html#practical-example",
    "title": "Thermal Time",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is provided for the thermal time function.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Thermal Time"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/ReadyForHarvesting.html",
    "href": "docs/Crops/Canola/Phenology/ReadyForHarvesting.html",
    "title": "ReadyForHarvesting",
    "section": "",
    "text": "The ReadyForHarvesting phase in Canola represents the last phase after HarvestRipe.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "ReadyForHarvesting"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/ReadyForHarvesting.html#overview",
    "href": "docs/Crops/Canola/Phenology/ReadyForHarvesting.html#overview",
    "title": "ReadyForHarvesting",
    "section": "Overview",
    "text": "Overview\nThe EndPhase model simulates last phase after HarvestRipe.\n\nThis phase starts at EndGrainFill and ends at HarvestRipe, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function. But it does not use here.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "ReadyForHarvesting"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/ReadyForHarvesting.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/ReadyForHarvesting.html#cultivar-specific-parameters",
    "title": "ReadyForHarvesting",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\nNo cultivar-specific parameters are defined for this phase.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "ReadyForHarvesting"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/ReadyForHarvesting.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/ReadyForHarvesting.html#practical-example",
    "title": "ReadyForHarvesting",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "ReadyForHarvesting"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Maturing.html",
    "href": "docs/Crops/Canola/Phenology/Maturing.html",
    "title": "Maturing",
    "section": "",
    "text": "The Maturing phase in Canola represents the developmental period from EndGrainFill to Maturity. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Maturing"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Maturing.html#overview",
    "href": "docs/Crops/Canola/Phenology/Maturing.html#overview",
    "title": "Maturing",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the EndGrainFill and Maturity stages.\n\nThis phase starts at EndGrainFill and ends at Maturity, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is fixed as constant for this phase, with default value of 5 °Cd.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Maturing"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Maturing.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/Maturing.html#cultivar-specific-parameters",
    "title": "Maturing",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].Ripening.Target.FixedValue\nThermal time target during maturing (°Cd)\n5.0",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Maturing"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Maturing.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/Maturing.html#practical-example",
    "title": "Maturing",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Maturing"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Germinating.html",
    "href": "docs/Crops/Canola/Phenology/Germinating.html",
    "title": "Germinating",
    "section": "",
    "text": "The Germinating is a phenological phase in Canola used to represent the development period from Sowing to Germination. It determines whether the seed has germinated based on soil temperature and soil water.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Germinating"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Germinating.html#overview",
    "href": "docs/Crops/Canola/Phenology/Germinating.html#overview",
    "title": "Germinating",
    "section": "Overview",
    "text": "Overview\nThe GerminatingPhase Model is used to simulate the germination of canola seeds. This phase begins when Plant Sowing occurs and ends when plant is germinated with conditions of soil temperature and soil water. See GerminatingPhase for more details.\n\nThe Minimum Soil Temperature is configured as zero by default, which means that the germination will not occur if the soil temperature is below zero,\nThe Soil Water Content should be more than Lower Limit for germination to occur.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Germinating"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Germinating.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/Germinating.html#cultivar-specific-parameters",
    "title": "Germinating",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].Germinating.MinSoilTemperature.FixedValue\nMinimum soil temperature for germination (°C)\n0.0",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Germinating"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Germinating.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/Germinating.html#practical-example",
    "title": "Germinating",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is provided for the thermal time function.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Germinating"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyPodDevelopment.html",
    "href": "docs/Crops/Canola/Phenology/EarlyPodDevelopment.html",
    "title": "EarlyPodDevelopment",
    "section": "",
    "text": "The EarlyPodDevelopment phase in Canola represents the developmental period from StartPodDevelopment to StartGrainFilling. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyPodDevelopment"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyPodDevelopment.html#overview",
    "href": "docs/Crops/Canola/Phenology/EarlyPodDevelopment.html#overview",
    "title": "EarlyPodDevelopment",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the StartPodDevelopment and StartGrainFilling stages.\n\nThis phase starts at StartPodDevelopment and ends at StartGrainFilling, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is fixed as constant for this phase, with default value of 140 °Cd (Robertson et al. 2002).",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyPodDevelopment"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyPodDevelopment.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/EarlyPodDevelopment.html#cultivar-specific-parameters",
    "title": "EarlyPodDevelopment",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].EarlyPodDevelopment.Target.FixedValue\nThermal time target during early pod development (°Cd)\n140",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyPodDevelopment"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyPodDevelopment.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/EarlyPodDevelopment.html#practical-example",
    "title": "EarlyPodDevelopment",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyPodDevelopment"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyFlowering.html",
    "href": "docs/Crops/Canola/Phenology/EarlyFlowering.html",
    "title": "EarlyFlowering",
    "section": "",
    "text": "The EarlyFlowering phase in Canola represents the developmental period from StartFlowering to StartPodDevelopment. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyFlowering"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyFlowering.html#overview",
    "href": "docs/Crops/Canola/Phenology/EarlyFlowering.html#overview",
    "title": "EarlyFlowering",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the StartFlowering and StartPodDevelopment stages.\n\nThis phase starts at StartFlowering and ends at StartPodDevelopment, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is fixed as constant for this phase, with default value of 100 °Cd (Robertson et al. 2002).",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyFlowering"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyFlowering.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/EarlyFlowering.html#cultivar-specific-parameters",
    "title": "EarlyFlowering",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].EarlyFlowering.Target.FixedValue\nThermal time target during early flowering (°Cd)\n100",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyFlowering"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyFlowering.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/EarlyFlowering.html#practical-example",
    "title": "EarlyFlowering",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyFlowering"
    ]
  },
  {
    "objectID": "disclaimer.html",
    "href": "disclaimer.html",
    "title": "Disclaimer",
    "section": "",
    "text": "This is not the official APSIM documentation. It is a personal collection of documentation and notes compiled while working with APSIM Next Generation. For official resources, please refer to the APSIM Documentation, Model Validation, and the APSIM GitHub repository.\nThe content here is generated and curated from various sources, including:\n\nAPSIM Official Website\nAPSIM User Documentation\n\nModel Validation Docs\n\nAPSIM GitHub Repository\nPersonal communication with APSIM developers\nMy own interpretation and understanding\nLarge language models (e.g., GitHub Copilot, ChatGPT)\n\n⚠️ This documentation is not official, may contain errors, and is not guaranteed to be complete or accurate. It is intended as a learning resource for myself and others interested in APSIM NG.\nUse this material at your own risk. I take no responsibility for any loss, damage, or misinterpretation resulting from the use of this material. Always consult official documentation or domain experts before relying on the information for research or production use.\nI will continue to update this as I work with APSIM NG. Contributions and corrections are welcome via GitHub pull requests or issues."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my personal documentation site for APSIM Next Generation.\nThis site is a collection of notes, technical documentation, tips, and examples while working with APSIM NG. It is aimed at helping me (and hopefully others) understand and use APSIM NG more effectively in research and application."
  },
  {
    "objectID": "about.html#what-this-site-includes",
    "href": "about.html#what-this-site-includes",
    "title": "About",
    "section": "What This Site Includes",
    "text": "What This Site Includes\nThis repository serves as a knowledge base for my learning journey, experiments, and problem-solving with APSIM NG. It includes:\n\n📘 Documentation — In-depth explanations and configuration guides\n🌾 Tips and Tricks — Short how-tos and troubleshooting solutions\n🧪 Tutorials — Step-by-step walkthroughs for specific tasks\n🔧 Scripts — Useful R snippets for simulations\n\nWhether you’re just starting with APSIM NG or looking for solutions to specific modelling challenges, I hope these notes are helpful."
  },
  {
    "objectID": "about.html#not-official-documentation",
    "href": "about.html#not-official-documentation",
    "title": "About",
    "section": "Not Official Documentation",
    "text": "Not Official Documentation\n\nThis site is not the official APSIM documentation.\n\nThe official resources are available here:\n\n📘 APSIM Documentation (legacy)\n🔬 Model Validation\n🧪 APSIM GitHub Repository"
  },
  {
    "objectID": "about.html#license-and-attribution",
    "href": "about.html#license-and-attribution",
    "title": "About",
    "section": "⚖️ License and Attribution",
    "text": "⚖️ License and Attribution\nThis documentation includes content derived from:\n\nThe source code of APSIM Next Generation\n\nThe official APSIM Website\n\nOfficial documentation and personal communications with APSIM developers\n\nIt is provided under the General Use Licence Agreement for Agricultural Production Systems Simulator (APSIM).\n\nThis is an independent learning resource compiled and maintained by myself. It is not an official publication of the APSIM Initiative and may contain personal interpretations or errors.\nWhile I contribute to APSIM NG development, this site reflects my personal understanding and is intended as a resource to support learning and exploration."
  },
  {
    "objectID": "about.html#acknowledgment",
    "href": "about.html#acknowledgment",
    "title": "About",
    "section": "🙏 Acknowledgment",
    "text": "🙏 Acknowledgment\nAcknowledgment is made to the APSIM Initiative which takes responsibility for quality assurance and a structured innovation programme for APSIM’s modelling software, which is provided free for research and development use. See www.apsim.info for details."
  },
  {
    "objectID": "docs/Crops/Barley/index.html",
    "href": "docs/Crops/Barley/index.html",
    "title": "Barley",
    "section": "",
    "text": "The APSIM Barley model is constructed using the Plant Modelling Framework (PMF) (Brown et al. 2014) by Brown, H.E., Huth, N.I. and Holzworth, D.P., which offers a modular library of plant organ and process submodels. This design allows for dynamic assembly of complex crop models, such as barley, by integrating components like photosynthesis and leaf development without additional coding.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Barley"
    ]
  },
  {
    "objectID": "docs/Crops/Barley/index.html#phenology",
    "href": "docs/Crops/Barley/index.html#phenology",
    "title": "Barley",
    "section": "Phenology",
    "text": "Phenology\nThe barley phenology is simulated from sowing to harvest.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Barley"
    ]
  },
  {
    "objectID": "docs/Crops/Barley/index.html#see-also",
    "href": "docs/Crops/Barley/index.html#see-also",
    "title": "Barley",
    "section": "See Also",
    "text": "See Also\n\nOnline Resource File",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Barley"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyGrainFilling.html",
    "href": "docs/Crops/Canola/Phenology/EarlyGrainFilling.html",
    "title": "EarlyGrainFilling",
    "section": "",
    "text": "The EarlyGrainFilling phase in Canola represents the developmental period from StartGrainFilling to EndFlowering. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyGrainFilling.html#overview",
    "href": "docs/Crops/Canola/Phenology/EarlyGrainFilling.html#overview",
    "title": "EarlyGrainFilling",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the EndPodDevelopment and EndGrainFill stages.\n\nThis phase starts at StartGrainFilling and ends at EndFlowering, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is assumed as follows:\n\nThe model assumes the entire grain filling period is a constant value defined as genotypic parameter [Phenology].LateGrainFilling.Target.EntireGrainfillPeriod.FixedValue (\\(T_\\text{total}\\)) and the default value is 700 °Cd, and divides this into three phases:\n\nEarly Grain Filling = 5% of the total period \\[\nT_\\text{early} = 0.05 \\times T_\\text{total}\n\\]\nMid Grain Filling = 50% of the remaining period after early grain fill\n\n\\[\nT_\\text{mid} = 0.5 \\times (T_\\text{total} - T_\\text{early})\n\\]\n\nLate Grain Filling = Residual period\n\n\\[\nT_\\text{late} = T_\\text{total} - T_\\text{early} - T_\\text{mid}\n\\]\n\nA variable Stress referring to [Phenology].Vegetative.PhotoperiodEffect is presented in the Canola model, but don’t actually use in the model.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyGrainFilling.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/EarlyGrainFilling.html#cultivar-specific-parameters",
    "title": "EarlyGrainFilling",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].LateGrainFilling.Target.EntireGrainfillPeriod.FixedValue\nThermal time target during whole grain filling (°Cd)\n700",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/EarlyGrainFilling.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/EarlyGrainFilling.html#practical-example",
    "title": "EarlyGrainFilling",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "EarlyGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Emerging.html",
    "href": "docs/Crops/Canola/Phenology/Emerging.html",
    "title": "Emerging",
    "section": "",
    "text": "The Emerging phase in Canola represents the developmental period from Germination to Emergence. It is influenced by sowing depth, a lag period before coleoptile elongation, and the elongation rate of the shoot.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Emerging"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Emerging.html#overview",
    "href": "docs/Crops/Canola/Phenology/Emerging.html#overview",
    "title": "Emerging",
    "section": "Overview",
    "text": "Overview\nThe EmergingPhase model simulates the time between the Germination and Emergence stages.\n\nThis phase starts at Germination and ends at Emergence, when the seedling is considered to have emerged from the soil.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time to complete this phase is defined as:\n\n\\[\n\\text{Target} = \\text{ShootLag} + (\\text{SowingDepth} \\times \\text{ShootRate})\n\\]\nWhere:\n\nShootLag is a lag when coleoptile starting to elongate (°Cd) with default value of 15.0 °Cd,\nShootRate is the rate of shoot elongation (°Cd/mm) with default value of 5 °Cd/mm,\nSowingDepth is the depth at which the seed is sown (mm), taken from [Plant].SowingData.Depth.\n\nDeeper sowing results in longer emergence delays due to greater thermal time requirement.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Emerging"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Emerging.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/Emerging.html#cultivar-specific-parameters",
    "title": "Emerging",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].Emerging.ShootLag.FixedValue\nLag before coleoptile starts to elongate (°Cd)\n15.0\n\n\n[Phenology].Emerging.ShootRate.FixedValue\nRate of shoot elongation (°Cd/mm)\n5.0",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Emerging"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Emerging.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/Emerging.html#practical-example",
    "title": "Emerging",
    "section": "Practical Example",
    "text": "Practical Example\nThis table illustrates deeper sowing delays emergence due to higher thermal time requirements.\n\n\n\n\n\n\n\n\n\nSowing Depth (mm)\nShootLag (°Cd)\nShootRate (°Cd/mm)\nTarget Thermal Time (°Cd)\n\n\n\n\n20\n15.0\n5.0\n95.0\n\n\n25\n15.0\n5.0\n100.0\n\n\n30\n15.0\n5.0\n105.0",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Emerging"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/LateGrainFilling.html",
    "href": "docs/Crops/Canola/Phenology/LateGrainFilling.html",
    "title": "LateGrainFilling",
    "section": "",
    "text": "The LateGrainFilling phase in Canola represents the developmental period from EndPodDevelopment to EndGrainFill. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "LateGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/LateGrainFilling.html#overview",
    "href": "docs/Crops/Canola/Phenology/LateGrainFilling.html#overview",
    "title": "LateGrainFilling",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the EndPodDevelopment and EndGrainFill stages.\n\nThis phase starts at EndPodDevelopment and ends at EndGrainFill, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is assumed as follows:\n\nThe model assumes the entire grain filling period is a constant value defined as genotypic parameter [Phenology].LateGrainFilling.Target.EntireGrainfillPeriod.FixedValue (\\(T_\\text{total}\\)) and the default value is 700 °Cd, and divides this into three phases:\n\nEarly Grain Filling = 5% of the total period \\[\nT_\\text{early} = 0.05 \\times T_\\text{total}\n\\]\nMid Grain Filling = 50% of the remaining period after early grain fill\n\n\\[\nT_\\text{mid} = 0.5 \\times (T_\\text{total} - T_\\text{early})\n\\]\n\nLate Grain Filling = Residual period\n\n\\[\nT_\\text{late} = T_\\text{total} - T_\\text{early} - T_\\text{mid}\n\\]\n\nA variable Stress referring to [Phenology].Vegetative.PhotoperiodEffect is presented in the Canola model, but don’t actually use in the model.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "LateGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/LateGrainFilling.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/LateGrainFilling.html#cultivar-specific-parameters",
    "title": "LateGrainFilling",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].LateGrainFilling.Target.EntireGrainfillPeriod.FixedValue\nThermal time target during whole grain filling (°Cd)\n700",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "LateGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/LateGrainFilling.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/LateGrainFilling.html#practical-example",
    "title": "LateGrainFilling",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "LateGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/MidGrainFilling.html",
    "href": "docs/Crops/Canola/Phenology/MidGrainFilling.html",
    "title": "MidGrainFilling",
    "section": "",
    "text": "The MidGrainFilling phase in Canola represents the developmental period from EndFlowering to EndPodDevelopment. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "MidGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/MidGrainFilling.html#overview",
    "href": "docs/Crops/Canola/Phenology/MidGrainFilling.html#overview",
    "title": "MidGrainFilling",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the EndPodDevelopment and EndGrainFill stages.\n\nThis phase starts at EndFlowering and ends at EndPodDevelopment, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is assumed as follows:\n\nThe model assumes the entire grain filling period is a constant value defined as genotypic parameter [Phenology].LateGrainFilling.Target.EntireGrainfillPeriod.FixedValue (\\(T_\\text{total}\\)) and the default value is 700 °Cd, and divides this into three phases:\n\nEarly Grain Filling = 5% of the total period \\[\nT_\\text{early} = 0.05 \\times T_\\text{total}\n\\]\nMid Grain Filling = 50% of the remaining period after early grain fill\n\n\\[\nT_\\text{mid} = 0.5 \\times (T_\\text{total} - T_\\text{early})\n\\]\n\nLate Grain Filling = Residual period\n\n\\[\nT_\\text{late} = T_\\text{total} - T_\\text{early} - T_\\text{mid}\n\\]\n\nA variable Stress referring to [Phenology].Vegetative.PhotoperiodEffect is presented in the Canola model, but don’t actually use in the model.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "MidGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/MidGrainFilling.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/MidGrainFilling.html#cultivar-specific-parameters",
    "title": "MidGrainFilling",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].LateGrainFilling.Target.EntireGrainfillPeriod.FixedValue\nThermal time target during whole grain filling (°Cd)\n700",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "MidGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/MidGrainFilling.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/MidGrainFilling.html#practical-example",
    "title": "MidGrainFilling",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "MidGrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Ripening.html",
    "href": "docs/Crops/Canola/Phenology/Ripening.html",
    "title": "Ripening",
    "section": "",
    "text": "The Ripening phase in Canola represents the developmental period from Maturity to HarvestRipe. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Ripening"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Ripening.html#overview",
    "href": "docs/Crops/Canola/Phenology/Ripening.html#overview",
    "title": "Ripening",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the Maturity and HarvestRipe stages.\n\nThis phase starts at Maturity and ends at HarvestRipe, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is fixed as constant for this phase, with default value of 1.0 °Cd, i.e. HarvestRipe stage is occurring in next day.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Ripening"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Ripening.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/Ripening.html#cultivar-specific-parameters",
    "title": "Ripening",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].Ripening.Target.FixedValue\nThermal time target during ripening (°Cd)\n1.0",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Ripening"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Ripening.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/Ripening.html#practical-example",
    "title": "Ripening",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Ripening"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Vegetative.html",
    "href": "docs/Crops/Canola/Phenology/Vegetative.html",
    "title": "Vegetative",
    "section": "",
    "text": "The Vegetative phase in Canola represents the developmental period from Emergence to FloralInitiation. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Vegetative"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Vegetative.html#overview",
    "href": "docs/Crops/Canola/Phenology/Vegetative.html#overview",
    "title": "Vegetative",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the StartEmergence and StartFloralInitiation stages.\n\nThis phase starts at StartEmergence and ends at StartFloralInitiation, when the plant is considered to be fully developed.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is depending on vernalisation time from germination to floral initiation (\\(VT\\)) (Whish et al. 2020).\n\nThis response curve is defined by XYPairs with following values:\n\n\n\nCumulative Vernal Time (days)\nTarget Thermal Time (°Cd)\n\n\n\n\n0.0\n290.0\n\n\n25.0\n1.0\n\n\n\n\n\n\n\n\nTarget Thermal Time Function with Vernalisation Progress\n\n\n\n\nIn each day, the model checks whether the cumulative thermal time has reached the target thermal time. If it has, the phase is considered complete, and the model transitions to the next phase, which is FloralInitiation.\nThe cumulative thermal time is calculated as the sum of daily vernalisation time from germination to floral initiation.\nThe daily vernalisation time is calculated with SubDailyInterpolation using the following response function to air temperature after ThreeHourAirTemperature interpolation method:\n\n\n\nTemperature (°C)\nResponse (°Cd)\n\n\n\n\n0\n0\n\n\n2\n1\n\n\n8\n0.5\n\n\n15\n0\n\n\n\n\n\n\n\n\nDaily Vernalisation Time Function",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Vegetative"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Vegetative.html#cultivar-specific-parameters",
    "href": "docs/Crops/Canola/Phenology/Vegetative.html#cultivar-specific-parameters",
    "title": "Vegetative",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].Vegetative.Target.XYPairs.X\nVernal time X values for target thermal time (days)\n0, 25\n\n\n[Phenology].Vegetative.Target.XYPairs.Y\nTarget thermal time Y values (°Cd)\n290, 1",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Vegetative"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/Phenology/Vegetative.html#practical-example",
    "href": "docs/Crops/Canola/Phenology/Vegetative.html#practical-example",
    "title": "Vegetative",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola",
      "Phenology",
      "Vegetative"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/index.html",
    "href": "docs/Crops/Canola/index.html",
    "title": "Canola",
    "section": "",
    "text": "The Canola (Brassica napus) model in APSIM Next Generation simulates the growth and development of canola crops. It is designed to capture the key physiological processes that influence canola yield, including phenology, biomass accumulation, and stress responses.\nThe APSIM Canola model is constructed using the Plant Modelling Framework (PMF) (Brown et al. 2014), which offers a modular library of plant organ and process submodels. This design allows for dynamic assembly of complex crop models, such as canola, by integrating components like photosynthesis and leaf development without additional coding.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/index.html#phenology",
    "href": "docs/Crops/Canola/index.html#phenology",
    "title": "Canola",
    "section": "Phenology",
    "text": "Phenology",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola"
    ]
  },
  {
    "objectID": "docs/Crops/Canola/index.html#see-also",
    "href": "docs/Crops/Canola/index.html#see-also",
    "title": "Canola",
    "section": "See Also",
    "text": "See Also\n\nOnline Resource File",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Canola"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Emerging.html",
    "href": "docs/Crops/Wheat/Phenology/Emerging.html",
    "title": "Emerging",
    "section": "",
    "text": "The Emerging phase in Wheat represents the developmental period from Germination to Emergence. It is influenced by sowing depth, a lag period before coleoptile elongation, and the elongation rate of the shoot.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Emerging"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Emerging.html#overview",
    "href": "docs/Crops/Wheat/Phenology/Emerging.html#overview",
    "title": "Emerging",
    "section": "Overview",
    "text": "Overview\nThe EmergingPhase model simulates the time between the Germination and Emergence stages.\n\nThis phase starts at Germination and ends at Emergence, when the seedling is considered to have emerged from the soil.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time to complete this phase is defined as:\n\n\\[\n\\text{Target} = \\text{ShootLag} + (\\text{SowingDepth} \\times \\text{ShootRate})\n\\]\nWhere:\n\nShootLag is a lag when coleoptile starting to elongate (°Cd) with default value of 40.0 °Cd,\nShootRate is the rate of shoot elongation (°Cd/mm) with default value of 1.5 °Cd/mm,\nSowingDepth is the depth at which the seed is sown (mm), taken from [Plant].SowingData.Depth.\n\nDeeper sowing results in longer emergence delays due to greater thermal time requirement.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Emerging"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Emerging.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/Emerging.html#cultivar-specific-parameters",
    "title": "Emerging",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].Emerging.ShootLag.FixedValue\nLag before coleoptile starts to elongate (°Cd)\n40.0\n\n\n[Phenology].Emerging.ShootRate.FixedValue\nRate of shoot elongation (°Cd/mm)\n1.5",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Emerging"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Emerging.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/Emerging.html#practical-example",
    "title": "Emerging",
    "section": "Practical Example",
    "text": "Practical Example\nThis table illustrates deeper sowing delays emergence due to higher thermal time requirements.\n\n\n\n\n\n\n\n\n\nSowing Depth (mm)\nShootLag (°Cd)\nShootRate (°Cd/mm)\nTarget Thermal Time (°Cd)\n\n\n\n\n40\n40.0\n1.5\n100.0\n\n\n50\n40.0\n1.5\n115.0\n\n\n60\n40.0\n1.5\n130.0",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Emerging"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Germinating.html",
    "href": "docs/Crops/Wheat/Phenology/Germinating.html",
    "title": "Germinating",
    "section": "",
    "text": "The Germinating is a phenological phase in Wheat used to represent the development period from Sowing to Germination. It determines whether the seed has germinated based on soil temperature and soil water.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Germinating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Germinating.html#overview",
    "href": "docs/Crops/Wheat/Phenology/Germinating.html#overview",
    "title": "Germinating",
    "section": "Overview",
    "text": "Overview\nThe GerminatingPhase Model is used to simulate the germination of wheat seeds. This phase begins when Plant Sowing occurs and ends when plant is germinated with conditions of soil temperature and soil water. See GerminatingPhase for more details.\n\nThe Minimum Soil Temperature is configured as zero by default, which means that the germination will not occur if the soil temperature is below zero,\nThe Soil Water Content should be more than Lower Limit for germination to occur.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Germinating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Germinating.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/Germinating.html#cultivar-specific-parameters",
    "title": "Germinating",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].Germinating.MinSoilTemperature.FixedValue\nMinimum soil temperature for germination (°C)\n0.0",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Germinating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/Germinating.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/Germinating.html#practical-example",
    "title": "Germinating",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is provided for the thermal time function.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Germinating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainFilling.html",
    "href": "docs/Crops/Wheat/Phenology/GrainFilling.html",
    "title": "GrainFilling",
    "section": "",
    "text": "The GrainFilling phase in Wheat represents the developmental period from MaximumGrainLength to EndGrainFill. It is influenced by thermal time only.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainFilling.html#overview",
    "href": "docs/Crops/Wheat/Phenology/GrainFilling.html#overview",
    "title": "GrainFilling",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase model simulates the time between the MaximumGrainLength and EndGrainFill stages.\n\nThis phase starts at MaximumGrainLength and ends at EndGrainFill, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function.\nThe Target thermal time is fixed as constant for this phase, with default value of 545.0 °Cd.:",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainFilling.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/GrainFilling.html#cultivar-specific-parameters",
    "title": "GrainFilling",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].GrainFilling.Target.FixedValue\nThermal time target during grain filling (°Cd)\n545.0",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/GrainFilling.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/GrainFilling.html#practical-example",
    "title": "GrainFilling",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "GrainFilling"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/HaunStage.html",
    "href": "docs/Crops/Wheat/Phenology/HaunStage.html",
    "title": "Haun Stage",
    "section": "",
    "text": "Haun Stage is defined as the number of leaf tips that have appeared on a cereal plant since emergence. It estimates from daily thermal time and phyllochron.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Haun Stage"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/HaunStage.html#overview",
    "href": "docs/Crops/Wheat/Phenology/HaunStage.html#overview",
    "title": "Haun Stage",
    "section": "Overview",
    "text": "Overview\nThe Haun Stage model simulates the appearance of new leaf tips on cereal crops, such as wheat, from the time the plant emerges until the flag leaf appears (Haun 1973). It calculates from daily thermal time and a cultivar-specific phyllochron, which is the thermal time required for each new leaf to appear.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Haun Stage"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/HaunStage.html#methodology",
    "href": "docs/Crops/Wheat/Phenology/HaunStage.html#methodology",
    "title": "Haun Stage",
    "section": "Methodology",
    "text": "Methodology\nThe Haun Stage is based on the biological principle that leaves appear at regular intervals, determined by temperature. Each day, the model calculates how much “thermal time” (accumulated heat) the plant has experienced. When enough thermal time has passed, a new leaf tip appears.\nThe daily increase in Haun Stage is calculated as:\n\\[\n\\Delta \\text{HS} = \\frac{\\text{TT}}{\\text{Ph}}\n\\]\nWhere:\n\n\\(\\text{TT}\\) is the amount of heat accumulated in a day (measured in degree-days).\n\\(\\text{Ph}\\) is the amount of thermal time needed for each new leaf to appear.\n\nThe model sums these daily increments from emergence until the flag leaf appears, for example, a Haun Stage of 5.3 means five leaves are fully visible and the sixth is partly emerged (30%).\nKey assumptions:\n\nLeaf appearance is driven mainly by temperature.\nEach variety has its own characteristic phyllochron.\nThe process is continuous, not stepwise, allowing for partial leaves.\n\nThis approach is supported by research showing that leaf appearance in cereals follows a predictable thermal pattern (Haun 1973).",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Haun Stage"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/HaunStage.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/HaunStage.html#cultivar-specific-parameters",
    "title": "Haun Stage",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\nno cultivar-specific parameters are used in the Haun Stage model.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Haun Stage"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/HaunStage.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/HaunStage.html#practical-example",
    "title": "Haun Stage",
    "section": "Practical Example",
    "text": "Practical Example\nSuppose a researcher wants to estimate when the flag leaf will appear in different wheat varieties. They set the phyllochron for each variety based on field data. For example, if a variety has a phyllochron of 120 °Cd and one day records 24 °Cd of thermal time:\n\\[\n\\Delta \\text{HaunStage} = \\frac{24}{120} = 0.2\n\\]\nAfter five days at this rate, the Haun Stage increases by 1.0, meaning one new leaf tip has appeared. By tracking Haun Stage over time, researchers can compare development rates between varieties or under different treatments, supporting breeding and agronomic decisions. The Haun Stage model tracks the number of leaf tips that have appeared on a cereal plant since emergence. It provides a continuous measure of crop development and is critical for predicting phenological stages and leaf-related processes.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "Haun Stage"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/LeavesInitiating.html",
    "href": "docs/Crops/Wheat/Phenology/LeavesInitiating.html",
    "title": "LeavesInitiating",
    "section": "",
    "text": "The LeavesInitiating phase in the Wheat model represents the developmental period from Emergence to DoubleRidge, driven by the expression of the Vrn1, Vrn2, and Vrn3 genes. This phase concludes when vernalisation is saturated, as predicted by the Cereal Anthesis Molecular Phenology (CAMP) model.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "LeavesInitiating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/LeavesInitiating.html#overview",
    "href": "docs/Crops/Wheat/Phenology/LeavesInitiating.html#overview",
    "title": "LeavesInitiating",
    "section": "Overview",
    "text": "Overview\nThe VernalisationPhase Model is used to simulate the progress of vernalisation requirements. This phase begins when Plant Emergence to DoubleRidge.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "LeavesInitiating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/LeavesInitiating.html#methodology",
    "href": "docs/Crops/Wheat/Phenology/LeavesInitiating.html#methodology",
    "title": "LeavesInitiating",
    "section": "Methodology",
    "text": "Methodology\nSee VernalisationPhase and CAMP model for details on how the vernalisation progress is calculated. Here is focusing on the parameters used in this phase, i.e. CAMP with the following parameters:\n\nTT: Daily thermal time\nHaunStage: Haun stage is the number of leaves on the main stem\nDeltaHaunStage: Change in Haun stage from the previous day\nBasePhyllochron: Base Phyllochron, the thermal time required for each new leaf to appear under standard conditions\nPpResponse: Photoperiod response for vernalisation\nColdVrnResponse: Function for cold temperature response driving Vrn1 expression\nEnvData: The controlled environmental conditions under which Final Leaf Number (FLN) observations were made\nFLNparams: Final leaf number (FLN) for a genotype under controlled environmental conditions\ncalcCAMPVrnRates: Function to calculate the Vrn1, Vrn2, and Vrn3 rates based on the above parameters\n\nThermal Time (TT)\nThe daily thermal time is based on SubDailyInterpolation with three cardinal temperature and ThreeHourAirTemperature interpolation method.\nHaun Stage (HaunStage) and Delta Haun Stage (DeltaHaunStage)\nHaun Stage (\\(HS\\)) and \\(\\Delta HS\\) is calculated from daily thermal time and a cultivar-specific phyllochron, which is the rate of leaf appearance.\nBase Phyllochron (BasePhyllochron)\nThe Base Phyllochron is defined as the thermal time required for each new leaf to appear under standard conditions with a default value of 120 °C·days.\nPhotoperiod Response (PpResponse)\nIn the CAMP model, the photoperiod response is used to calculate the Vrn2 expression.\n\n\n\n\n\nLeaf Stage Factor as a Function of Leaf Cohort Number\n\n\n\n\nCold Vernalisation Response (ColdVrnResponse)\nThe daily upregulation of Vrn1 from cold temperature counts for sub-daily temperature variations.\nThe hourly temperature is interpolated from the daily minimum and maximum temperatures using a sinusoidal method during sunlight hours and an exponential decline during nighttime hours (Goudriaan and Van Laar 1994).\nThe hourly upregulation of Vrn1 from cold temperature is calculated using a cold response function, with the following parameters:\n\n\n\n\n\n\n\n\nName\nDescription\nValue\n\n\n\n\nk\nExponential shape factor for cold temperature response.\n-0.17\n\n\ndeVernalisationTemp\nTemperature above which de-vernalisation occurs.\n20\n\n\ndeVernalisationRate\nRate of Vrn1 downregulation above the temperature threshold.\n0\n\n\n\ndeVernalisationRate is set to 0, indicating that there is no down-regulation of Vrn1 expression at temperatures above the de-vernalisation threshold (i.e. 20°C).\nThe upregulation of Vrn1 from cold at hourly temperature \\(T\\) is shown in the following plot.\n\n\n\n\n\nCold Vrn Response as a Function of Temperature\n\n\n\n\nFinally, the daily upregulation of Vrn1 from cold temperature is calculated by summing the hourly upregulation over the day using method in SubDailyInterpolation.\n\nNote: The hourly interpolation of temperature is different with three hourly interpolation method which is used in the Thermal Time.\n\nControlled Environment Conditions (EnvData)\nThe controlled environment conditions under which Final Leaf Number (FLN) observations were made include:\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\nVrnTreatTemp\nVernalisation treatment temperature (°C)\n6\n\n\nVrnTreatDuration\nDays of exposure to vernalising temperature\n60\n\n\nTreatmentPp_L\nPhotoperiod under long-day treatment (hours)\n16\n\n\nTtEmerge\nObserved thermal time from sowing to emergence (°C·days)\n90\n\n\n\nThese parameters are used in the FLNParameterEnvironment of CAMP.\nFinal leaf number (FLNparams)\nThe final leaf number (FLN) for a genotype are observed or estimated under four controlled environmental conditions, which are the key driver of progress to the DoubleRidge stage.\nThe four FLN parameters include:\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\nMinLN\nFinal Leaf Number under full vernalisation and long photoperiod (&gt;16h)\n8.3\n\n\nPpLN\nIncrease in FLN under short photoperiod (&lt;8h) following full vernalisation\n3.8\n\n\nVrnLN\nIncrease in FLN when un-vernalised and grown under short photoperiod\n5.0\n\n\nVxPLN\nChange in FLN from photoperiod effect under un-vernalised, long-day growth\n-2.0\n\n\n\nThese parameters are used in the FinalLeafNumberSet of CAMP. See FinalLeafNumberSet for details on how these parameters are used to calculate the final leaf number (FLN) for a genotype under controlled environmental conditions.\nCalculation of Vrn expression (calcCAMPVrnRates)\nThe internal function calcCAMPVrnRates is used to calculate the Vrn1, Vrn2, and Vrn3 rates based on the above parameters. It only requires an external parameter Base Phyllochron which is defined as the thermal time required for each new leaf to appear under standard conditions with a default value of 120 °C·days.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "LeavesInitiating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/LeavesInitiating.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/LeavesInitiating.html#cultivar-specific-parameters",
    "title": "LeavesInitiating",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nDefault Value\n\n\n\n\n[Phenology].CAMP.FLNparams.MinLN\nFinal Leaf Number under full vernalisation and long photoperiod\n8.3\n\n\n[Phenology].CAMP.FLNparams.PpLN\nIncrease in FLN under short photoperiod following full vernalisation\n3.8\n\n\n[Phenology].CAMP.FLNparams.VrnLN\nIncrease in FLN when un-vernalised and grown under short photoperiod\n5.0\n\n\n[Phenology].CAMP.FLNparams.VxPLN\nChange in FLN from photoperiod effect under un-vernalised, long-day growth\n-2.0\n\n\n[Phenology].CAMP.EnvData.VrnTreatTemp\nVernalisation treatment temperature (°C)\n6\n\n\n[Phenology].CAMP.EnvData.VrnTreatDuration\nDays of exposure to vernalising temperature\n60\n\n\n[Phenology].CAMP.EnvData.TreatmentPp_L\nPhotoperiod under long-day treatment (hours)\n16\n\n\n[Phenology].CAMP.EnvData.TtEmerge\nObserved thermal time from sowing to emergence (°C·days)\n90",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "LeavesInitiating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/LeavesInitiating.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/LeavesInitiating.html#practical-example",
    "title": "LeavesInitiating",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is provided here.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "LeavesInitiating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/LeavesInitiating.html#simulation-example",
    "href": "docs/Crops/Wheat/Phenology/LeavesInitiating.html#simulation-example",
    "title": "LeavesInitiating",
    "section": "Simulation Example",
    "text": "Simulation Example\nWe demonstrate progress of leaf initiation phase using example simulations for wheat. These simulations illustrate how Vrn expression progresses the development of wheat phenology.\nTwo cultivars, Emu_Rock and Sunlamb, are used in the example simulations to represent the very quick and very late maturity types, respectively (Celestina et al. 2023). The following table shows the FLN parameters for these two cultivars:\n\n\n\nParameter\nEmu_Rock\nSunlamb\n\n\n\n\n[Phenology].CAMP.FLNparams.MinLN\n6\n7\n\n\n[Phenology].CAMP.FLNparams.PpLN\n1\n5\n\n\n[Phenology].CAMP.FLNparams.VrnLN\n1\n10\n\n\n[Phenology].CAMP.FLNparams.VxPLN\n-1\n-5\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: FLN parameters for Emu_Rock and Sunlamb Cultivars\n\n\n\n\n\nThe vernalisation rate parameters are calculated for each cultivar using the calcCAMPVrnRates function at Sowing, and should be genotype-specific values. The following table shows the calculated parameters for Emu_Rock and Sunlamb cultivars:\n\n\n\n\nParameter\nEmu_Rock\nSunlamb\n\n\n\n\nBaseDVrnER\n0.37\n0.14\n\n\nBaseDVrnVeg\n0.34\n0.09\n\n\nMaxDVrnER\n0.57\n0.37\n\n\nMaxDVrnVeg\n0.49\n0.50\n\n\nPpVrn3FactER\n1.52\n2.70\n\n\nPpVrn3FactVeg\n2.69\n2.70\n\n\nMaxVrn2\n0.32\n0.22\n\n\nMethalationThreshold\n0.63\n1.04\n\n\nColdVrn1Fact\n4.86\n30.95\n\n\n\n\n\nTotal Vrn Expression\nThis plot shows the progress of the Vrn1 expression for the cultivar Sunlamb and Emu_Rock on the sowing date 1-May and 1-Jun. The LeavesInitiating phase is finished when Wheat.Phenology.CAMP.Vrn1 equal to 1 at vernalisation saturation.\n\n\n\n\n\n\n\n\nFigure 2: Vrn Expression from stage sowing to maximum spikelet primordia in Wheat Example 1.\n\n\n\n\n\nThe total \\(Vrn\\) expression is the sum of the three Vrn genes, i.e. \\(Vrn = Vrn_{\\text{base}} + Vrn1 + Vrn3 - Vrn2\\), and capped below \\(Vrn_{\\text{max}}\\). The following figure shows the Vrn expressions for three Vrn genes for very late cultivar Sunlambon the sowing date 1-May and 1-Jun.\n\n\n\n\n\n\n\n\nFigure 3: Vrn Expression from stage sowing to maximum spikelet primordia in Wheat Example 1. \\(Vrn_{base}\\), \\(Vrn1\\), and \\(Vrn3\\) are stacked at the y positive axis. \\(Vrn2\\) is shown as a negative value at the y negative axis. The black lines represent the total \\(Vrn\\) expression. The red lines represent the maximum \\(Vrn\\) expression.\n\n\n\n\n\n\n\nBase Vrn Expression \\(Vrn_{\\text{base}}\\)\n\n\nFinal Leaf Number\n\n\n\n\n\n\n\n\nFigure 4",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "LeavesInitiating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/ReadyForHarvesting.html",
    "href": "docs/Crops/Wheat/Phenology/ReadyForHarvesting.html",
    "title": "ReadyForHarvesting",
    "section": "",
    "text": "The ReadyForHarvesting phase in Wheat represents the last phase after HarvestRipe.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "ReadyForHarvesting"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/ReadyForHarvesting.html#overview",
    "href": "docs/Crops/Wheat/Phenology/ReadyForHarvesting.html#overview",
    "title": "ReadyForHarvesting",
    "section": "Overview",
    "text": "Overview\nThe EndPhase model simulates last phase after HarvestRipe.\n\nThis phase starts at EndGrainFill and ends at HarvestRipe, when the grain is considered to be fully ripe.\nThe model uses daily Thermal Time, retrieved from the [Phenology].ThermalTime function. But it does not use here.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "ReadyForHarvesting"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/ReadyForHarvesting.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/ReadyForHarvesting.html#cultivar-specific-parameters",
    "title": "ReadyForHarvesting",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\nNo cultivar-specific parameters are defined for this phase.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "ReadyForHarvesting"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/ReadyForHarvesting.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/ReadyForHarvesting.html#practical-example",
    "title": "ReadyForHarvesting",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "ReadyForHarvesting"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/StemElongating.html",
    "href": "docs/Crops/Wheat/Phenology/StemElongating.html",
    "title": "StemElongating",
    "section": "",
    "text": "The StemElongating phase in Wheat represents the developmental period from MaximumSpikeletPrimordia to FlagLeafAppearance. The Final leaf number is fixed at Terminal Spikelet and leaves continue to appear at a rate set by thermal time and phyllochron until flag leaf ligule appears and this phase is completed.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "StemElongating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/StemElongating.html#overview",
    "href": "docs/Crops/Wheat/Phenology/StemElongating.html#overview",
    "title": "StemElongating",
    "section": "Overview",
    "text": "Overview\nThe LeafAppearancePhase model simulates the time between the MaximumSpikeletPrimordia and FlagLeafAppearance stages.\n\nThis phase starts at MaximumSpikeletPrimordia and ends at FlagLeafAppearance.\nThe Final leaf number is fixed at Terminal Spikelet (i.e. stage MaximumSpikeletPrimordia) and leaves continue to appear at a rate set by thermal time and phyllochron until flag leaf ligule appears and this phase is completed.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "StemElongating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/StemElongating.html#cultivar-specific-parameters",
    "href": "docs/Crops/Wheat/Phenology/StemElongating.html#cultivar-specific-parameters",
    "title": "StemElongating",
    "section": "Cultivar-Specific Parameters",
    "text": "Cultivar-Specific Parameters\n\nno cultivar-specific parameters available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "StemElongating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/StemElongating.html#practical-example",
    "href": "docs/Crops/Wheat/Phenology/StemElongating.html#practical-example",
    "title": "StemElongating",
    "section": "Practical Example",
    "text": "Practical Example\n\nno practical example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "StemElongating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/StemElongating.html#simulation-example",
    "href": "docs/Crops/Wheat/Phenology/StemElongating.html#simulation-example",
    "title": "StemElongating",
    "section": "Simulation Example",
    "text": "Simulation Example\n\nno simulation example available",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology",
      "StemElongating"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/index.html",
    "href": "docs/Crops/Wheat/Phenology/index.html",
    "title": "Phenology",
    "section": "",
    "text": "The Phenology model in APSIM NG simulates the development of wheat plants.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/index.html#thermal-time",
    "href": "docs/Crops/Wheat/Phenology/index.html#thermal-time",
    "title": "Phenology",
    "section": "Thermal Time",
    "text": "Thermal Time\nDaily Thermal Time is based on SubDailyInterpolation with three cardinal temperature and ThreeHourAirTemperature interpolation method.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/index.html#photoperiod",
    "href": "docs/Crops/Wheat/Phenology/index.html#photoperiod",
    "title": "Phenology",
    "section": "Photoperiod",
    "text": "Photoperiod\nThe daily photoperiod is calculated using the PhotoperiodFunction with 6 degrees twilight.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/index.html#phyllochron",
    "href": "docs/Crops/Wheat/Phenology/index.html#phyllochron",
    "title": "Phenology",
    "section": "Phyllochron",
    "text": "Phyllochron\nThe Phyllochron is the interval between the appearance of successive leaves on the main stem of wheat. It is determined by base phyllochron, leaf stage factor, and photoperiod effect.\nThe Haun Stage is defined as the number of leaf tips that have appeared on a cereal plant since emergence. It estimates from daily thermal time and phyllochron.",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Phenology/index.html#stages-and-phases",
    "href": "docs/Crops/Wheat/Phenology/index.html#stages-and-phases",
    "title": "Phenology",
    "section": "Stages and Phases",
    "text": "Stages and Phases\nThe numerical system is used to represent the development of wheat plants starting from 1. The stages are:\n\n\n\n\n\n\n\n\nStage\nName\nDescription\n\n\n\n\n1\nSowing\nSeeds are planted in the soil\n\n\n2\nGermination\nSeeds absorb water and begin to sprout\n\n\n3\nEmergence\nSeedlings break through the soil surface\n\n\n4\nDoubleRidge\nFormation of double ridges in the shoot apex\n\n\n5\nMaximumSpikeletPrimordia\nMaximum number of spikelets is determined\n\n\n6\nFlagLeafAppearance\nThe last leaf (flag leaf) appears\n\n\n7\nHeadEmergence\nWheat head emerges from the flag leaf sheath\n\n\n8\nAnthesis\nFlowering; pollen is released\n\n\n9\nMaximumGrainLength\nGrains reach their maximum length\n\n\n10\nEndGrainFill\nGrain filling is completed\n\n\n11\nHarvestRipe\nGrains are mature and ready for harvest\n\n\n\nPhases are used to represent the development between two stages. The phases are:\n\n\n\nOrder\nName\nFrom\nTo\n\n\n\n\n1\nGerminating\nSowing\nGermination\n\n\n2\nEmerging\nGermination\nEmergence\n\n\n3\nLeavesInitiating\nEmergence\nDoubleRidge\n\n\n4\nSpikeletsDifferentiating\nDoubleRidge\nMaximumSpikeletPrimordia\n\n\n5\nStemElongating\nMaximumSpikeletPrimordia\nFlagLeafAppearance\n\n\n6\nHeading\nFlagLeafAppearance\nHeadEmergence\n\n\n7\nFlowering\nHeadEmergence\nAnthesis\n\n\n8\nGrainExpanding\nAnthesis\nMaximumGrainLength\n\n\n9\nGrainFilling\nMaximumGrainLength\nEnd Grain Fill\n\n\n10\nGrainRipening\nEnd Grain Fill\nHarvestRipe\n\n\n11\nReadyForHarvesting\nHarvestRipe",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/Traits/index.html",
    "href": "docs/Crops/Wheat/Traits/index.html",
    "title": "Traits",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\n\n\n\n\n\nCO2 for Wheat\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Traits"
    ]
  },
  {
    "objectID": "docs/Crops/Wheat/grain/index.html",
    "href": "docs/Crops/Wheat/grain/index.html",
    "title": "Grain",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\n\n\n\n\n\nGrain Nitrogen Filling Rate or Nitrogen Demand (Wheat)\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home",
      "Docs",
      "Crops",
      "Wheat",
      "Grain"
    ]
  },
  {
    "objectID": "docs/Crops/index.html",
    "href": "docs/Crops/index.html",
    "title": "Crops",
    "section": "",
    "text": "This section contains the documentation for Crops models in APSIM Next Generation. The Crops models are released as part of the APSIM Next Generation. The model is defined under Resources folder in the APSIM Next Generation repository.\nFor each crop, the documentation is organised as the original model structure defined in the JSON file.\n\n\n\n  \nExplore Barley →\n\n\n\n\n\n\n0% complete\n\n\n\n  \nExplore Canola →\n\n\n\n\n\n\n5% complete\n\n\n\n  \nExplore Wheat →\n\n\n\n\n\n\n10% complete",
    "crumbs": [
      "Home",
      "Docs",
      "Crops"
    ]
  },
  {
    "objectID": "docs/Models/Events.html",
    "href": "docs/Models/Events.html",
    "title": "Events",
    "section": "",
    "text": "This page lists all the events that can be triggered in APSIM NG. Events are used to signal when certain actions should be performed within the simulation, allowing for a structured and organized approach to model execution.\nEvents are listed according the model that triggers them.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Events"
    ]
  },
  {
    "objectID": "docs/Models/Events.html#simulation",
    "href": "docs/Models/Events.html#simulation",
    "title": "Events",
    "section": "Simulation",
    "text": "Simulation\n\n\n\n\n\n\n\nEvent\nDescription\n\n\n\n\nCommencing\nInvoked when simulation is about to commence before DoCommence event, giving all models a chance to initialise their state.\n\n\nDoCommence\nInvoked to signal start of simulation after Commencing event.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Events"
    ]
  },
  {
    "objectID": "docs/Models/Events.html#clock",
    "href": "docs/Models/Events.html#clock",
    "title": "Events",
    "section": "Clock",
    "text": "Clock\n\n\n\n\n\n\n\nEvent\nDescription\n\n\n\n\nDoActualPlantGrowth\nOccurs each day to do actual plant growth.\n\n\nDoActualPlantPartioning\nOccurs each day to do nutrient allocations.\n\n\nDoCatchYesterday\nOccurs first each day to allow yesterdays values to be caught.\n\n\nDoDailyInitialisation\nOccurs each day to do daily updates to models.\n\n\nDoDCAPST\nOccurs each day when dcaps performs its calculations. This must happen between DoPotentialPlantGrowth and DoPotentialPlantPartitioning.\n\n\nDoEndPasture\nOccurs after pasture growth and sends material to SOM.\n\n\nDoEnergyArbitration\nOccurs when the canopy energy balance needs to be calculated with MicroClimate.\n\n\nDoFertiliserApplications\nInvoked to perform all fertiliser applications.\n\n\nDoInitialSummary\nOccurs each day to make the initial summary.\n\n\nDoLifecycle\nOccurs each day to process a Pest and Disease lifecycle object.\n\n\nDoManagement\nOccurs each day to do management actions and changes.\n\n\nDoManagementCalculations\nOccurs each day after the simulation is done. Does management calculations.\n\n\nDoNutrientArbitration\nOccurs each day to do nutrient arbitration.\n\n\nDoPastureWater\nInitiates water calculations for the Pasture model.\n\n\nDoPestDiseaseDamage\nOccurs to do Pest/Disease actions.\n\n\nDoPhenology\nOccurs each day to perform phenology.\n\n\nDoPotentialPlantGrowth\nOccurs each day to do potential growth.\n\n\nDoPotentialPlantPartioning\nOccurs each day to do the water limited dm allocations. Water constraints to growth are accounted for in the calculation of DM supply and does initial N calculations to work out how much N uptake is required to pass to SoilArbitrator.\n\n\nDoReport\nOccurs at end of each day.\n\n\nDoReportCalculations\nOccurs when [do report calculations].\n\n\nDoSoilErosion\nOccurs to tell soil erosion to perform its calculations.\n\n\nDoSoilOrganicMatter\nOccurs each day to perform daily calculations of organic soil matter.\n\n\nDoSoilTemperature\nOccurs to perform soil temperature calculations to do solute processes.\n\n\nDoSoilWaterMovement\nOccurs each day to do water calculations such as irrigation, swim, water balance etc.\n\n\nDoSolute\nOccurs each day.\n\n\nDoStock\nOccurs each day to process stock methods in GrazPlan Stock.\n\n\nDoSurfaceOrganicMatterDecomposition\nOccurs each day to do the daily residue decomposition.\n\n\nDoSurfaceOrganicMatterPotentialDecomposition\nOccurs each day to perform daily calculations of organic soil matter.\n\n\nDoUpdate\nOccurs near end of each day to do checks and finalising.\n\n\nDoUpdateWaterDemand\nOccurs each day to do daily growth increment of total plant biomass.\n\n\nDoWaterArbitration\nOccurs each day to do water arbitration.\n\n\nDoWeather\nOccurs each day to calculate weather.\n\n\nEndOfDay\nOccurs at end of each day.\n\n\nEndOfMonth\nOccurs at end of each month.\n\n\nEndOfSimulation\nOccurs at end of simulation.\n\n\nEndOfWeek\nOccurs at end of each week.\n\n\nEndOfYear\nOccurs at end of each year.\n\n\nFinalInitialise\nFinal Initialise event. Occurs once at start of simulation.\n\n\nPartitioningComplete\nOccurs each day to finish partitioning.\n\n\nPlantSowing\nThis event is triggered when a plant is sown. It allows the model to initialize or reset any relevant state information related to the sowing process.\n\n\nPrePhenology\nOccurs between DoWaterArbitration and DoPhenology. Performs sorghum final leaf no calcs.\n\n\nStartOfDay\nOccurs at start of each day.\n\n\nStartOfFirstDay\nOccurs once at the start of the first day of the simulation.\n\n\nStartOfMonth\nOccurs at start of each month.\n\n\nStartOfSimulation\nOccurs once at the start of the simulation.\n\n\nStartOfWeek\nOccurs at start of each week.\n\n\nStartOfYear\nOccurs at start of each year.\n\n\nCLEMAgeResources\nCLEM Age your resources (eg. Decompose Fodder, Age your labour, Age your Animals).\n\n\nCLEMAnimalBreeding\nCLEM Do Animal (Ruminant and Other) Breeding and milk calculations.\n\n\nCLEMAnimalBuy\nCLEM buy animals including transporting and labour.\n\n\nCLEMAnimalDeath\nCLEM Do Animal (Ruminant and Other) death.\n\n\nCLEMAnimalManage\nCLEM Do Animal (Ruminant and Other) Herd Management (adjust breeders and sires etc.).\n\n\nCLEMAnimalMark\nCLEM Do animal marking so complete before undertaking management decisions.\n\n\nCLEMAnimalMilking\nCLEM Do Animal (Ruminant and Other) milking.\n\n\nCLEMAnimalMilkProduction\nCLEM Calculate Animals (Ruminant and Other) milk production.\n\n\nCLEMAnimalSell\nCLEM sell animals to market including transporting and labour.\n\n\nCLEMAnimalStock\nCLEM stock animals to pasture availability or other metrics.\n\n\nCLEMAnimalWeightGain\nCLEM Calculate Animals(Ruminant and Other) weight gain.\n\n\nCLEMCalculateEcologicalState\nCLEM Calculate ecological state after all deaths and before management.\n\n\nCLEMCalculateManure\nRequest and allocate resources to all Activities based on UI Tree order of priority. Some activities will obtain resources here and perform actions later.\n\n\nCLEMCollectManure\nRequest and allocate resources to all Activities based on UI Tree order of priority. Some activities will obtain resources here and perform actions later.\n\n\nCLEMDetachPasture\nCLEM detach pasture.\n\n\nCLEMDoCutAndCarry\nCLEM cut and carry.\n\n\nCLEMEndOfTimeStep\nCLEM end of timestep event.\n\n\nCLEMFinalizeTimeStep\nCLEM finalize time-step before end.\n\n\nCLEMGetResourcesRequired\nRequest and perform the collection of manure after resources are allocated and manure produced in time-step.\n\n\nCLEMHerdSummary\nCLEM event to calculate monthly herd summary.\n\n\nCLEMInitialiseActivity\nCLEM initialise Activity occurs once at start of simulation.\n\n\nCLEMInitialiseResource\nCLEM initialise Resources occurs once at start of simulation.\n\n\nCLEMPastureReady\nCLEM pasture has been added and is ready for use.\n\n\nCLEMPotentialIntake\nGet potential intake. This includes suckling milk consumption.\n\n\nCLEMStartOfTimeStep\nCLEM start of timestep event.\n\n\nCLEMUpdateLabourAvailability\nCLEM set labour availability after start of timestep and financial considerations.\n\n\nCLEMUpdatePasture\nCLEM update pasture.\n\n\nCLEMValidate\nCLEM validate all data entry.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Events"
    ]
  },
  {
    "objectID": "docs/Models/Events.html#germinatingphase",
    "href": "docs/Models/Events.html#germinatingphase",
    "title": "Events",
    "section": "GerminatingPhase",
    "text": "GerminatingPhase\n\n\n\nEvent\nDescription\n\n\n\n\nSeedImbibed\nThis event is raised when germination occurs by GerminatingPhase, signaling other models or processes to begin their activities related to the germinated seed.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Events"
    ]
  },
  {
    "objectID": "docs/Models/Events.html#phenology",
    "href": "docs/Models/Events.html#phenology",
    "title": "Events",
    "section": "Phenology",
    "text": "Phenology\n\n\n\n\n\n\n\nEvent\nPurpose\n\n\n\n\nPhaseChanged\nIndicates a new phase has started\n\n\nPlantEmerged\nSignals that the emergence phase has been completed\n\n\nStageWasReset\nSignals a manual reset of stage via SetToStage()\n\n\nPostPhenology\nRaised after daily phenological timestep completes",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Events"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AddFunction.html",
    "href": "docs/Models/Functions/AddFunction.html",
    "title": "AddFunction",
    "section": "",
    "text": "The AddFunction is a utility function that returns the sum of values from all of its child functions.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AddFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AddFunction.html#overview",
    "href": "docs/Models/Functions/AddFunction.html#overview",
    "title": "AddFunction",
    "section": "Overview",
    "text": "Overview\nThe AddFunction is used to sum up multiple values for a mathematical equation. It summarises values of all children functions and returns the total sum. This is useful when you need to combine multiple traits or parameters into a single value for further calculations in plant growth models.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AddFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AddFunction.html#events",
    "href": "docs/Models/Functions/AddFunction.html#events",
    "title": "AddFunction",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened for by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AddFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AddFunction.html#properties",
    "href": "docs/Models/Functions/AddFunction.html#properties",
    "title": "AddFunction",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\nNo read-only reportable properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AddFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AddFunction.html#user-interface",
    "href": "docs/Models/Functions/AddFunction.html#user-interface",
    "title": "AddFunction",
    "section": "User Interface",
    "text": "User Interface\nAddFunction can be added into the model tree by right-clicking on a parent node and selecting “Add Model…”, and then search Addfunction in the Filter Box. A symbol for the AddFunction is displayed in the user interface to represent the function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AddFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AddFunction.html#practical-example",
    "href": "docs/Models/Functions/AddFunction.html#practical-example",
    "title": "AddFunction",
    "section": "Practical Example",
    "text": "Practical Example\nThe target thermal time from germination to emergence in the wheat model is determined by ShootLag (\\(ShootLag\\)), Sowing Depth (\\(SowingDepth\\)), and Shoot Rate (\\(ShootRate\\)).\n\\[\nTT = ShootLag + (SowingDepth \\times ShootRate)\n\\]\nThe AddFunction is used to sum these two values to get the total target thermal time in the equation above.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AddFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/AddFunction.html#see-also",
    "href": "docs/Models/Functions/AddFunction.html#see-also",
    "title": "AddFunction",
    "section": "See Also",
    "text": "See Also\n\nSource code: AddFunction.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "AddFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html",
    "href": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html",
    "title": "Daily Nitrogen Demand for Storage Organs",
    "section": "",
    "text": "The StorageNDemandFunction calculates the nitrogen (N) demand for storage in a plant organ, aiming to bring the organ’s N content up to its maximum nitrogen concentration.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DemandFunctions",
      "Daily Nitrogen Demand for Storage Organs"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#overview",
    "href": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#overview",
    "title": "Daily Nitrogen Demand for Storage Organs",
    "section": "Overview",
    "text": "Overview\nThis function determines the additional N required for storage after meeting the structural and metabolic N demands. It ensures that the organ’s N content does not exceed its maximum nitrogen concentration.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DemandFunctions",
      "Daily Nitrogen Demand for Storage Organs"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#inputs",
    "href": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#inputs",
    "title": "Daily Nitrogen Demand for Storage Organs",
    "section": "Inputs",
    "text": "Inputs\n\nmaxNConc: A IFunction for maximum nitrogen concentration which the organ can achieve.\nnitrogenDemandSwitch: A switch (typically 0 or 1) to modulate N demand based on environmental or physiological conditions. For example, nitrogen demand of wheat stem is switched on from Emergence to MaximumGrainLength stages, and switched off afterwards.\nparentOrgan: The organ that implements the IArbitration interface, i.e. an organ which StorageNDemandFunction attached to, which provides access to the organ’s properties such as live weight and current N content.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DemandFunctions",
      "Daily Nitrogen Demand for Storage Organs"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#methodology",
    "href": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#methodology",
    "title": "Daily Nitrogen Demand for Storage Organs",
    "section": "Methodology",
    "text": "Methodology\nThe potential biomass after potential allocation is calculated as biomass at previous day (\\(DM_{\\text{Live}, i-1}\\)) plus the potential allocation to the organ (\\(A_{\\text{P}, i}\\)): \\[\nDM_{\\text{Live}, i} = DM_{\\text{Live}, i-1} + A_{\\text{P}, i}\n\\]\nThe maximum nitrogen content (potential) at day \\(i\\) is calculated as\n\\[\nN_{\\text{Live}, i} = C_{\\text{N, max}} \\times DM_{\\text{Live}, i}\n\\]\nThe nitrogen demand for storage is then calculated as the difference between the maximum nitrogen content and the current nitrogen content in the live biomass, adjusted by structural and metabolic demands:\n\\[\nD_{\\text{N, Storage}} = N_{\\text{Live}, i} - N_{\\text{Live}, i-1} - D_{\\text{N, Structural}} - D_{\\text{N, Metabolic}}\n\\]\nWhere:\n\n\\(D_{\\text{N, Storage}}\\): Nitrogen demand for storage at day \\(i\\).\n\\(N_{\\text{Live}, i}\\): Nitrogen content in the live biomass at day \\(i\\).\n\\(N_{\\text{Live}, i-1}\\): Nitrogen content in the live biomass at the previous day (\\(i-1\\)).\n\\(D_{\\text{N, Structural}}\\): Nitrogen demand for structural functions at day \\(i\\).\n\\(D_{\\text{N, Metabolic}}\\): Nitrogen demand for metabolic functions at day \\(i\\).\n\nImplementation Details\n\nThe function is part of the Models.Functions.DemandFunctions namespace.\nIt implements the IFunction interface, allowing it to be used within the APSIM model framework.\nDuring simulation commencement, it identifies its parent organ implementing the IArbitration interface to access necessary properties.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DemandFunctions",
      "Daily Nitrogen Demand for Storage Organs"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#events",
    "href": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#events",
    "title": "Daily Nitrogen Demand for Storage Organs",
    "section": "Events",
    "text": "Events\nEvents Listened For\nThese are signals or notifications that the function listens for from other parts of the simulation:\n\n\n\nEvent\nPurpose\n\n\n\n\nCommencing\nGet parent organ from simulations\n\n\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DemandFunctions",
      "Daily Nitrogen Demand for Storage Organs"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#properties",
    "href": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#properties",
    "title": "Daily Nitrogen Demand for Storage Organs",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nValue\ndouble\nStorage demands for nitrogen (N) in the organ",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DemandFunctions",
      "Daily Nitrogen Demand for Storage Organs"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#user-interface",
    "href": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#user-interface",
    "title": "Daily Nitrogen Demand for Storage Organs",
    "section": "User Interface",
    "text": "User Interface\nStorageNDemandFunction can be added as a child of a NutrientDemandFunctions node in the model tree. Right-click the parent node, select “Add Model…”, and search for StorageNDemandFunction in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DemandFunctions",
      "Daily Nitrogen Demand for Storage Organs"
    ]
  },
  {
    "objectID": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#practical-example",
    "href": "docs/Models/Functions/DemandFunctions/StorageNDemandFunction.html#practical-example",
    "title": "Daily Nitrogen Demand for Storage Organs",
    "section": "Practical Example",
    "text": "Practical Example\n\nEnsure that maxNConc and nitrogenDemandSwitch are properly defined within the organ’s model to avoid calculation errors.\nThis function is typically used in conjunction with structural and metabolic N demand functions to comprehensively model an organ’s N requirements.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "DemandFunctions",
      "Daily Nitrogen Demand for Storage Organs"
    ]
  },
  {
    "objectID": "docs/Models/Functions/HourlySinPpAdjusted.html",
    "href": "docs/Models/Functions/HourlySinPpAdjusted.html",
    "title": "HourlySinPpAdjusted",
    "section": "",
    "text": "The HourlySinPpAdjusted function provides hourly estimates of air temperature by interpolating between daily maximum and minimum temperatures using a sinusoidal method during sunlight hours and an exponential decline during nighttime hours (Goudriaan and Van Laar 1994).",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "HourlySinPpAdjusted"
    ]
  },
  {
    "objectID": "docs/Models/Functions/HourlySinPpAdjusted.html#overview",
    "href": "docs/Models/Functions/HourlySinPpAdjusted.html#overview",
    "title": "HourlySinPpAdjusted",
    "section": "Overview",
    "text": "Overview\nThis model estimates hourly air temperature (Ta) from daily minimum (Tmin) and maximum (Tmax) temperatures and day length (d). The interpolation approach follows the method described by (Goudriaan and Van Laar 1994), where:\n\nDuring sunlight hours, temperature follows a sinusoidal curve fitted between Tmin and Tmax,\nDuring night hours, temperature declines exponentially from sunset to next day’s sunrise minimum,\nSunrise (Hsrise) is assumed at 12 − d/2 and sunset (Hsset) is calculated accordingly.\n\nIf a Controlled Environment (CE) module is linked, the model will use actual hourly air temperatures provided by CE instead of calculating them.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "HourlySinPpAdjusted"
    ]
  },
  {
    "objectID": "docs/Models/Functions/HourlySinPpAdjusted.html#inputs",
    "href": "docs/Models/Functions/HourlySinPpAdjusted.html#inputs",
    "title": "HourlySinPpAdjusted",
    "section": "Inputs",
    "text": "Inputs\n\nMetData (Required): A IWeather model for maximum air minimum and maximum temperature from weather data, i.e. a Weather model is required in the simulation to provide daily maximum and minimum temperatures.\nCE (ControlledEnvironment, optional):\nIf present, overrides the interpolated sub-daily values using provided hourly temperature data (SubDailyTemperature). This is used in controlled environment simulations (e.g., growth chambers) where actual hourly measurements are available.\nDaylength (d):\nComputed internally via MetData.CalculateDayLength(-6) to define the daylight duration (based on -6° sun angle, commonly used in agriculture to define twilight start and end).\nSunrise (Hsrise) and Sunset (Hsset):\nCalculated using MetData.CalculateSunRise() and MetData.CalculateSunSet(). Used to define the time range for each temperature estimation period (A–D).\nTmaxB / TminA:\nTmax from the previous day and Tmin from the next day, used to estimate temperatures across midnight and sunset transitions.\nP:\nShape factor constant (set to 1.5) to determine the shift of maximum temperature from solar noon.\nTC:\nTime constant (set to 4.0) controlling the exponential cooling rate during the night.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "HourlySinPpAdjusted"
    ]
  },
  {
    "objectID": "docs/Models/Functions/HourlySinPpAdjusted.html#methodology",
    "href": "docs/Models/Functions/HourlySinPpAdjusted.html#methodology",
    "title": "HourlySinPpAdjusted",
    "section": "Methodology",
    "text": "Methodology\nHourly estimates of air temperature (Ta) are interpolated from daily maximum (Tmax), minimum (Tmin) temperatures and daylength (d) using the method of (Goudriaan and Van Laar 1994). The calculation divides the 24-hour day into four periods based on sunrise and sunset:\n\nPeriod A: Midnight to Sunrise (Th &lt; Hsrise)\n\nTemperature is modeled as an exponential decline from the temperature at the previous day’s sunset (\\(Tsset\\)) down to the minimum temperature (Tmin) at sunrise. The hour of sunrise is denoted as \\(H_{srise}\\), and sunset as \\(H_{sset}\\). The temperature \\(T_a\\) at hour \\(Th\\) in this period is given by:\n\\[\nT_a = \\frac{T_{min} - T_{sset} \\cdot e^{-\\frac{n}{TC}} + (T_{sset} - T_{min}) \\cdot e^{-\\frac{(Th + 24 - H_{sset})}{TC}}}{1 - e^{-\\frac{n}{TC}}}\n\\]\nwhere\n\\[\nT_{sset} = T_{min} + (T_{maxB} - T_{min}) \\cdot \\sin\\left(\\frac{\\pi d}{d + 2P}\\right)\n\\]\nand\n\\[\nn = 24 - d\n\\]\nHere, \\(T_{maxB}\\) is the previous day’s maximum temperature, \\(P\\) and \\(TC\\) are constants (1.5 and 4.0 respectively).\n\nPeriod B: Sunrise to Tmax ( \\(H_{srise} \\leq Th &lt; 12 + P\\) )\n\nDuring sunlight hours, the temperature follows a sinusoidal curve rising from \\(T_{min}\\) at sunrise to \\(T_{max}\\) at hour \\(12 + P\\):\n\\[\nT_a = T_{min} + (T_{max} - T_{min}) \\cdot \\sin\\left(\\frac{\\pi (Th - H_{srise})}{d + 2P}\\right)\n\\]\n\nPeriod C: Tmax to Sunset ( \\(12 + P \\leq Th &lt; H_{sset}\\) )\n\nThe temperature follows a sinusoidal decline from \\(T_{max}\\) to the next day’s minimum temperature \\(T_{minA}\\):\n\\[\nT_a = T_{minA} + (T_{max} - T_{minA}) \\cdot \\sin\\left(\\frac{\\pi (Th - H_{srise})}{d + 2P}\\right)\n\\]\n\nPeriod D: Sunset to Midnight ( \\(Th \\geq H_{sset}\\) )\n\nAfter sunset, temperature exponentially declines from the temperature at sunset \\(T_{sset}\\) to the minimum temperature at sunrise. The temperature is computed as:\n\\[\nT_{sset} = T_{minA} + (T_{max} - T_{minA}) \\cdot \\sin\\left(\\frac{\\pi d}{d + 2P}\\right)\n\\]\n\\[\nT_a = \\frac{T_{minA} - T_{sset} \\cdot e^{-\\frac{n}{TC}} + (T_{sset} - T_{minA}) \\cdot e^{-\\frac{(Th - H_{sset})}{TC}}}{1 - e^{-\\frac{n}{TC}}}\n\\]\n\n\n\n\n\n\n\n\nSymbol\nDescription\nTypical Value / Units\n\n\n\n\nConstants\n\n\n\n\n\\(P\\)\nShape factor for Tmax shift\n1.5\n\n\n\\(TC\\)\nExponential cooling time constant\n4.0\n\n\nVariables\n\n\n\n\n\\(T_{min}\\)\nDaily minimum temperature\n°C\n\n\n\\(T_{max}\\)\nDaily maximum temperature\n°C\n\n\n\\(T_{minA}\\)\nNext day minimum temperature\n°C\n\n\n\\(T_{maxB}\\)\nPrevious day maximum temperature\n°C\n\n\n\\(d\\)\nDay length\nhours\n\n\n\\(H_{srise}\\)\nHour of sunrise\nhours (0–24)\n\n\n\\(H_{sset}\\)\nHour of sunset\nhours (0–24)\n\n\n\\(Th\\)\nCurrent hour\nhours (0–23)\n\n\n\\(n\\)\nNight length (\\(n = 24 - d\\))\nhours\n\n\n\nThis methodology ensures a realistic diurnal temperature profile by combining sinusoidal interpolation during daylight and exponential decay at night, adjusted for actual daylength and temperature extremes.\n\nIf \\(T_{minA}\\) or \\(T_{maxB}\\) are not provided, the model will use the current day’s minimum or maximum temperatures, e.g. in the beginning or ending of simulation without weather data.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "HourlySinPpAdjusted"
    ]
  },
  {
    "objectID": "docs/Models/Functions/HourlySinPpAdjusted.html#events",
    "href": "docs/Models/Functions/HourlySinPpAdjusted.html#events",
    "title": "HourlySinPpAdjusted",
    "section": "Events",
    "text": "Events\nEvents Listened For\nThese are signals or notifications that the function listens for from other parts of the simulation:\n\n\n\nEvent\nPurpose\n\n\n\n\nCommencing\nNothing to calculate at the start of the simulation\n\n\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "HourlySinPpAdjusted"
    ]
  },
  {
    "objectID": "docs/Models/Functions/HourlySinPpAdjusted.html#properties",
    "href": "docs/Models/Functions/HourlySinPpAdjusted.html#properties",
    "title": "HourlySinPpAdjusted",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nOutputValueType\nstring\nThe type of variable for sub-daily values as air temperature",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "HourlySinPpAdjusted"
    ]
  },
  {
    "objectID": "docs/Models/Functions/HourlySinPpAdjusted.html#user-interface",
    "href": "docs/Models/Functions/HourlySinPpAdjusted.html#user-interface",
    "title": "HourlySinPpAdjusted",
    "section": "User Interface",
    "text": "User Interface\nHourlySinPpAdjusted can be added as a child of a SubDailyInterpolation node in the model tree. Right-click the parent node, select “Add Model…”, and search for HourlySinPpAdjusted in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "HourlySinPpAdjusted"
    ]
  },
  {
    "objectID": "docs/Models/Functions/HourlySinPpAdjusted.html#practical-example",
    "href": "docs/Models/Functions/HourlySinPpAdjusted.html#practical-example",
    "title": "HourlySinPpAdjusted",
    "section": "Practical Example",
    "text": "Practical Example\nWe estimate hourly air temperature (\\(T_h\\)) using a sinusoidal + exponential method, with the following inputs:\n\n\n\n\n\n\n\n\nParameter\nValue\nDescription\n\n\n\n\n\\(T_\\text{min}\\)\n\\(10^\\circ\\)C\nToday’s minimum temperature\n\n\n\\(T_\\text{max}\\)\n\\(30^\\circ\\)C\nToday’s maximum temperature\n\n\n\\(T_\\text{maxB}\\)\n\\(28^\\circ\\)C\nYesterday’s maximum temperature\n\n\n\\(T_\\text{minA}\\)\n\\(12^\\circ\\)C\nTomorrow’s minimum temperature\n\n\nDaylength \\(d\\)\n12 hours\nLength of daylight\n\n\nSunrise\n6\nHour of sunrise\n\n\nSunset\n18\nHour of sunset\n\n\n\\(P\\)\n1.5\nShape factor constant\n\n\n\\(T_c\\)\n4.0\nExponential cooling constant\n\n\n\nThe following figure shows the estimated hourly air temperature profile for a day with these inputs and parameters:",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "HourlySinPpAdjusted"
    ]
  },
  {
    "objectID": "docs/Models/Functions/HourlySinPpAdjusted.html#see-also",
    "href": "docs/Models/Functions/HourlySinPpAdjusted.html#see-also",
    "title": "HourlySinPpAdjusted",
    "section": "See Also",
    "text": "See Also\n\nSource code: HourlySinPpAdjusted.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "HourlySinPpAdjusted"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MinimumFunction.html",
    "href": "docs/Models/Functions/MinimumFunction.html",
    "title": "MinimumFunction",
    "section": "",
    "text": "The MinimumFunction is a utility function that returns the minimum value from all of its child functions.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MinimumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MinimumFunction.html#overview",
    "href": "docs/Models/Functions/MinimumFunction.html#overview",
    "title": "MinimumFunction",
    "section": "Overview",
    "text": "Overview\nThe MinimumFunction is used to determine the smallest value among multiple child functions. It evaluates each child and returns the minimum result. This is useful when you need to select the limiting factor or the lowest value among several parameters in plant or soil models.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MinimumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MinimumFunction.html#events",
    "href": "docs/Models/Functions/MinimumFunction.html#events",
    "title": "MinimumFunction",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened for by this function.\n\nEvents Raised\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MinimumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MinimumFunction.html#properties",
    "href": "docs/Models/Functions/MinimumFunction.html#properties",
    "title": "MinimumFunction",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\nNo read-only reportable properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MinimumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MinimumFunction.html#user-interface",
    "href": "docs/Models/Functions/MinimumFunction.html#user-interface",
    "title": "MinimumFunction",
    "section": "User Interface",
    "text": "User Interface\nMinimumFunction can be added into the model tree by right-clicking on a parent node and selecting “Add Model…”, then searching for MinimumFunction in the Filter Box. A symbol for the MinimumFunction is displayed in the user interface to represent the function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MinimumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MinimumFunction.html#practical-example",
    "href": "docs/Models/Functions/MinimumFunction.html#practical-example",
    "title": "MinimumFunction",
    "section": "Practical Example",
    "text": "Practical Example\nSuppose you want to determine the minimum soil water available from several soil layers, or the most limiting nutrient for plant growth. You can use the MinimumFunction to select the lowest value among all relevant child functions.\nFor example, if you have three child functions representing different constraints:\n\\[\nLimitingFactor = \\min(Value_1, Value_2, Value_3)\n\\]\nThe MinimumFunction will return the smallest of these values.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MinimumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/MinimumFunction.html#see-also",
    "href": "docs/Models/Functions/MinimumFunction.html#see-also",
    "title": "MinimumFunction",
    "section": "See Also",
    "text": "See Also\n\nSource code: MinimumFunction.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "MinimumFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookup.html",
    "href": "docs/Models/Functions/PhaseLookup.html",
    "title": "PhaseLookup",
    "section": "",
    "text": "PhaseLookup selects a value based on the current growth phase of the crop. It allows users to define different function values for different stages of development (e.g., vegetative, flowering, grain filling), and outputs the value corresponding to the current phase.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookup"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookup.html#overview",
    "href": "docs/Models/Functions/PhaseLookup.html#overview",
    "title": "PhaseLookup",
    "section": "Overview",
    "text": "Overview\nThis function is used to dynamically select a value during simulation depending on which growth phase the crop is currently in. It is typically used when a biological response or parameter changes depending on the stage of development.\nFor example, you may want thermal time accumulation, stress response, or nutrient demand to behave differently in vegetative versus reproductive phases. PhaseLookup works like a switch that returns the appropriate value based on which phase the crop is currently in.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookup"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookup.html#inputs",
    "href": "docs/Models/Functions/PhaseLookup.html#inputs",
    "title": "PhaseLookup",
    "section": "Inputs",
    "text": "Inputs\n\nChild models: One or more PhaseLookupValue models, each associated with a specific phase or phase range.\nCrop phenology information (from the simulation environment).\n\nEach PhaseLookupValue defines: - Start phase name - End phase name - A value or function to return during that phase range",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookup"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookup.html#methodology",
    "href": "docs/Models/Functions/PhaseLookup.html#methodology",
    "title": "PhaseLookup",
    "section": "Methodology",
    "text": "Methodology\nThe PhaseLookup function evaluates all its children, which must be PhaseLookupValue models. For each child:\n\nCheck if the crop is currently between the defined Start and End stages.\nIf yes, return the value from the first matching child and stop checking further.\nIf no phase matches any of the child PhaseLookupValue models, return 0 by default.\n\nThe pseudocode logic is:\n\\[\n\\text{Value} =\n\\begin{cases}\n\\text{PhaseLookupValue}_i & \\text{if crop is in phase } i \\\\\n0 & \\text{if no match}\n\\end{cases}\n\\]\nThis allows different values or functions to be “active” only in the relevant phases of the crop’s life cycle.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookup"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookup.html#events",
    "href": "docs/Models/Functions/PhaseLookup.html#events",
    "title": "PhaseLookup",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookup"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookup.html#properties",
    "href": "docs/Models/Functions/PhaseLookup.html#properties",
    "title": "PhaseLookup",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\nNo read-only properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookup"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookup.html#user-interface",
    "href": "docs/Models/Functions/PhaseLookup.html#user-interface",
    "title": "PhaseLookup",
    "section": "User Interface",
    "text": "User Interface\nPhaseLookup can be added into the model tree by right-clicking on a parent node and selecting “Add Model…”, and then search PhaseLookup in the Filter Box. A symbol for the PhaseLookup is displayed in the user interface to represent the function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookup"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookup.html#practical-example",
    "href": "docs/Models/Functions/PhaseLookup.html#practical-example",
    "title": "PhaseLookup",
    "section": "Practical Example",
    "text": "Practical Example\nIn a crop model, you may want a function to return a higher value during vegetative growth and a lower value during reproductive stages. You would use:\n\nPhaseLookup as the parent function.\nTwo children of type PhaseLookupValue:\n\nOne active from Emergence to FloralInitiation, returning a value of 1.0\nAnother from FloralInitiation to Maturity, returning a value of 0.5\n\n\nThis setup allows the model to adjust behavior based on phase without writing additional logic elsewhere.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookup"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhaseLookup.html#see-also",
    "href": "docs/Models/Functions/PhaseLookup.html#see-also",
    "title": "PhaseLookup",
    "section": "See Also",
    "text": "See Also\n\nSource code: PhaseLookup.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "PhaseLookup"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhotoperiodFunction.html",
    "href": "docs/Models/Functions/PhotoperiodFunction.html",
    "title": "Photoperiod",
    "section": "",
    "text": "The Photoperiod function calculates the duration of daylight (photoperiod) in hours for a given day and location. It is essential for simulating plant development processes that depend on day length within the APSIM NG framework.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Photoperiod"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhotoperiodFunction.html#overview",
    "href": "docs/Models/Functions/PhotoperiodFunction.html#overview",
    "title": "Photoperiod",
    "section": "Overview",
    "text": "Overview\nThe Photoperiod function determines the number of daylight hours based on the latitude (from the weather file) and a specified twilight sun angle threshold. This function is crucial for models where photoperiod sensitivity affects growth, flowering, or other physiological processes.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Photoperiod"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhotoperiodFunction.html#inputs",
    "href": "docs/Models/Functions/PhotoperiodFunction.html#inputs",
    "title": "Photoperiod",
    "section": "Inputs",
    "text": "Inputs\n\n\n\n\n\n\n\n\nInput\nType\nDescription\n\n\n\n\nTwilight\ndouble\nThe sun angle (in degrees) below the horizon to define the start/end of daylight.\n\n\nMetData\nIWeather\nWeather data provider, supplies latitude and other meteorological information.\n\n\nClock\nIClock\nProvides the current day of year for the calculation.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Photoperiod"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhotoperiodFunction.html#methodology",
    "href": "docs/Models/Functions/PhotoperiodFunction.html#methodology",
    "title": "Photoperiod",
    "section": "Methodology",
    "text": "Methodology\nThe function calculates day length using the latitude and the twilight angle. The calculation is performed according to the weather data providers.\nControlled Envronment\nUse the specified day length from the controlled environment.\nSpecified Day Length in the Weather File\nUse the actual day length from the weather file.\nCalculated Day Length\nThe day length is calculated using the following astronomical formula, which estimates the duration of daylight (in hours) for a given day of year, latitude, and twilight sun angle:\nLet: - \\(D\\) = day of year - \\(\\phi\\) = latitude (degrees) - \\(\\theta\\) = twilight sun angle (degrees below the horizon; e.g., \\(-6\\) for civil twilight)\n\nConvert angles to radians:\n\n\\(\\phi_{rad} = \\phi \\times \\frac{\\pi}{180}\\)\n\\(\\theta_{rad} = \\theta \\times \\frac{\\pi}{180}\\)\n\nCalculate solar declination:\n\n\\(\\delta = 0.4093 \\times \\sin\\left(0.0172 \\times (D - 79.25)\\right)\\)\n\nCompute intermediate values:\n\n\\(a = \\sin(\\phi_{rad}) \\times \\sin(\\delta)\\)\n\\(b = \\cos(\\phi_{rad}) \\times \\cos(\\delta)\\)\n\\(x = \\frac{\\sin(\\theta_{rad}) - a}{b}\\)\nClamp \\(x\\) to the range \\([-1, 1]\\) to avoid domain errors.\n\nCalculate day length (hours):\n\n\\[\n\\text{DayLength} = 2 \\times \\arccos(x) \\times \\frac{24}{2\\pi}\n\\]\nThis formula accounts for the Earth’s tilt and the observer’s latitude, providing an accurate estimate of daylight hours for any day and location.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Photoperiod"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhotoperiodFunction.html#events",
    "href": "docs/Models/Functions/PhotoperiodFunction.html#events",
    "title": "Photoperiod",
    "section": "Events",
    "text": "Events\nEvents Listened For\nThese are signals or notifications that the function listens for from other parts of the simulation:\n\n\n\nEvent\nPurpose\n\n\n\n\nDoWeather\nTriggers calculation of day length for the current day.\n\n\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Photoperiod"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhotoperiodFunction.html#properties",
    "href": "docs/Models/Functions/PhotoperiodFunction.html#properties",
    "title": "Photoperiod",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nTwilight\ndouble\nThe sun angle (in degrees) below the horizon for defining daylight.\n\n\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nDayLength\ndouble\nThe calculated duration of daylight (hours) for the current day and location.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Photoperiod"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhotoperiodFunction.html#user-interface",
    "href": "docs/Models/Functions/PhotoperiodFunction.html#user-interface",
    "title": "Photoperiod",
    "section": "User Interface",
    "text": "User Interface\nPhotoperiodFunction can be added as a child of a parent function node (e.g., a model requiring day length) in the model tree. Right-click the parent node, select “Add Model…”, and search for PhotoperiodFunction in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Photoperiod"
    ]
  },
  {
    "objectID": "docs/Models/Functions/PhotoperiodFunction.html#practical-example",
    "href": "docs/Models/Functions/PhotoperiodFunction.html#practical-example",
    "title": "Photoperiod",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "Photoperiod"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubtractFunction.html",
    "href": "docs/Models/Functions/SubtractFunction.html",
    "title": "SubtractFunction",
    "section": "",
    "text": "The SubtractFunction is a utility function that returns the difference of values from its child functions.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubtractFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubtractFunction.html#overview",
    "href": "docs/Models/Functions/SubtractFunction.html#overview",
    "title": "SubtractFunction",
    "section": "Overview",
    "text": "Overview\nThe SubtractFunction is used to subtract the values of other child functions from the first child. It calculates the difference between the first child function and the sum of all subsequent child functions. This is useful when you need to compute a value that is derived from subtracting multiple traits or parameters in plant growth models.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubtractFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubtractFunction.html#events",
    "href": "docs/Models/Functions/SubtractFunction.html#events",
    "title": "SubtractFunction",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened for by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubtractFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubtractFunction.html#properties",
    "href": "docs/Models/Functions/SubtractFunction.html#properties",
    "title": "SubtractFunction",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\nNo read-only reportable properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubtractFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubtractFunction.html#user-interface",
    "href": "docs/Models/Functions/SubtractFunction.html#user-interface",
    "title": "SubtractFunction",
    "section": "User Interface",
    "text": "User Interface\nSubtractFunction can be added into the model tree by right-clicking on a parent node and selecting “Add Model…”, and then search SubtractFunction in the Filter Box. A symbol for the SubtractFunction is displayed in the user interface to represent the function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubtractFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubtractFunction.html#practical-example",
    "href": "docs/Models/Functions/SubtractFunction.html#practical-example",
    "title": "SubtractFunction",
    "section": "Practical Example",
    "text": "Practical Example\nThe wheat yield is reduced by frost stress as a ratio of total yield (e.g. FrostDamage). The final yield is calculated by subtracting the frost damage from the total potential yield.\n\\[\nFinalYield = TotalPotentialYield \\times (1 - FrostDamage)\n\\]\nThe SubtractFunction is used to subtract these two values to get the final yield in the equation above.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubtractFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/SubtractFunction.html#see-also",
    "href": "docs/Models/Functions/SubtractFunction.html#see-also",
    "title": "SubtractFunction",
    "section": "See Also",
    "text": "See Also\n\nSource code: SubtractFunction.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "SubtractFunction"
    ]
  },
  {
    "objectID": "docs/Models/Functions/XYPairs.html",
    "href": "docs/Models/Functions/XYPairs.html",
    "title": "XYPairs Function",
    "section": "",
    "text": "Returns the corresponding Y value for a given X value, based on the line shape defined by the specified XY matrix.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "XYPairs Function"
    ]
  },
  {
    "objectID": "docs/Models/Functions/XYPairs.html#overview",
    "href": "docs/Models/Functions/XYPairs.html#overview",
    "title": "XYPairs Function",
    "section": "Overview",
    "text": "Overview\nXYPairs is a fundamental function to define response curves by specifying a series of X and Y values. For a given input X, it returns a linearly interpolated value of Y based on the defined XY matrix. If outside the defined X range, it returns the first or last points of Y value at the boundary. This function is particularly useful for modeling relationships where empirical data is available, such as temperature responses or biomass partitioning in agricultural models.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "XYPairs Function"
    ]
  },
  {
    "objectID": "docs/Models/Functions/XYPairs.html#inputs",
    "href": "docs/Models/Functions/XYPairs.html#inputs",
    "title": "XYPairs Function",
    "section": "Inputs",
    "text": "Inputs\n\nX: An array of X values defining the input domain.\nY: An array of Y values corresponding to each X value. Must be the same length as X.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "XYPairs Function"
    ]
  },
  {
    "objectID": "docs/Models/Functions/XYPairs.html#methodology",
    "href": "docs/Models/Functions/XYPairs.html#methodology",
    "title": "XYPairs Function",
    "section": "Methodology",
    "text": "Methodology\nThe XYPairs function performs linear interpolation between the user-defined X and Y value pairs. When the function is called with a given X value (\\(dX\\)), it locates the segment of the curve that contains the input and linearly interpolates to determine the corresponding Y value. If outside the defined X range, it returns the Y value at the nearest boundary point (either the first or last Y value).\nThe interpolation follows this equation between points \\((x_i, y_i)\\) and \\((x_{i+1}, y_{i+1})\\):\n\\[\nY = y_i + \\frac{(dX - x_i)}{(x_{i+1} - x_i)} (y_{i+1} - y_i)\n\\]",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "XYPairs Function"
    ]
  },
  {
    "objectID": "docs/Models/Functions/XYPairs.html#events",
    "href": "docs/Models/Functions/XYPairs.html#events",
    "title": "XYPairs Function",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "XYPairs Function"
    ]
  },
  {
    "objectID": "docs/Models/Functions/XYPairs.html#properties",
    "href": "docs/Models/Functions/XYPairs.html#properties",
    "title": "XYPairs Function",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\nProperty\nType\nDescription\n\n\n\n\nX\ndouble[]\nThe list of X values\n\n\nY\ndouble[]\nThe list of Y values\n\n\n\nRead-Only Reportable Properties\n\nNo read-only properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "XYPairs Function"
    ]
  },
  {
    "objectID": "docs/Models/Functions/XYPairs.html#user-interface",
    "href": "docs/Models/Functions/XYPairs.html#user-interface",
    "title": "XYPairs Function",
    "section": "User Interface",
    "text": "User Interface\nXYPairs can be added as a child of any functional models in the model tree. Right-click the parent node, select “Add Model…”, and search for XYPairs in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "XYPairs Function"
    ]
  },
  {
    "objectID": "docs/Models/Functions/XYPairs.html#practical-example",
    "href": "docs/Models/Functions/XYPairs.html#practical-example",
    "title": "XYPairs Function",
    "section": "Practical Example",
    "text": "Practical Example\nSuppose you want to define a response curve for a process that increases linearly with thermal time up to a maximum, then decreases. Set:\n\nX = [0, 26, 34]\nY = [0, 26, 0]\n\nThis means: - For thermal time (X) less than 0, the response (Y) is 0. - From 0 to 26, the response increases linearly from 0 to 26. - From 26 to 34, the response decreases linearly from 26 to 0. - For thermal time greater than 34, the response remains 0.\n\n\n\n\n\nExample of XYPairs Function",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "XYPairs Function"
    ]
  },
  {
    "objectID": "docs/Models/Functions/XYPairs.html#see-also",
    "href": "docs/Models/Functions/XYPairs.html#see-also",
    "title": "XYPairs Function",
    "section": "See Also",
    "text": "See Also\n\nSource code: XYPairs.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Functions",
      "XYPairs Function"
    ]
  },
  {
    "objectID": "docs/Models/Graph/EventNamesOnGraph.html",
    "href": "docs/Models/Graph/EventNamesOnGraph.html",
    "title": "Show Event Names on Graph",
    "section": "",
    "text": "Model EventNamesOnGraph is designed to add event names (e.g. growth stages) to a Graph Series in APSIM NG. This is particularly useful for visualizing the timing of key events in a crop’s growth cycle, such as sowing, flowering, and harvest.\nTo display event names (such as growth stages) on a graph, follow these steps after running your APSIM simulation:\n\nCreate a new model Graph in the simulation tree.\nAdd a new model Series to the Graph and configure it as your desired output (e.g., x axis as Wheat.Phenology.DaysAfterSowing; y axis as Wheat.Grain.Wt).\nAdd a new model EventNamesOnGraph to the Series and select the column name to plot, e.g. Wheat.Phenology.CurrentStageName.\n\n\n\n\nExample output showing event names on a graph",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Graph",
      "Show Event Names on Graph"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html",
    "href": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html",
    "title": "Nutrient Constrained Allocation",
    "section": "",
    "text": "In APSIM Next Generation (APSIM NG), plant biomass growth is computed based on potential dry matter (DM) production from photosynthesis, reallocation, and retranslacation. However, this potential growth must be adjusted according to nutrient constraints, primarily nitrogen (N), which depends on nitrogen supply.\nThe NutrientConstrainedAllocationMethod model is responsible for scaling biomass allocations to organs based on the amount of nitrogen allocated to those organs. This ensures that growth is biologically feasible given available N and minimum nitrogen concentration.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Nutrient Constrained Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#role-in-apsim-simulation-pipeline",
    "href": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#role-in-apsim-simulation-pipeline",
    "title": "Nutrient Constrained Allocation",
    "section": "Role in APSIM Simulation Pipeline",
    "text": "Role in APSIM Simulation Pipeline\nThe NutrientConstrainedAllocationMethod is invoked after biomass has been distributed to organs (e.g., by RelativeAllocation) but before final biomass commitment. Its purpose is to:\n\nCheck whether each organ has received enough nitrogen to support its allocated biomass (i.e. satisfy the minimum concentration).\nScale biomass down proportionally if nitrogen is insufficient.\nTrack how much biomass was reduced due to nitrogen limitations (i.e. the difference between allocated and actual biomass). The reporting variable DM.NutrientLimitation captures this reduction, which is crucial for understanding crop performance under nutrient stress (e.g. [Wheat].Arbitrator.DM.NutrientLimitation).",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Nutrient Constrained Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#inputs-and-assumptions",
    "href": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#inputs-and-assumptions",
    "title": "Nutrient Constrained Allocation",
    "section": "Inputs and Assumptions",
    "text": "Inputs and Assumptions\n\nOrgans (IArbitration[]): A list of organs participating in allocation (e.g., leaf, stem, root, grain).\nBiomassArbitrationType (DM): Contains the dry matter allocations (structural, metabolic, storage) from the prior allocation step.\nNutrientArbitrationType (N): Contains nitrogen demand and allocation for each organ.\n\nKey Assumptions:\n\nEach organ has a defined minimum nitrogen concentration (MinNConc), below which it cannot support biomass.\nNitrogen allocated to an organ must meet this minimum to validate the associated DM allocation.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Nutrient Constrained Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#step-by-step-process",
    "href": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#step-by-step-process",
    "title": "Nutrient Constrained Allocation",
    "section": "Step-by-Step Process",
    "text": "Step-by-Step Process\n\nCalculate Total N Allocation per Organ\n\nFor each organ i, sum all nitrogen allocations:\n\\[\nN_{\\text{TotalAllocation},i} = N_{\\text{StructuralAllocation},i} + N_{\\text{MetabolicAllocation},i} + N_{\\text{StorageAllocation},i}\n\\]\nThis value represents the nitrogen available to support DM growth.\n\nCalculate N-Constrained Growth Capacity\n\nDetermine the maximum biomass (N.ConstrainedGrowth[i]) that each organ can support based on its nitrogen allocation:\nThis logic checks:\n\nIf total nitrogen allocation meets or exceeds demand, growth is unconstrained.\nIf no nitrogen is allocated or the organ has no minimum N concentration, growth is zero.\nOtherwise, it computes the maximum biomass based on the minimum nitrogen concentration required by the organ. The constrained growth for each organ is calculated as:\n\n\\[\nN_\\text{ConstrainedGrowth}[i] = \\frac{N_\\text{TotalAllocation}[i]}{\\text{Organs}[i]_\\text{MinNConc}}\n\\]\nwhere:\n\n\\(N_\\text{TotalAllocation}[i]\\) is the total nitrogen allocated to organ \\(i\\)\n\\(\\text{Organs}[i]_\\text{MinNConc}\\) is the minimum nitrogen concentration required for organ \\(i\\)\n\nThis yields a per-organ limit on biomass, ensuring growth is feasible under nitrogen constraints. This is the most common case where nitrogen limits growth.\n\nScale Biomass Allocation Proportionally\n\nThe total biomass previously allocated (structural + metabolic + storage) is compared to ConstrainedGrowth[i].\nIf total allocation exceeds the constrained limit, all organs are scaled proportionally:\nLet:\nLet \\(DM_{total}[i]\\) be the total biomass allocated to organ \\(i\\):\n\\[\nDM_{total}[i] = DM_{structural}[i] + DM_{metabolic}[i] + DM_{storage}[i]\n\\]\nCalculate the proportion of each component:\n\\[\nP_{structural}[i] = \\frac{DM_{structural}[i]}{DM_{total}[i]}\n\\]\n\\[\nP_{metabolic}[i] = \\frac{DM_{metabolic}[i]}{DM_{total}[i]}\n\\]\n\\[\nP_{storage}[i] = \\frac{DM_{storage}[i]}{DM_{total}[i]}\n\\]\nScale each component by the N-constrained growth:\n\\[\nDM_{structural}[i] = \\min\\left(DM_{structural}[i], N_{constrained}[i] \\times P_{structural}[i]\\right)\n\\]\n\\[\nDM_{metabolic}[i] = \\min\\left(DM_{metabolic}[i], N_{constrained}[i] \\times P_{metabolic}[i]\\right)\n\\]\n\\[\nDM_{storage}[i] = \\min\\left(DM_{storage}[i], N_{constrained}[i] \\times P_{storage}[i]\\right)\n\\]\nThis ensures:\n\nNo component exceeds the N-limited capacity.\nRatios between structural, metabolic, and storage biomass are preserved.\n\n\nUpdate Final Biomass and Stress Report\n\nAfter applying constraints, updating the final biomass allocation and calculating the nutrient limitation is done as follows:\n\\[\nDM_\\text{Allocated} = \\sum_{i=1}^{n} \\left( DM_{structural}[i] + DM_{metabolic}[i] + DM_{storage}[i] \\right)\n\\]\n\\[\nDM_\\text{NutrientLimitation} = DM_\\text{PreNStressAllocation} - DM_\\text{Allocated}\n\\]\nWhere:\n\n\\(DM_\\text{Allocated}\\) is the total biomass realized after N constraints.\n\\(DM_\\text{PreNStressAllocation}\\) is the total biomass allocated before applying N constraints.\n\\(DM_\\text{NutrientLimitation}\\) is the biomass lost due to insufficient nitrogen.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Nutrient Constrained Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#practical-example",
    "href": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#practical-example",
    "title": "Nutrient Constrained Allocation",
    "section": "Practical Example",
    "text": "Practical Example\nA leaf organ receives:\n\nNitrogen allocated: 0.3 g\nMinimum N concentration: 0.03 g/g DM\nMaximum supportable biomass: 0.3 / 0.03 = 10 g\nIf initial biomass allocated was 12 g:\nFinal biomass is scaled to 10 g\nAll sub-pools (structural, metabolic, storage) are reduced by 10 / 12 = 0.833",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Nutrient Constrained Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#scientific-rationale",
    "href": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#scientific-rationale",
    "title": "Nutrient Constrained Allocation",
    "section": "Scientific Rationale",
    "text": "Scientific Rationale\n\nNitrogen is a key building block for proteins, nucleic acids, and enzymes.\nWithout sufficient N, plants cannot construct tissue even if photosynthate is available.\nThis constraint ensures simulations realistically capture nutrient stress.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Nutrient Constrained Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#extensibility",
    "href": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#extensibility",
    "title": "Nutrient Constrained Allocation",
    "section": "Extensibility",
    "text": "Extensibility\nWhile this method currently constrains biomass based only on nitrogen:\n\nIt is designed to be extended for other nutrients (e.g., phosphorus, potassium).\nAdditional constraints could be implemented by combining multiple nutrient-limited growth values.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Nutrient Constrained Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#outputs-and-implications",
    "href": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#outputs-and-implications",
    "title": "Nutrient Constrained Allocation",
    "section": "Outputs and Implications",
    "text": "Outputs and Implications\n\nDM.Allocated: Actual biomass realized under nutrient constraints.\nDM.NutrientLimitation: Biomass lost due to insufficient nitrogen.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Nutrient Constrained Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#potential-bugs-and-limitations",
    "href": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#potential-bugs-and-limitations",
    "title": "Nutrient Constrained Allocation",
    "section": "Potential bugs and Limitations",
    "text": "Potential bugs and Limitations\nThe current implementation assumes all organs have a defined minimum N concentration. The biomass is dropped if nitrogen uptake cannot meet the minimum concentration. This assumption is reasonable for photosynthesis, but may not be reasonable for reallocation and retranslocation. These unallocated biomass should return to original organs.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Nutrient Constrained Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#references",
    "href": "docs/Models/PMF/Arbitrator/NutrientConstrainedAllocationMethod.html#references",
    "title": "Nutrient Constrained Allocation",
    "section": "References",
    "text": "References\n\nAPSIM NG Documentation\nAPSIM NG Source Code: NutrientConstrainedAllocationMethod.cs",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator",
      "Nutrient Constrained Allocation"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Arbitrator/index.html",
    "href": "docs/Models/PMF/Arbitrator/index.html",
    "title": "Arbitrator",
    "section": "",
    "text": "The Arbitrator is a core component of the plant module, responsible for allocating resources (mainly biomass and nitrogen) among different organs of a plant (e.g., leaves, stem, roots, grain). Its role is central to simulating plant growth and development realistically.\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\n\n\n\n\n\nNutrient Constrained Allocation\n\n\n\n\n\n\n\n\n\nRelative Allocation\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Arbitrator"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html",
    "href": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html",
    "title": "CalcCAMPVrnRates",
    "section": "",
    "text": "A function in APSIM Next Generation that calculates vernalisation (Vrn) expression rate parameters for a given genotype, using observed final leaf number (FLN) data and controlled environment parameters. It forms a core part of the CAMP (Cereal Apical Meristem Phenology) model and supports simulation of genotype-specific developmental responses to photoperiod and vernalisation cues.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CalcCAMPVrnRates"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#overview",
    "href": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#overview",
    "title": "CalcCAMPVrnRates",
    "section": "Overview",
    "text": "Overview\nCalcCAMPVrnRates is used to derive the coefficients that govern how vernalisation and photoperiod affect the expression rates of vernalisation genes in the CAMP model. It operates on FLN observations from controlled environment studies with defined photoperiod and temperature treatments. The outputs are rate parameters that quantify the rate and phase transitions of Vrn expression in different photothermal regimes, enabling genotype-specific simulation of phenological development.\nThis function is critical for enabling APSIM NG to simulate genotype-by-environment interactions in crop phenology, particularly for cereal crops where vernalisation and photoperiod sensitivity genes such as Vrn1, Vrn2, and Vrn3 play a pivotal role.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CalcCAMPVrnRates"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#inputs",
    "href": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#inputs",
    "title": "CalcCAMPVrnRates",
    "section": "Inputs",
    "text": "Inputs\nThis function requires the following inputs:\n\nFinalLeafNumberSet FLNset: A dataset containing FLN values under different photoperiod and vernalisation treatments:\n\nLV – Long photoperiod with vernalisation\nLN – Long photoperiod without vernalisation\nSV – Short photoperiod with vernalisation\nSN – Short photoperiod without vernalisation\n\nFLNParameterEnvironment EnvData: The environmental parameters under which FLN was observed:\n\nVrnTreatTemp: Vernalisation treatment temperature (°C)\nVrnTreatDuration: Duration of vernalisation treatment (days)\nTreatmentPp_L: Long-day photoperiod (hours)\nTtEmerge: Thermal time from sowing to emergence (°Cd)\n\n\nIn addition, it links to:\n\nbasePhyllochron: A child model function that returns the phyllochron (thermal time per leaf)\ncamp: The ancestor CAMP model, which provides helper methods and constants",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CalcCAMPVrnRates"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#methodology",
    "href": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#methodology",
    "title": "CalcCAMPVrnRates",
    "section": "Methodology",
    "text": "Methodology\nThe CalcCAMPVrnRates function estimates vernalisation rate parameters using:\n\nFLNset: a set of final leaf number parameters\nEnvData: controlled environment data used to measure final leaf number\n\nThe function performs the following steps:\n\nConvert Emergence Duration from Thermal Time to Phyllochrons\n\nBase phyllochron duration of vernalisation treatment\n\nEstimate Haun Stage at Terminal Spikelet\n\nCalculate Minimum Vernalisation Saturation to Terminal Spikelet\n\nCalculate the accumulated phyllochrons at vernalisation saturation for each treatment\n\nCalculate Vernalisation Rates and Photoperiod Sensitivities\n\nCalculate Maximum Vrn2 Expression Under Long Photoperiods\n\nCalculate Cold-Induced Upregulation of Vrn1 Expression\n\n\nConvert Emergence Duration from Thermal Time to Phyllochrons\nThe duration from sowing to emergence is first expressed in phyllochrons (\\(Ph_\\text{emergence}\\)) using the base phyllochron value (\\(Ph_\\text{base}\\)):\n\\[\nPh_\\text{emergence} = \\frac{TT_\\text{emergence}}{Ph_\\text{base}}\n\\]\nWhere:\n\n\\(TT_\\text{emergence}\\) is the thermal time from sowing to emergence (°C·days), TtEmerge in FLNParameterEnvironment.qmd,\n\\(Ph_\\text{base}\\) is the base phyllochron duration.\n\n\n\nBase phyllochron duration of vernalisation treatment\nThe base phyllochron duration of the vernalisation treatment (\\(Ph_\\text{vern}\\)) is calculated as: \\[\nPh_\\text{vern} = \\frac{T_\\text{vern} \\times D_\\text{V}}{Ph_\\text{base}}\n\\]\nWhere:\n\n\\(T_\\text{vern}\\) is the vernalisation treatment temperature (°C), VrnTreatTemp in FLNParameterEnvironment.qmd,\n\\(D_\\text{V}\\) is the vernalisation treatment duration (days), VrnTreatDuration in FLNParameterEnvironment.qmd,\n\\(Ph_\\text{base}\\) is the base phyllochron duration.\n\n\n\nEstimate Haun Stage at Terminal Spikelet\nThe Haun Stage at terminal spikelet for each environment \\(i\\) (e.g., LV, LN, SV, SN) is calculated following the method of Brown et al. (2013):\n\\[\n\\text{HS}_{TS}(i) = \\left( \\text{FLN}(i) - 2.85 \\right) \\times 1.1\n\\]\nWhere:\n\n\\(\\text{FLN}(i)\\) is the final leaf number observed under environment \\(i\\).\n\n\n\nCalculate Minimum Vernalisation Saturation to Terminal Spikelet\nThe minimum vernalisation saturation at terminal spikelet (\\(\\text{VS}_{TS,\\ min}\\)) is estimated as:\n\\[\n\\text{VS}_{TS,\\ min} = \\min\\left( \\text{HS}_{TS,\\ LV} - 1.1,\\ 3 \\right)\n\\]\nWhere:\n\n\\(\\text{HS}_{TS,\\ LV}\\) is the Haun Stage at terminal spikelet in the long-day vernalised (LV) treatment,\n1.1 is the earliest Haun Stage at which vernalisation saturation can begin,\n3 is the maximum stage for vernalisation saturation, based on Lincoln controlled environment data (CRWT153).\n\n\n\nCalculate the accumulated phyllochrons at vernalisation saturation for each treatment\nThe accumulated phyllochron at vernalisation saturation is estimated for each photoperiod × vernalisation treatment. These values are expressed in phyllochrons and are derived relative to the Haun Stage at terminal spikelet (\\(\\text{HS}_{TS}\\)) and the previously calculated minimum duration between vernalisation saturation and terminal spikelet (\\(\\text{VS}_{TS,\\text{min}}\\)).\nLong-day Vernalised (LV) Environment\nFor the LV treatment, vernalisation saturation is assumed to occur exactly \\(\\text{VS}_{TS,\\text{min}}\\) before terminal spikelet:\n\\[\n\\text{VS}_{LV} = \\text{HS}_{TS,\\ LV} - \\text{VS}_{TS,\\text{min}}\n\\]\nWhere:\n\n\\(\\text{HS}_{TS,\\ LV}\\) is the Haun Stage at terminal spikelet for the LV treatment,\n\\(\\text{VS}_{TS,\\text{min}}\\) is the minimum vernalisation saturation to terminal spikelet.\n\nThis forms the baseline timing of saturation under conditions without vernalisation and photoperiod impacts.\nLong-day Non-vernalised (LN) Environment\nFor LN, the vernalisation saturation timing is constrained by Haun Stage of LN at terminal spikelet (\\(\\text{HS}_{TS,\\ LN}\\)) and cannot occur earlier than in the LV treatment:\n\\[\n\\text{VS}_{LN} = \\max(\\text{HS}_{TS,\\ LN} - \\text{VS}_{TS,\\text{min}},\\ \\text{VS}_{LV})\n\\]\nWhere:\n\n\\(\\text{HS}_{TS,\\ LN}\\) is the Haun Stage at terminal spikelet for the LN treatment,\n\\(\\text{VS}_{LV}\\) is the vernalisation saturation timing for the LV treatment,\n\\(\\text{VS}_{TS,\\text{min}}\\) is the minimum vernalisation saturation to terminal spikelet.\n\nThis ensures the LN environment does not reach vernalisation saturation before LV.\nShort-day Vernalised (SV) Environment\nFor the SV treatment, the vernalisation saturation timing is constrained by Haun Stage of LN at terminal spikelet (\\(\\text{HS}_{TS,\\ SV}\\)) and cannot occur earlier than in the LV treatment:\n\\[\n\\text{VS}_{SV} = \\max(\\text{HS}_{TS,\\ SV} - \\text{VS}_{TS,\\text{min}},\\ \\text{VS}_{LV})\n\\]\nWhere:\n\n\\(\\text{HS}_{TS,\\ SV}\\) is the Haun Stage at terminal spikelet for the SV treatment,\n\\(\\text{VS}_{LV}\\) is the vernalisation saturation timing for the LV treatment,\n\\(\\text{VS}_{TS,\\text{min}}\\) is the minimum vernalisation saturation to terminal spikelet.\n\nThis ensures the SV environment does not reach vernalisation saturation before LV.\nShort-day Non-vernalised (SN) Environment\nFor the SN environment, saturation is constrained by Haun Stage of LN at terminal spikelet (\\(\\text{HS}_{TS,\\ SN}\\)) and cannot occur earlier than in the LV treatment:\n\\[\n\\text{VS}_{SN} = \\max(\\text{HS}_{TS,\\ SN} - \\left( \\text{HS}_{TS,\\ SV} - \\text{VS}_{SV} \\right),\\ \\text{VS}_{LV})\n\\]\nWhere:\n\n\\(\\text{HS}_{TS,\\ SN}\\) is the Haun Stage at terminal spikelet for the SN treatment,\n\\(\\text{HS}_{TS,\\ SV}\\) is the Haun Stage at terminal spikelet for the SV treatment,\n\\(\\text{VS}_{SV}\\) is the vernalisation saturation timing for the SV treatment,\n\\(\\text{VS}_{LV}\\) is the vernalisation saturation timing for the LV treatment.\n\nThis ensures the SV environment does not reach vernalisation saturation before LV.\n\n\nCalculate Vernalisation Rates and Photoperiod Sensitivities\nThe base and maximum rates of vernalisation progression during the vegetative and early reproductive phases are estimated, along with the photoperiod (Pp) sensitivity factors.\nBase Vernalisation Rate During Vegetative Phase\nBase vernalisation rate during vegetative phase (\\(\\Delta V_{\\text{base, veg}}\\), BaseDVrnVeg in CultivarRateParams) assumes vernalisation starts at sowing and proceeds linearly until saturation in the SN treatment (which is short-day and non-vernalised treatment and lacks vernalising temperature and long photoperiod upregulation), the base rate is:\n\\[\n\\Delta V_{\\text{base, veg}} = \\frac{1}{\\text{VS}_{SN} + Ph_{\\text{emergence}}}\n\\]\nWhere:\n\n\\(\\text{VS}_{SN}\\) is the phyllochron at vernalisation saturation for the SN treatment,\n\\(Ph_{\\text{emergence}}\\) is the phyllochron duration from sowing to emergence.\n\nMaximum Vernalisation Rate During Vegetative Phase\nThe fastest rate of vernalisation during vegetative phase (\\(\\Delta V_{\\text{max, veg}}\\), MaxDVrnVeg in CultivarRateParams) is assumed to occur in the SV treatment (i.e. short-day with vernalisation), where the rate is maximised at the minimum vernalisation saturation to terminal spikelet:\n\\[\n\\Delta V_{\\text{max, veg}} = \\frac{1}{\\text{VS}_{SV} + Ph_{\\text{emergence}}}\n\\]\nWhere:\n\n\\(\\text{VS}_{SV}\\) is the phyllochron at vernalisation saturation for the SV treatment,\n\\(Ph_{\\text{emergence}}\\) is the phyllochron duration from sowing to emergence.\n\nBase Vernalisation Rate During Early Reproductive Phase\nThe base vernalisation rate during early reproductive phase (\\(\\Delta V_{\\text{base, ER}}\\), BaseDVrnER in CultivarRateParams) is calculated as:\n\\[\n\\Delta V_{\\text{base, ER}} = \\frac{1}{\\text{HS}_{TS,\\ SN} - \\text{VS}_{SN}}\n\\]\nWhere:\n\n\\(\\text{HS}_{TS,\\ SN}\\) is the Haun Stage at terminal spikelet for the SN treatment,\n\\(\\text{VS}_{SN}\\) is the phyllochron at vernalisation saturation for the SN treatment.\n\nMaximum Vernalisation Rate During Early Reproductive Phase\nThe maximum vernalisation rate during early reproductive phase (\\(\\Delta V_{\\text{max, ER}}\\), MaxDVrnER in CultivarRateParams) is calculated as:\n\\[\n\\Delta V_{\\text{max, ER}} = \\frac{1}{\\text{VS}_{TS,\\ min}}\n\\]\nWhere:\n\n\\(\\text{VS}_{TS,\\ min}\\) is the minimum vernalisation saturation to terminal spikelet, calculated earlier.\n\nPhotoperiod Sensitivity Factor During Early Reproductive Phase\nThe photoperiod sensitivity factor during early reproductive phase (\\(F_{\\text{Pp, Vrn3, ER}}\\), PpVrn3FactER in CultivarRateParams) is calculated as: \\[\nF_{\\text{Pp, Vrn3, ER}} = \\left( \\frac{\\Delta V_{\\text{max, ER}}}{\\Delta V_{\\text{base, ER}}} - 1 \\right) + 1\n\\]\nWhere:\n\n\\(\\Delta V_{\\text{max, ER}}\\) is the maximum vernalisation rate during early reproductive phase,\n\\(\\Delta V_{\\text{base, ER}}\\) is the base vernalisation rate during early reproductive phase.\n\nThis factor quantifies how much faster vernalisation proceeds under long photoperiod compared to the baseline.\nPhotoperiod Sensitivity Factor During Vegetative Phase\nThe photoperiod sensitivity factor during vegetative phase (\\(F_{\\text{Pp, Vrn3, veg}}\\), PpVrn3FactVeg in CultivarRateParams) is calculated as: \\[\nF_{\\text{Pp, Vrn3, veg}} = \\left( \\frac{1 / \\text{VS}_{LN}}{\\Delta V_{\\text{max, veg}}} - 1 \\right) + 1\n\\]\nWhere:\n\n\\(\\text{VS}_{LN}\\) is the phyllochron at vernalisation saturation for the LN treatment,\n\\(\\Delta V_{\\text{max, veg}}\\) is the maximum vernalisation rate during vegetative phase.\n\nTo ensure consistency, this factor is constrained to be no less than the early reproductive sensitivity:\n\\[\nF_{\\text{Pp, Vrn3, veg}} = \\max(F_{\\text{Pp, Vrn3, veg}},\\ F_{\\text{Pp, Vrn3, ER}})\n\\]\nWhere:\n\n\\(F_{\\text{Pp, Vrn3, veg}}\\) is the photoperiod sensitivity factor during vegetative phase,\n\\(F_{\\text{Pp, Vrn3, ER}}\\) is the photoperiod sensitivity factor during early reproductive phase.\n\n\n\nCalculate Maximum Vrn2 Expression Under Long Photoperiods\nThe maximum vernalisation repressor (Vrn2) expression under long photoperiod conditions without vernalising temperatures (\\(V_{\\text{max, Vrn2}}\\), , MaxVrn2 in CultivarRateParams) is estimated as:\nBefore vernalisation saturation (VS) is reached under long photoperiod without vernalisation, Vrn1 expression is influenced by both baseline and Vrn3-induced pathways. The effective rate of Vrn1 expression is:\n\\[\n\\Delta V_{\\text{Vrn1} \\times \\text{Vrn3}} = \\max\\left( \\frac{1}{VS_{\\text{LN}}},\\ \\Delta V_{\\text{base, veg}} \\times F_{\\text{Pp, Vrn3, veg}} \\right)\n\\]\nWhere:\n\n\\(\\frac{1}{VS_{\\text{LN}}}\\) is the rate assuming linear accumulation from sowing to saturation without upregulation,\n\\(\\Delta V_{\\text{base, veg}}\\) is the base Vrn1 rate,\n\\(F_{\\text{Pp, Vrn3, veg}}\\) is the photoperiod (Vrn3) sensitivity factor in the vegetative phase.\n\nDuration of Effective Vrn1 × Vrn3 Expression Phase\nThe time (in Haun stages) needed to reach saturation at the above rate is:\n\\[\nH_{\\text{Vrn1} \\times \\text{Vrn3}} = \\frac{1}{\\Delta V_{\\text{Vrn1} \\times \\text{Vrn3}}}\n\\]\nWhere:\n\n\\(\\Delta V_{\\text{Vrn1} \\times \\text{Vrn3}}\\) is the effective rate of Vrn1 × Vrn3 expression,\n\\(H_{\\text{Vrn1} \\times \\text{Vrn3}}\\) is the duration of effective Vrn1 × Vrn3 expression in Haun stages.\n\nThis represents the duration over which the effective Vrn1 × Vrn3 expression occurs in the absence of vernalisation.\nHaun Stage When Vrn2 Expression Ends\nVrn2 expression is assumed to end just before Vrn1 × Vrn3 takes effect. This occurs \\(H_{\\text{Vrn1} \\times \\text{Vrn3}}\\) stages prior to saturation:\n\\[\n\\text{EndVrn2}_{\\text{LN}} = \\max\\left(0,\\ VS_{\\text{LN}} - H_{\\text{Vrn1} \\times \\text{Vrn3}} \\right)\n\\]\nWhere:\n\n\\(\\text{EndVrn2}_{\\text{LN}}\\) is the Haun stage when Vrn2 expression ends in the LN treatment,\n\\(VS_{\\text{LN}}\\) is the phyllochron at vernalisation saturation for the LN treatment,\n\\(H_{\\text{Vrn1} \\times \\text{Vrn3}}\\) is the duration of effective Vrn1 × Vrn3 expression in Haun stages.\n\nThis value is constrained to be non-negative.\nMaximum Vrn2 Expression Under Long Photoperiods\nThe total Vrn2 expression is assumed to accumulate linearly from emergence to the end of Vrn2 activity under baseline Vrn1 expression:\n\\[\nV_{\\text{max, Vrn2}} = \\left( \\text{EndVrn2}_{\\text{LN}} + Ph_{\\text{emergence}} \\right) \\times \\Delta V_{\\text{base, veg}}\n\\]\nWhere:\n\n\\(\\text{EndVrn2}_{\\text{LN}}\\) is the Haun stage when Vrn2 expression ends in the LN treatment,\n\\(Ph_{\\text{emergence}}\\) is the phyllochron duration from sowing to emergence,\n\\(\\Delta V_{\\text{base, veg}}\\) is the base Vrn1 expression rate during the vegetative phase.\n\nThis value represents the maximum repressive effect of Vrn2 that must be overcome before Vrn3-mediated acceleration of Vrn1 expression can begin.\n\n\nCalculate Cold-Induced Upregulation of Vrn1 Expression\nThe effect of cold treatment on persistent (methylated) upregulation of Vrn1 expression in the LV (long photoperiod + vernalisation) environment (\\[C_{\\text{Vrn1}}\\], ColdVrn1Fact in CultivarRateParams) is estimated as:\nBaseline Vrn1 Expression up to VS in the LV Treatment\nThe total amount of Vrn1 expressed under baseline conditions in the LV treatment from sowing to vernalisation saturation is:\n\\[\nV_{\\text{base, LV}} = (Ph_\\text{emergence} + VS_{\\text{LV}}) \\times \\Delta V_{\\text{base, veg}}\n\\]\nWhere:\n\n\\(Ph_\\text{emergence}\\) is the phyllochron duration from sowing to emergence,\n\\(VS_{\\text{LV}}\\) is the phyllochron at vernalisation saturation for the LV treatment,\n\\(\\Delta V_{\\text{base, veg}}\\) is the baseline rate of Vrn1 expression during the vegetative phase.\n\nThis reflects the cumulative Vrn1 expression in the absence of cold-specific upregulation.\nAmount of Cold-Induced Persistent Vrn1 Expression\nCold upregulation of Vrn1 (assumed to lead to methylation and memory) is calculated as:\n\\[\nV_{\\text{cold, LV}} = V_{\\text{threshold}} + V_{\\text{max, Vrn2}} - V_{\\text{base, LV}}\n\\]\nWhere:\n\n\\(V_{\\text{threshold}}\\) is the saturation threshold for Vrn1 (typically 1),\n\\(V_{\\text{max, Vrn2}}\\) is the maximum Vrn2 repressive expression,\n\\(V_{\\text{base, LV}}\\) is the amount of Vrn1 expressed at baseline up to VS.\n\nMethylation Threshold\nThe methylation threshold (\\(\\theta_{\\text{meth}}\\), MethalationThreshold in CultivarRateParams) (i.e., amount of Vrn1 needed for full persistent response) is assumed to be equal to the cold-induced Vrn1 amount:\n\\[\n\\theta_{\\text{meth}} = V_{\\text{cold, LV}}\n\\]\nThis assumption is based on findings by Brooking and Jamieson that the lag before methylation equals the duration of vernalisation response.\nEffective Duration of Vernalisation\nThe duration (in Haun stages) over which vernalisation is active is:\n\\[\nH_{\\text{vern, LV}} = \\min(Ph_\\text{vern},\\ Ph_\\text{emergence} + VS_{\\text{LV}})\n\\]\nWhere: - \\(Ph_\\text{vern}\\) is the phyllochron duration of the vernalisation treatment, - \\(Ph_\\text{emergence}\\) is the phyllochron duration from sowing to emergence, - \\(VS_{\\text{LV}}\\) is the phyllochron at vernalisation saturation for the LV treatment.\nCold-Induced Vrn1 Expression Rate During Treatment\nThe total rate of Vrn1 expression under cold treatment is:\n\\[\n\\Delta V_{\\text{cold, LV}} = \\frac{V_{\\text{cold, LV}} + \\theta_{\\text{meth}}}{H_{\\text{vern, LV}}}\n\\]\nWhere:\n\n\\(V_{\\text{cold, LV}}\\) is the amount of cold-induced Vrn1 expression,\n\\(\\theta_{\\text{meth}}\\) is the methylation threshold,\n\\(H_{\\text{vern, LV}}\\) is the effective duration of vernalisation in Haun stages.\n\nMaximum Cold-Induced Expression Rate at 0°C\nAssuming an exponential temperature effect, the maximum rate of Vrn1 expression under cold is:\n\\[\n\\Delta V_{\\text{cold, max}} = \\frac{\\Delta V_{\\text{cold, LV}}}{\\exp(k \\cdot T_{\\text{cold}})}\n\\]\nWhere:\n\n\\(\\Delta V_{\\text{cold, LV}}\\) is the cold-induced Vrn1 expression rate during the vernalisation treatment,\n\\(k\\) is the temperature coefficient for vernalisation (typically -0.17),\n\\(T_{\\text{cold}}\\) is the vernalisation treatment temperature, VrnTreatTemp in FLNParameterEnvironment.\n\nCold-Induced Vrn1 Upregulation Factor\nThe cold upregulation factor (\\(F_{\\text{cold, vrn1}}\\), ColdVrn1Fact in CultivarRateParams) is calculated as the ratio of cold-enhanced Vrn1 expression to baseline expression:\n\\[\nF_{\\text{cold, vrn1}} = \\frac{\\Delta V_{\\text{cold, max}}}{\\Delta V_{\\text{base, veg}}}\n\\]\nWhere:\n\n\\(\\Delta V_{\\text{cold, max}}\\) is the maximum cold-induced Vrn1 expression rate at 0°C,\n\\(\\Delta V_{\\text{base, veg}}\\) is the baseline Vrn1 expression rate during the vegetative phase.\n\nThis factor quantifies the enhancement in Vrn1 expression due to cold during vernalisation.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CalcCAMPVrnRates"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#events",
    "href": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#events",
    "title": "CalcCAMPVrnRates",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CalcCAMPVrnRates"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#properties",
    "href": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#properties",
    "title": "CalcCAMPVrnRates",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\nNo read-only properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CalcCAMPVrnRates"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#user-interface",
    "href": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#user-interface",
    "title": "CalcCAMPVrnRates",
    "section": "User Interface",
    "text": "User Interface\n\nNot typically user-configurable through the UI. It is populated by the CalcCAMPVrnRates function based on genotype-specific FLN observations.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CalcCAMPVrnRates"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#practical-example",
    "href": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#practical-example",
    "title": "CalcCAMPVrnRates",
    "section": "Practical Example",
    "text": "Practical Example\nThis example walks through each calculation step using the provided parameter values for very quick maturity Emu_Rock and very late maturity Sunlamb (Celestina et al. 2023), resulting in all the key parameters for CultivarRateParams.\nThe following table summarises the parameters used APSIM Wheat Model for the two cultivars:\n\n\n\n\n\n\n\n\nParameter (Model Name)\nEmu_Rock\nSunlamb\n\n\n\n\n[Phenology].CAMP.FLNparams.MinLN\n7.0\n8.0\n\n\n[Phenology].CAMP.FLNparams.PpLN\n9.0\n12.0\n\n\n[Phenology].CAMP.FLNparams.VrnLN\n8.0\n10.0\n\n\n[Phenology].CAMP.FLNparams.VxPLN\n10.0\n14.0\n\n\n[Phenology].Phyllochron.BasePhyllochron.FixedValue\n94.78\n100.38\n\n\n[Phenology].CAMP.EnvData.VrnTreatTemp\n5.8\n5.8\n\n\n[Phenology].CAMP.EnvData.VrnTreatDuration\n60\n60\n\n\n[Phenology].CAMP.EnvData.TreatmentPp_L\n16\n16\n\n\n[Phenology].CAMP.EnvData.TtEmerge\n90\n90\n\n\n\n\n1. Convert Emergence Duration from Thermal Time to Phyllochrons\n\\[\nPh_\\text{emergence} = \\frac{TT_\\text{emergence}}{Ph_\\text{base}}\n\\]\n\nEmu_Rock: 90 / 94.78 ≈ 0.95\nSunlamb: 90 / 100.38 ≈ 0.90\n\n\n\n2. Base phyllochron duration of vernalisation treatment\n\\[\nPh_\\text{vern} = \\frac{T_\\text{vern} \\times D_\\text{V}}{Ph_\\text{base}}\n\\]\n\nEmu_Rock: (5.8 × 60) / 94.78 ≈ 3.67\nSunlamb: (5.8 × 60) / 100.38 ≈ 3.47\n\n\n\n3. Estimate Haun Stage at Terminal Spikelet\n\\[\n\\text{HS}_{TS}(i) = (\\text{FLN}(i) - 2.85) \\times 1.1\n\\]\n\nEmu_Rock:\n\nLV: (7.0 - 2.85) × 1.1 = 4.15 × 1.1 ≈ 4.57\nLN: (9.0 - 2.85) × 1.1 = 6.15 × 1.1 ≈ 6.77\nSV: (8.0 - 2.85) × 1.1 = 5.15 × 1.1 ≈ 5.67\nSN: (10.0 - 2.85) × 1.1 = 7.15 × 1.1 ≈ 7.87\n\nSunlamb:\n\nLV: (8.0 - 2.85) × 1.1 = 5.15 × 1.1 ≈ 5.67\nLN: (12.0 - 2.85) × 1.1 = 9.15 × 1.1 ≈ 10.07\nSV: (10.0 - 2.85) × 1.1 = 7.15 × 1.1 ≈ 7.87\nSN: (14.0 - 2.85) × 1.1 = 11.15 × 1.1 ≈ 12.27\n\n\n\n\n4. Calculate Minimum Vernalisation Saturation to Terminal Spikelet\n\\[\n\\text{VS}_{TS,\\ min} = \\min(\\text{HS}_{TS,\\ LV} - 1.1,\\ 3)\n\\]\n\nEmu_Rock: min(4.57 - 1.1, 3) = min(3.47, 3) = 3.0\nSunlamb: min(5.67 - 1.1, 3) = min(4.57, 3) = 3.0\n\n\n\n5. Calculate the accumulated phyllochrons at vernalisation saturation for each treatment\n\nLV: \\(\\text{VS}_{LV} = \\text{HS}_{TS,\\ LV} - \\text{VS}_{TS,\\ min}\\)\n\nEmu_Rock: 4.57 - 3.0 = 1.57\nSunlamb: 5.67 - 3.0 = 2.67\n\nLN: \\(\\text{VS}_{LN} = \\max(\\text{HS}_{TS,\\ LN} - \\text{VS}_{TS,\\ min},\\ \\text{VS}_{LV})\\)\n\nEmu_Rock: max(6.77 - 3.0, 1.57) = max(3.77, 1.57) = 3.77\nSunlamb: max(10.07 - 3.0, 2.67) = max(7.07, 2.67) = 7.07\n\nSV: \\(\\text{VS}_{SV} = \\max(\\text{HS}_{TS,\\ SV} - \\text{VS}_{TS,\\ min},\\ \\text{VS}_{LV})\\)\n\nEmu_Rock: max(5.67 - 3.0, 1.57) = max(2.67, 1.57) = 2.67\nSunlamb: max(7.87 - 3.0, 2.67) = max(4.87, 2.67) = 4.87\n\nSN: \\(\\text{VS}_{SN} = \\max(\\text{HS}_{TS,\\ SN} - (\\text{HS}_{TS,\\ SV} - \\text{VS}_{SV}),\\ \\text{VS}_{LV})\\)\n\nEmu_Rock: max(7.87 - (5.67 - 2.67), 1.57) = max(7.87 - 3.0, 1.57) = max(4.87, 1.57) = 4.87\nSunlamb: max(12.27 - (7.87 - 4.87), 2.67) = max(12.27 - 3.0, 2.67) = max(9.27, 2.67) = 9.27\n\n\n\n\n6. Calculate Vernalisation Rates and Photoperiod Sensitivities\n\nBase Vernalisation Rate (Veg): \\(\\Delta V_{\\text{base, veg}} = 1 / (\\text{VS}_{SN} + Ph_\\text{emergence})\\)\n\nEmu_Rock: 1 / (4.87 + 0.95) = 1 / 5.82 ≈ 0.172\nSunlamb: 1 / (9.27 + 0.90) = 1 / 10.17 ≈ 0.098\n\nMax Vernalisation Rate (Veg): \\(\\Delta V_{\\text{max, veg}} = 1 / (\\text{VS}_{SV} + Ph_\\text{emergence})\\)\n\nEmu_Rock: 1 / (2.67 + 0.95) = 1 / 3.62 ≈ 0.276\nSunlamb: 1 / (4.87 + 0.90) = 1 / 5.77 ≈ 0.173\n\nBase Vernalisation Rate (ER): \\(\\Delta V_{\\text{base, ER}} = 1 / (\\text{HS}_{TS,\\ SN} - \\text{VS}_{SN})\\)\n\nEmu_Rock: 1 / (7.87 - 4.87) = 1 / 3.0 ≈ 0.333\nSunlamb: 1 / (12.27 - 9.27) = 1 / 3.0 ≈ 0.333\n\nMax Vernalisation Rate (ER): \\(\\Delta V_{\\text{max, ER}} = 1 / \\text{VS}_{TS,\\ min}\\)\n\nBoth: 1 / 3.0 ≈ 0.333\n\nPhotoperiod Sensitivity (ER): \\(F_{\\text{Pp, Vrn3, ER}} = (\\Delta V_{\\text{max, ER}} / \\Delta V_{\\text{base, ER}} - 1) + 1\\)\n\nBoth: (0.333 / 0.333 - 1) + 1 = (1 - 1) + 1 = 1\n\nPhotoperiod Sensitivity (Veg): \\(F_{\\text{Pp, Vrn3, veg}} = (1 / \\text{VS}_{LN} / \\Delta V_{\\text{max, veg}} - 1) + 1\\)\n\nEmu_Rock: (1 / 3.77 / 0.276 - 1) + 1 = (0.265 / 0.276 - 1) + 1 ≈ (0.960 - 1) + 1 ≈ 0.960\nSunlamb: (1 / 7.07 / 0.173 - 1) + 1 = (0.141 / 0.173 - 1) + 1 ≈ (0.815 - 1) + 1 ≈ 0.815\n\nConstrain to at least \\(F_{\\text{Pp, Vrn3, ER}}\\) (which is 1):\n\nEmu_Rock: max(0.960, 1) = 1\nSunlamb: max(0.815, 1) = 1\n\n\n\n\n7. Calculate Maximum Vrn2 Expression Under Long Photoperiods\n\nEffective Vrn1 × Vrn3 Rate: \\(\\Delta V_{\\text{Vrn1} \\times \\text{Vrn3}} = \\max(1 / VS_{LN}, \\Delta V_{\\text{base, veg}} \\times F_{\\text{Pp, Vrn3, veg}})\\)\n\nEmu_Rock: max(1 / 3.77, 0.172 × 1) = max(0.265, 0.172) = 0.265\nSunlamb: max(1 / 7.07, 0.098 × 1) = max(0.141, 0.098) = 0.141\n\nDuration of Vrn1 × Vrn3 Expression: \\(H_{\\text{Vrn1} \\times \\text{Vrn3}} = 1 / \\Delta V_{\\text{Vrn1} \\times \\text{Vrn3}}\\)\n\nEmu_Rock: 1 / 0.265 ≈ 3.77\nSunlamb: 1 / 0.141 ≈ 7.07\n\nEndVrn2 (LN): \\(\\text{EndVrn2}_{\\text{LN}} = \\max(0, VS_{LN} - H_{\\text{Vrn1} \\times \\text{Vrn3}})\\)\n\nEmu_Rock: max(0, 3.77 - 3.77) = 0\nSunlamb: max(0, 7.07 - 7.07) = 0\n\nMaxVrn2: \\(V_{\\text{max, Vrn2}} = (\\text{EndVrn2}_{\\text{LN}} + Ph_\\text{emergence}) \\times \\Delta V_{\\text{base, veg}}\\)\n\nEmu_Rock: (0 + 0.95) × 0.172 ≈ 0.164\nSunlamb: (0 + 0.90) × 0.098 ≈ 0.088\n\n\n\n\n8. Calculate Cold-Induced Upregulation of Vrn1 Expression\n\nBaseline Vrn1 Expression up to VS in LV: \\(V_{\\text{base, LV}} = (Ph_\\text{emergence} + VS_{LV}) \\times \\Delta V_{\\text{base, veg}}\\)\n\nEmu_Rock: (0.95 + 1.57) × 0.172 = 2.52 × 0.172 ≈ 0.433\nSunlamb: (0.90 + 2.67) × 0.098 = 3.57 × 0.098 ≈ 0.350\n\nCold-induced Vrn1: \\(V_{\\text{cold, LV}} = 1 + V_{\\text{max, Vrn2}} - V_{\\text{base, LV}}\\)\n\nEmu_Rock: 1 + 0.164 - 0.433 = 0.731\nSunlamb: 1 + 0.088 - 0.350 = 0.738\n\nMethylation Threshold: \\(\\theta_{\\text{meth}} = V_{\\text{cold, LV}}\\)\n\nEmu_Rock: 0.731\nSunlamb: 0.738\n\nEffective Duration of Vernalisation: \\(H_{\\text{vern, LV}} = \\min(Ph_\\text{vern}, Ph_\\text{emergence} + VS_{LV})\\)\n\nEmu_Rock: min(3.67, 2.52) = 2.52\nSunlamb: min(3.47, 3.57) = 3.47\n\nCold-Induced Vrn1 Expression Rate: \\(\\Delta V_{\\text{cold, LV}} = (V_{\\text{cold, LV}} + \\theta_{\\text{meth}}) / H_{\\text{vern, LV}}\\)\n\nEmu_Rock: (0.731 + 0.731) / 2.52 ≈ 1.462 / 2.52 ≈ 0.580\nSunlamb: (0.738 + 0.738) / 3.47 ≈ 1.476 / 3.47 ≈ 0.426\n\nMax Cold-Induced Expression Rate at 0°C: \\(\\Delta V_{\\text{cold, max}} = \\Delta V_{\\text{cold, LV}} / \\exp(-0.17 \\times 5.8)\\)\n\nexp(-0.17 × 5.8) ≈ exp(-0.986) ≈ 0.373\nEmu_Rock: 0.580 / 0.373 ≈ 1.555\nSunlamb: 0.426 / 0.373 ≈ 1.142\n\nCold-Induced Vrn1 Upregulation Factor: \\(F_{\\text{cold, vrn1}} = \\Delta V_{\\text{cold, max}} / \\Delta V_{\\text{base, veg}}\\)\n\nEmu_Rock: 1.555 / 0.172 ≈ 9.04\nSunlamb: 1.142 / 0.098 ≈ 11.65\n\n\n\n\n\nSummary Table of Estimated Parameters\n\n\n\nParameter\nEmu_Rock\nSunlamb\n\n\n\n\nBaseDVrnVeg\n0.172\n0.098\n\n\nMaxDVrnVeg\n0.276\n0.173\n\n\nBaseDVrnER\n0.333\n0.333\n\n\nMaxDVrnER\n0.333\n0.333\n\n\nPpVrn3FactVeg\n1.000\n1.000\n\n\nPpVrn3FactER\n1.000\n1.000\n\n\nMaxVrn2\n0.164\n0.088\n\n\nMethalationThreshold\n0.731\n0.738\n\n\nColdVrn1Fact\n9.04\n11.65\n\n\n\nAll values rounded to 3 decimal places.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CalcCAMPVrnRates"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#see-also",
    "href": "docs/Models/PMF/Phenology/CAMP/CalcCAMPVrnRates.html#see-also",
    "title": "CalcCAMPVrnRates",
    "section": "See Also",
    "text": "See Also\n\nSource code: CalcCAMPVrnRates.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CalcCAMPVrnRates"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html",
    "href": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html",
    "title": "CultivarRateParams",
    "section": "",
    "text": "A data model that stores vernalisation rate parameters for a specific cultivar. These parameters are used within APSIM NG’s CAMP model to simulate the temperature and photoperiod sensitivity of flowering development in cereals such as wheat and barley.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CultivarRateParams"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#overview",
    "href": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#overview",
    "title": "CultivarRateParams",
    "section": "Overview",
    "text": "Overview\nThe CultivarRateParams class defines a set of vernalisation-related parameters tailored to a single genotype or cultivar. These values quantify the rates and thresholds for vernalisation gene expression (e.g., Vrn1, Vrn2, and Vrn3) under different photothermal conditions.\nIt is not a computational function itself but a container of parameters used by other modules like CalcCAMPVrnRates to describe how vernalisation proceeds under varying temperatures and daylengths. It supports detailed phenological simulations in APSIM NG’s CAMP framework.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CultivarRateParams"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#inputs",
    "href": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#inputs",
    "title": "CultivarRateParams",
    "section": "Inputs",
    "text": "Inputs\nThis model is not user-configurable directly through the UI and does not require inputs at runtime. Instead, it is populated by the CalcCAMPVrnRates function based on controlled environment FLN observations.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CultivarRateParams"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#methodology",
    "href": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#methodology",
    "title": "CultivarRateParams",
    "section": "Methodology",
    "text": "Methodology\nCultivarRateParams provides the following fields, which represent physiological and regulatory coefficients used to simulate flowering development:\n\nBaseDVrnVeg (\\(\\Delta V_{\\text{base, veg}}\\)): Baseline rate of vernalisation gene expression (Vrn1) in the vegetative phase at high temperatures (e.g., &gt;20°C).\nMaxDVrnVeg (\\(\\Delta V_{\\text{max, veg}}\\)): Maximum upregulation of Vrn1 under cold conditions (e.g., 0°C).\nBaseDVrnER (\\(\\Delta V_{\\text{base, ER}}\\)): Baseline rate of Vrn1 expression during early reproductive phase without photoperiod upregulation.\nMaxDVrnER (\\(\\Delta V_{\\text{max, ER}}\\)): Maximum rate of Vrn1 expression during early reproductive phase under long photoperiod.\nPpVrn3FactVeg (\\(F_{\\text{Pp, Vrn3, veg}}\\)): Enhancement factor for Vrn1 expression in vegetative phase due to Vrn3 upregulation under long days.\nPpVrn3FactER (\\(F_{\\text{Pp, Vrn3, ER}}\\)): Enhancement factor for Vrn1 expression in early reproductive phase due to Vrn3 under long days.\nMaxVrn2 (\\(V_{\\text{max, Vrn2}}\\)): Maximum Vrn2 expression level under long photoperiods, which must be suppressed before full Vrn1 expression can proceed.\nMethalationThreshold (\\(M_{\\text{threshold}}\\)): Threshold level of cold-induced Vrn1 expression needed to enable persistent Vrn1 activation (methalation).\nColdVrn1Fact (\\(C_{\\text{Vrn1}}\\)): Factor by which cold temperatures increase the rate of Vrn1 expression compared to the baseline.\n\nThese parameters are essential for simulating genotype × environment interactions that influence time to floral initiation and flowering in cereal crops.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CultivarRateParams"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#events",
    "href": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#events",
    "title": "CultivarRateParams",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CultivarRateParams"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#properties",
    "href": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#properties",
    "title": "CultivarRateParams",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nBaseDVrnVeg\ndouble\nBaseline Vrn1 expression rate in vegetative phase (&gt;20°C)\n\n\nMaxDVrnVeg\ndouble\nMax Vrn1 expression rate at 0°C during vegetative phase\n\n\nBaseDVrnER\ndouble\nBaseline Vrn1 expression rate in early reproductive phase\n\n\nMaxDVrnER\ndouble\nMax Vrn1 expression rate in early reproductive phase under long day\n\n\nPpVrn3FactVeg\ndouble\nRelative increase in Vrn1 expression by Vrn3 in vegetative phase\n\n\nPpVrn3FactER\ndouble\nRelative increase in Vrn1 expression by Vrn3 in early reproductive phase\n\n\nMaxVrn2\ndouble\nMaximum expression of Vrn2 in long days\n\n\nMethalationThreshold\ndouble\nCold requirement before persistent Vrn1 expression occurs\n\n\nColdVrn1Fact\ndouble\nRelative cold-induced increase in Vrn1 expression\n\n\n\nRead-Only Reportable Properties\n\nNo read-only properties are available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CultivarRateParams"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#user-interface",
    "href": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#user-interface",
    "title": "CultivarRateParams",
    "section": "User Interface",
    "text": "User Interface\n\nNot typically user-configurable through the UI. It is populated by the CalcCAMPVrnRates function based on genotype-specific FLN observations.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CultivarRateParams"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#practical-example",
    "href": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#practical-example",
    "title": "CultivarRateParams",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CultivarRateParams"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#see-also",
    "href": "docs/Models/PMF/Phenology/CAMP/CultivarRateParams.html#see-also",
    "title": "CultivarRateParams",
    "section": "See Also",
    "text": "See Also\n\nSource code: CultivarRateParams.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "CultivarRateParams"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html",
    "href": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html",
    "title": "FinalLeafNumberSet",
    "section": "",
    "text": "The FinalLeafNumberSet model stores final leaf number (FLN) observations or estimates for a genotype under controlled environmental conditions. These observations help quantify the effects of vernalisation and photoperiod treatments on leaf development, supporting genotype-specific modelling of phenology in APSIM NG.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FinalLeafNumberSet"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#overview",
    "href": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#overview",
    "title": "FinalLeafNumberSet",
    "section": "Overview",
    "text": "Overview\nFinalLeafNumberSet defines the final leaf number (FLN) under four treatments in the controlled environments (Bloomfield et al. 2023):\n\nLV: fully vernalised long photoperiod\nSV: fully vernalised short photoperiod\nSN: un-vernalised short photoperiod\nLN: un-vernalised long photoperiod\n\nThis model is typically used within the CAMP framework to parameterise genotype responses.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FinalLeafNumberSet"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#inputs",
    "href": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#inputs",
    "title": "FinalLeafNumberSet",
    "section": "Inputs",
    "text": "Inputs\nThis model does not accept dynamic inputs during simulation, but rather defines fixed parameters:\n\nMinLN: Base final leaf number under full vernalisation and long photoperiod.\nPpLN: Increase in FLN when grown under short photoperiod (e.g. 8h) after full vernalisation.\nVrnLN: Increase in FLN due to lack of vernalisation when grown under short photoperiod.\nVxPLN: Modification to FLN due to photoperiod interaction under unvernalised conditions.\n\nThese values are typically derived from controlled environment experiments.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FinalLeafNumberSet"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#methodology",
    "href": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#methodology",
    "title": "FinalLeafNumberSet",
    "section": "Methodology",
    "text": "Methodology\nThe model exposes computed FLN values based on defined treatment combinations:\n\nLV (Long photoperiod, fully vernalised):\n\n\\[ \\text{LV} = \\text{MinLN} \\]\n\nSV (Short photoperiod, fully vernalised):\n\n\\[ \\text{SV} = \\text{MinLN} + \\text{PpLN} \\]\n\nSN (Short photoperiod, un-vernalised):\n\n\\[ \\text{SN} = \\text{MinLN} + \\text{PpLN} + \\text{VrnLN} \\]\n\nLN (Long photoperiod, un-vernalised):\n\\[ \\text{LN} = \\text{MinLN} + \\text{VrnLN} + \\text{VxPLN} \\]\n\nThese equations represent the phenotypic plasticity of FLN in response to vernalisation and photoperiod interactions.\nReversely, the model parameters can be derived from the final leaf number (FLN) values observed in the controlled environment experiments:\n\nMinLN:\n\n\\[ \\text{MinLN} = \\text{LV} \\]\n\nPpLN:\n\n\\[ \\text{PpLN} = \\text{SV} - \\text{LV} \\]\n\nVrnLN:\n\n\\[ \\text{VrnLN} = \\text{SN} - \\text{SV} \\]\n\nVxPLN:\n\n\\[ \\text{VxPLN} = \\text{LN} - \\text{LV} - \\left(\\text{SN} - \\text{SV}\\right) \\]",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FinalLeafNumberSet"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#events",
    "href": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#events",
    "title": "FinalLeafNumberSet",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened by this function.\n\nEvents Raised to\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FinalLeafNumberSet"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#properties",
    "href": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#properties",
    "title": "FinalLeafNumberSet",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nMinLN\ndouble\nFinal Leaf Number under full vernalisation and long photoperiod (&gt;16h)\n\n\nPpLN\ndouble\nIncrease in FLN under short photoperiod (&lt;8h) following full vernalisation\n\n\nVrnLN\ndouble\nIncrease in FLN when un-vernalised and grown under short photoperiod\n\n\nVxPLN\ndouble\nChange in FLN from photoperiod effect under un-vernalised, long-day growth\n\n\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nLV\ndouble\nFLN under full vernalisation and long photoperiod (&gt;16h)\n\n\nSV\ndouble\nFLN under full vernalisation and short photoperiod (&lt;8h)\n\n\nSN\ndouble\nFLN when un-vernalised under short photoperiod\n\n\nLN\ndouble\nFLN when un-vernalised under long photoperiod",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FinalLeafNumberSet"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#user-interface",
    "href": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#user-interface",
    "title": "FinalLeafNumberSet",
    "section": "User Interface",
    "text": "User Interface\nFinalLeafNumberSet can be added as a child of a CAMP node in the model tree. Right-click the CAMP node, select “Add Model…”, and search for FinalLeafNumberSet in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FinalLeafNumberSet"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#practical-example",
    "href": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#practical-example",
    "title": "FinalLeafNumberSet",
    "section": "Practical Example",
    "text": "Practical Example\nBelow is a summary table for two cultivars including very quick maturity Emu_Rock and very late maturity Sunlamb (Celestina et al. 2023), showing their parameter values and calculated FLN for each treatment:\n\n\n\nTable 1: Final Leaf Number Parameters for Emu_Rock and Sunlamb Cultivars\n\n\n\nFinal Leaf Number Parameters for Emu_Rock and Sunlamb Cultivars\n\n\nParameter\nEmu_Rock\nSunlamb\n\n\n\n\nMinLN\n6\n7\n\n\nPpLN\n1\n5\n\n\nVrnLN\n1\n10\n\n\nVxPLN\n-1\n-5\n\n\nLV\n6\n7\n\n\nSV\n7\n12\n\n\nSN\n8\n22\n\n\nLN\n6\n12\n\n\n\n\n\n\nThis figure illustrates the final leaf number (FLN) for the BattenWinter and BattenSpring cultivars under different treatments, including the contributions of each parameter to the final leaf number.\n\n\n\n\n\n\n\n\nFigure 1: Final Leaf Number (FLN) for BattenWinter and BattenSpring cultivars",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FinalLeafNumberSet"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#see-also",
    "href": "docs/Models/PMF/Phenology/CAMP/FinalLeafNumberSet.html#see-also",
    "title": "FinalLeafNumberSet",
    "section": "See Also",
    "text": "See Also\n\nSource code: FinalLeafNumberSet.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "CAMP",
      "FinalLeafNumberSet"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html",
    "href": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html",
    "title": "EmergingPhase",
    "section": "",
    "text": "The EmergingPhase represents a phenological sub-phase within a plant’s developmental timeline, responsible for simulating the transition from germination to emergence. It defines the conditions under which a seed emerges and completes the phase once those criteria are satisfied. Typically, it spans from the Germination stage to the Eergence stage, and its completion is determined by either environmental triggers, e.g. temperature, or a user-specified germination date.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EmergingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html#overview",
    "href": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html#overview",
    "title": "EmergingPhase",
    "section": "Overview",
    "text": "Overview\nThe EmergingPhase models the transition from germination to emergence in the crop’s phenological development. Germination is assumed to occur when any of the following conditions are met:\n\nTarget thermal time for emergence is reached,\nA specific emergence date is provided via the EmergenceDate property.\n\n\nEmergence Triggers\nEmergence occurs in one of two ways:\n\nUser-defined emergence date\n\nIf EmergenceDate is specified, emergence occurs exactly on that date, regardless of soil moisture or temperature.\n\nPhase Target as GenericPhase",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EmergingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html#events",
    "href": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html#events",
    "title": "EmergingPhase",
    "section": "Events",
    "text": "Events\nEvents Listened For\nThese are signals or notifications that the GerminatingPhase listens for from other parts of the simulation:\n\n\n\nEvent\nPurpose\n\n\n\n\nCommencing\nReset progress at the start of simulations\n\n\nPlantSowing\nSet the phase target as GenericPhase. It also indicates the phase target cannot be dynamically modified.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EmergingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html#properties",
    "href": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html#properties",
    "title": "EmergingPhase",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\nRequired\n\n\n\n\nStart\nstring\nPhenological stage at which this phase begins (e.g. Sowing).\nYes\n\n\nEnd\nstring\nPhenological stage that marks completion of the phase (e.g. Germinated).\nYes\n\n\nTarget\nIFunction\nThe target value for phase completion (e.g., required thermal time).\nYes\n\n\nProgression\nIFunction\nThe daily progression towards the target (e.g., daily thermal time).\nYes\n\n\nEmergenceDate\nstring\nOptional fixed calendar date to override environmental conditions.\nNo\n\n\n\nIsEmerged | bool | Boolean flag indicating whether the crop has emerged above the soil surface (i.e. this phase is happening above ground). | No |\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nFractionComplete\ndouble\nFraction (0–1) indicating how much of the phase is complete. Always returns 0 as germination has occurred in next day of sowing.\n\n\nProgressionForTimeStep\ndouble\nThe amount of progression made during the current time step (e.g. day).\n\n\nProgressThroughPhase\ndouble\nAccumulated units of progress through this phase between zero and target.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EmergingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html#usage",
    "href": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html#usage",
    "title": "EmergingPhase",
    "section": "Usage",
    "text": "Usage\nAn EmergingPhase can be used to represent the emergence process of a plant, which is primarily influenced by sowing depth, shoot lag and shoot rate.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EmergingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html#see-also",
    "href": "docs/Models/PMF/Phenology/Phases/EmergingPhase.html#see-also",
    "title": "EmergingPhase",
    "section": "See Also",
    "text": "See Also\n\nSource code: EmergingPhase.cs on GitHub.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "EmergingPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GenericPhase.html",
    "href": "docs/Models/PMF/Phenology/Phases/GenericPhase.html",
    "title": "GenericPhase",
    "section": "",
    "text": "The GenericPhase is a phenological phase used within a plant’s developmental sequence. It simulates a growth phase that progresses in proportion to accumulated thermal time and completes once a specified target thermal time (in °Cd) is reached.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GenericPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GenericPhase.html#overview",
    "href": "docs/Models/PMF/Phenology/Phases/GenericPhase.html#overview",
    "title": "GenericPhase",
    "section": "Overview",
    "text": "Overview\nThe GenericPhase advances development using daily thermal time accumulation. The phase begins at a defined start stage and is considered complete once the cumulative thermal time equals or exceeds a specified target value.\n\nDaily progression is configured from property Progression (in general it is daily thermal time, e.g. [Phenology].ThermalTime).\nThe target thermal time is configured via the property Target (in Cd).\nThe progress through this phase is tracked by the FractionComplete property, which returns a value between 0 and 1.\nThe phase transitions to the next stage once FractionComplete reaches 1.\n\nIf the previous phase finishes mid-day (i.e., progress overshoots the target), the unused fraction of the day’s progress is passed to this phase.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GenericPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GenericPhase.html#events",
    "href": "docs/Models/PMF/Phenology/Phases/GenericPhase.html#events",
    "title": "GenericPhase",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\n\n\nEvent\nPurpose\n\n\n\n\nCommencing\nReset progress at the start of simulations",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GenericPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GenericPhase.html#properties",
    "href": "docs/Models/PMF/Phenology/Phases/GenericPhase.html#properties",
    "title": "GenericPhase",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\nRequired\n\n\n\n\nStart\nstring\nPhenological stage at which this phase begins.\nYes\n\n\nEnd\nstring\nPhenological stage that marks completion of the phase.\nYes\n\n\nTarget\nIFunction\nThe target value for phase completion (e.g., required thermal time).\nYes\n\n\nProgression\nIFunction\nThe daily progression towards the target (e.g., daily thermal time).\nYes\n\n\nIsEmerged\nbool\nBoolean flag indicating whether the crop has emerged above the soil surface (i.e. this phase is happening above ground).\nYes\n\n\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nFractionComplete\ndouble\nFraction (0–1) indicating how much of the phase is complete.\n\n\nProgressionForTimeStep\ndouble\nThe amount of progression made during the current time step (e.g. day).\n\n\nProgressThroughPhase\ndouble\nAccumulated units of progress through this phase between zero and target.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GenericPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GenericPhase.html#usage",
    "href": "docs/Models/PMF/Phenology/Phases/GenericPhase.html#usage",
    "title": "GenericPhase",
    "section": "Usage",
    "text": "Usage\nA GenericPhase can be used to represent phases such as “Grain Filling” which are mainly impacted by temperature without interactions with vernalisation and photoperiod.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GenericPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/GenericPhase.html#see-also",
    "href": "docs/Models/PMF/Phenology/Phases/GenericPhase.html#see-also",
    "title": "GenericPhase",
    "section": "See Also",
    "text": "See Also\n\nSource code: GenericPhase.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "GenericPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/IPhase.html",
    "href": "docs/Models/PMF/Phenology/Phases/IPhase.html",
    "title": "IPhase",
    "section": "",
    "text": "Represents a single developmental phase in the APSIM NG phenology module.\nIPhase defines the contract that every phase model (e.g. Sowing → Emergence, Emergence → Floral Initiation) must obey so that the phenology engine can advance crop development in a modular, interchangeable way.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "IPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/IPhase.html#overview",
    "href": "docs/Models/PMF/Phenology/Phases/IPhase.html#overview",
    "title": "IPhase",
    "section": "Overview",
    "text": "Overview\nIn APSIM NG, crop development is broken into discrete phases.\nEach phase knows when it starts, when it ends, how fast it is progressing, and when it has finished.\nModels that implement IPhase plug into the core Phenology model; the latter calls DoTimeStep() in every simulation step (i.e. day) to update development and query FractionComplete to determine when to hand control to the next phase.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "IPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/IPhase.html#inputs",
    "href": "docs/Models/PMF/Phenology/Phases/IPhase.html#inputs",
    "title": "IPhase",
    "section": "Inputs",
    "text": "Inputs\n\n\n\n\n\n\n\n\n\nName\nType\nSource\nPurpose\n\n\n\n\nStart\nstring\n.apsimx file / UI\nThe phenological stage at which this phase begins.\n\n\nEnd\nstring\n.apsimx file / UI\nThe phenological stage at which this phase ends.\n\n\nPropOfDayToUse\nref double\nPhenology engine\nProportion of today that can be used by this phase; set to 0 when the phase finishes.\n\n\n\n(Implementations will usually read additional daily meteorological or crop‑state variables, but those are outside the scope of the interface itself.)",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "IPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/IPhase.html#methodology",
    "href": "docs/Models/PMF/Phenology/Phases/IPhase.html#methodology",
    "title": "IPhase",
    "section": "Methodology",
    "text": "Methodology\n\nProgress calculation\n\nEach concrete phase overrides DoTimeStep(ref PropOfDayToUse) to accumulate development using its own algorithm (thermal time, photoperiod, vernalisation, etc.).\nWhen the cumulative progress reaches its target, the method returns a non‑zero value and sets PropOfDayToUse to the unused fraction of the day so the next phase can continue.\n\nFraction complete\n\nFractionComplete exposes the running total as a value in \\[[0,1]\\], enabling other models (e.g. Leaf growth) to scale processes smoothly across phase boundaries.\n\nState management\n\n\nResetPhase() allows a simulation (or a new season) to restart the phase from scratch.\n\nIsEmerged lets other models know whether the crop has emerged above the soil surface (i.e. this phase is happening above ground), which is critical for processes such as light interception or grazing.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "IPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/IPhase.html#events",
    "href": "docs/Models/PMF/Phenology/Phases/IPhase.html#events",
    "title": "IPhase",
    "section": "Events",
    "text": "Events\nEvents Listened For\n\nNo events are listened by this function.\n\nEvents Raised To\n\nNo events are raised by this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "IPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/IPhase.html#properties",
    "href": "docs/Models/PMF/Phenology/Phases/IPhase.html#properties",
    "title": "IPhase",
    "section": "Properties",
    "text": "Properties\n\nConfigurable and Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nStart\nstring\nName of the phenological stage that marks the start of this phase.\n\n\nEnd\nstring\nName of the phenological stage that marks the end of this phase.\n\n\n\n\n\nRead‑Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nFractionComplete\ndouble\nFractional progress through the phase \\(0 \\le F \\le 1\\).\n\n\nIsEmerged\nbool\nTrue once the crop has emerged from the soil.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "IPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/IPhase.html#user-interface",
    "href": "docs/Models/PMF/Phenology/Phases/IPhase.html#user-interface",
    "title": "IPhase",
    "section": "User Interface",
    "text": "User Interface\nIPhase implementations can be added as children of a Phenology node in the APSIM NG model tree.\nRight‑click Phenology → Add Model… and search for the desired phase (e.g. Germination, Floral Initiation).",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "IPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/IPhase.html#practical-example",
    "href": "docs/Models/PMF/Phenology/Phases/IPhase.html#practical-example",
    "title": "IPhase",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "IPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/IPhase.html#see-also",
    "href": "docs/Models/PMF/Phenology/Phases/IPhase.html#see-also",
    "title": "IPhase",
    "section": "See Also",
    "text": "See Also\n\nSource code: IPhase.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "IPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html",
    "href": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html",
    "title": "VernalisationPhase",
    "section": "",
    "text": "The VernalisationPhase defines a phenological development phase that is completed when vernalisation requirements are fulfilled. It integrates gene expression signals into crop phenology progression, making it essential for modeling genotypic and environmental responses affecting vernalisation.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "VernalisationPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#overview",
    "href": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#overview",
    "title": "VernalisationPhase",
    "section": "Overview",
    "text": "Overview\nThe VernalisationPhase utilises Cereal Anthesis Molecular Phenology (CAMP) model (Brown et al. 2013) to proceed the phase development. The phase completes when vernalisation saturation is achieved. This function is crucial in modeling winter crops, such as wheat and barley, that require cold exposure to proceed in development. It translates gene expression signals (via the CAMP interface) into phenological progress.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "VernalisationPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#inputs",
    "href": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#inputs",
    "title": "VernalisationPhase",
    "section": "Inputs",
    "text": "Inputs\n\n\n\n\n\n\n\n\nInput Name\nType\nDescription\n\n\n\n\nStart\nstring\nName of the phenological stage that starts this phase\n\n\nEnd\nstring\nName of the phenological stage that ends this phase\n\n\nIsEmerged\nbool\nBoolean flag indicating whether the crop has emerged above the soil surface (i.e. this phase is happening above ground).\n\n\nCAMP\nIVrnExpression\nLink to CAMP gene expression interface providing vernalisation signals",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "VernalisationPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#methodology",
    "href": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#methodology",
    "title": "VernalisationPhase",
    "section": "Methodology",
    "text": "Methodology\nVernalisation progress is computed using CAMP model, summing gene expression components and scaling by a saturation threshold:\nThe \\(\\text{target}\\) of this phase is defined as: \\[\n\\text{Target} = 1 + Vrn2\n\\]\nWhere:\n\n\\(Vrn2\\) is the photoperiod-induced repressor of flowering.\n\nThe relative vernalisation expression \\(R_{\\text{Vrn}}\\) is calculated as:\n\\[\nR_{\\text{Vrn}} = \\min\\left(\\frac{Vrn_{\\text{base}} + Vrn1 + Vrn3}{\\text{Target}},\\ Vrn_{\\text{max}} \\right)\n\\]\nWhere:\n\n\\(Vrn_{\\text{base}}\\) is the baseline vernalisation expression,\n\\(Vrn1\\) is the cold-induced vernalisation expression,\n\\(Vrn3\\) is the photoperiod-dependent promoter of flowering,\n\\(Vrn_{\\text{max}}\\) is the maximum vernalisation expression.\n\nAt emergence, \\(R_{\\text{Vrn},\\ emergence}\\) is recorded which assumes as the first day of this phase. Progress through the phase (\\(F_{\\text{complete}}\\)) is:\n\\[\nF_{\\text{complete}} = \\min\\left(1,\\ \\frac{R_{\\text{Vrn}} - R_{\\text{Vrn},\\ emergence}}{1 - R_{\\text{Vrn},\\ emergence}} \\right)\n\\]\nThe phase ends when IsVernalised is true in the CAMP, indicating the crop has fulfilled its vernalisation requirement.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "VernalisationPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#events",
    "href": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#events",
    "title": "VernalisationPhase",
    "section": "Events",
    "text": "Events\nEvents Listened For\nThese are signals or notifications that the function listens for from other parts of the simulation:\n\n\n\nEvent\nPurpose\n\n\n\n\nCommencing\nResets internal counters and state for simulation startup\n\n\n\nEvents Raised to\n\nNo events are raised by this function.\n\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nStart\nstring\nName of the crop stage that initiates this phase\n\n\nEnd\nstring\nName of the crop stage that ends this phase\n\n\nIsEmerged\nbool\nWhether the phase assumes the crop is emerged (default = true)\n\n\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nFractionComplete\ndouble\nProportion (0–1) of progress through this phase\n\n\nProgressThroughPhase\ndouble\nAlias for FractionComplete (used internally)\n\n\nTarget\ndouble\nTarget vernalisation saturation = \\(1 + \\text{Vrn2}\\)",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "VernalisationPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#user-interface",
    "href": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#user-interface",
    "title": "VernalisationPhase",
    "section": "User Interface",
    "text": "User Interface\nVernalisationPhase is added as a child of a Phenology node to simulate development that depends on cold exposure.\n\nRight-click the Phenology node.\nSelect “Add Model…”.\nSearch for and select “VernalisationPhase”.\nConfigure Start, End, and link the CAMP component that simulates gene activity.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "VernalisationPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#practical-example",
    "href": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#practical-example",
    "title": "VernalisationPhase",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example available.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "VernalisationPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#see-also",
    "href": "docs/Models/PMF/Phenology/Phases/VernalisationPhase.html#see-also",
    "title": "VernalisationPhase",
    "section": "See Also",
    "text": "See Also\n\nSource code: VernalisationPhase.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phases",
      "VernalisationPhase"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phenology.html",
    "href": "docs/Models/PMF/Phenology/Phenology.html",
    "title": "Phenology",
    "section": "",
    "text": "The Phenology model simulates the developmental progression of a plant through a series of defined growth stages based on progression to completion. It provides a central mechanism for managing crop stage transitions in APSIM Next Generation (APSIM NG).",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phenology.html#overview",
    "href": "docs/Models/PMF/Phenology/Phenology.html#overview",
    "title": "Phenology",
    "section": "Overview",
    "text": "Overview\nIn APSIM NG, the Phenology model manages the simulation of plant development by organizing the crop lifecycle into distinct phases. Each phase corresponds to a physiological process or stage in the crop’s development (e.g., emergence, flowering, maturity). The transition between phases is typically governed by progression to completion. In general, the progression is influenced by factors such as thermal time, photoperiod, and vernalisation.\nThis model tracks the current phase, calculates progression based on progression to completion in current phase, and allows transitions to be triggered either naturally (via progression to completion) or manually (via SetToStage). The phenology model plays a pivotal role in coordinating developmental processes with other sub-models like canopy, roots, and biomass.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phenology.html#inputs",
    "href": "docs/Models/PMF/Phenology/Phenology.html#inputs",
    "title": "Phenology",
    "section": "Inputs",
    "text": "Inputs\nThe Phenology model requires:\n\nThermalTime: A child function representing accumulated heat units.\nPhase list: A sequence of IPhase child components, each representing a growth phase. The phase order in the model tree determines the progression sequence.\nSowing Event: Triggers initialization of phenological stages in the event of PlantSowing.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phenology.html#methodology",
    "href": "docs/Models/PMF/Phenology/Phenology.html#methodology",
    "title": "Phenology",
    "section": "Methodology",
    "text": "Methodology\nThe phenology progression is triggered by several events, primarily the DoPhenology event which is called at each day.\nCommencing:\n\nInitializes the phenology model\nObtains the list of phases\nResets state variables.\n\nPlantSowing:\n\nResets state variable\nInitialise phenology development using the first phase\n\nDoPhenology:\nThis is the core event that updates the phenological development at daily timestamp. The phenology development is only proceeded when plant is alive from Plant model.\nAt each timestep, the Phenology model:\n\nCheck whether ThermalTime is available and more than 0. Throw an error if not.\nIncrements progress in the current phase using a DoTimeStep method.\nEmits events when a phase ends or begins (e.g., PhaseChanged, PlantEmerged).\nHandles special phase transitions like GotoPhase that may jump between stages.\nUpdates accumulated thermal time and phenological stage number (Stage).\nManages rewinding or fast-forwarding when the stage is reset.\n\nHarvesting:\n\nSet the end stage as the final phase (maturity) when harvesting occurs.\n\nPlantEnding:\n\nClears internal state when the simulation ends, ensuring no residual data persists.\n\nStartOfDay:\n\nReset daily tracking flags for new day.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phenology.html#public-methods",
    "href": "docs/Models/PMF/Phenology/Phenology.html#public-methods",
    "title": "Phenology",
    "section": "Public Methods",
    "text": "Public Methods\n\n\n\nMethod\nDescription\n\n\n\n\nSetToStage(newStage)\nMoves the crop to a specific development stage (e.g. flowering).\n\n\n\n\nSetToStage(newStage)\nSets the crop’s development (phenological) stage to a specified point, either moving forward or backward through its growth cycle. This method is used internally and in management scripts to simulate events like harvest, defoliation, or skipping to flowering.\n\nSummary\nThis function is used to manually set the crop to a particular stage of development — for example, jumping directly to flowering, or rewinding after a grazing event. It ensures that internal growth stages, thermal time, and event signals stay biologically and numerically consistent.\n\n\nKey Use Cases\n\nAfter grazing or cutting (e.g., regrowth after defoliation)\nDuring management overrides (e.g., skipping to flowering)\nAt harvest (to force crop to final stage)\nIn GotoPhase logic to jump stages dynamically\n\n\n\nBehavior\n\nRewind (go backward)\nIf the target stage is earlier than the current stage:\n\nResets earlier phases\nSubtracts relevant thermal time\nOnly specific phase types can be rewound (others will cause an error)\n\nFast-forward (go forward)\nIf the target stage is later than the current stage:\n\nSkips forward through phases\nAdds appropriate thermal time\nRaises relevant events like PlantEmerged and PhaseChanged",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phenology.html#events",
    "href": "docs/Models/PMF/Phenology/Phenology.html#events",
    "title": "Phenology",
    "section": "Events",
    "text": "Events\nEvents Listened For\nThese are signals or notifications that the function listens for from other parts of the simulation:\n\n\n\nEvent\nPurpose\n\n\n\n\nCommencing\nInitializes phenology and clears state\n\n\nPlantSowing\nResets phenology and starts at sowing stage\n\n\nDoPhenology\nCore timestep to update phenological development\n\n\nStartOfDay\nClears temporary stage-tracking flags for new day\n\n\nHarvesting\nSets phenology directly to final phase (maturity)\n\n\nPlantEnding\nClears internal state when simulation ends\n\n\n\nEvents Raised to\n\n\n\nEvent\nPurpose\n\n\n\n\nPhaseChanged\nIndicates a new phase has started\n\n\nPlantEmerged\nSignals that the emergence phase has been completed\n\n\nStageWasReset\nSignals a manual reset of stage via SetToStage()\n\n\nPostPhenology\nRaised after daily phenological timestep completes",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phenology.html#properties",
    "href": "docs/Models/PMF/Phenology/Phenology.html#properties",
    "title": "Phenology",
    "section": "Properties",
    "text": "Properties\nConfigurable and Reportable Properties\n\nNo configurable properties are available for this function.\n\nRead-Only Reportable Properties\n\n\n\n\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\nStageNames\nList\nList of stage names in phenology\n\n\nStageCodes\nList\nList of numerical stage codes\n\n\nAccumulatedTT\ndouble\nThermal time accumulated since sowing\n\n\nAccumulatedEmergedTT\ndouble\nThermal time accumulated since emergence\n\n\nEmerged\nbool\nWhether the plant has emerged from soil surface\n\n\nStage\ndouble\nOne-based stage number\n\n\nCurrentPhaseName\nstring\nName of the current phase\n\n\nCurrentStageName\nstring\nName of the current stage\n\n\nFractionInCurrentPhase\ndouble\nProportion completed in current phase\n\n\nCurrentPhase\nobject\nThe current phase object\n\n\nZadok\ndouble\nCurrent Zadok stage number. Return 0 if child function zadok is missing\n\n\ncurrentPhaseNumberIncrementedByPhaseTimeStep\nbool\nTrue if phase increments stage number by phase time step\n\n\nPlantIsAlive\nbool\nTrue if the parent plant is alive",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phenology.html#user-interface",
    "href": "docs/Models/PMF/Phenology/Phenology.html#user-interface",
    "title": "Phenology",
    "section": "User Interface",
    "text": "User Interface\nPhenology can be added as a child of a Plant node in the APSIM NG model tree. Right-click the plant node, select “Add Model…”, and search for Phenology in the Filter Box.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phenology.html#practical-example",
    "href": "docs/Models/PMF/Phenology/Phenology.html#practical-example",
    "title": "Phenology",
    "section": "Practical Example",
    "text": "Practical Example\n\nNo practical example is available for this function.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Models/PMF/Phenology/Phenology.html#see-also",
    "href": "docs/Models/PMF/Phenology/Phenology.html#see-also",
    "title": "Phenology",
    "section": "See Also",
    "text": "See Also\n\nSource code: Phenology.cs on GitHub",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF",
      "Phenology",
      "Phenology"
    ]
  },
  {
    "objectID": "docs/Models/PMF/index.html",
    "href": "docs/Models/PMF/index.html",
    "title": "PMF",
    "section": "",
    "text": "Plant Modeling Framework (PMF) offers a modular library of plant organ and process submodels. This design allows for dynamic assembly of complex crop models, by integrating components like photosynthesis and leaf development without additional coding (Brown et al. 2014).\n\nArbitrator\nArbitrator is responsible for allocating resources (mainly biomass and nitrogen) among different organs of a plant (e.g., leaves, stem, roots, grain). Its role is central to simulating plant growth and development realistically.\n\n\nPhenology\nPhenology is responsible for simulating developmental stages of a plant—from emergence to flowering, grain filling, and maturity.\n\n\n\n\n\nReferences\n\nBrown, Hamish E., Neil I. Huth, Dean P. Holzworth, Edmar I. Teixeira, Rob F. Zyskowski, John N. G. Hargreaves, and Derrick J. Moot. 2014. “Plant Modelling Framework: Software for Building and Running Crop Models on the APSIM Platform.” Environmental Modelling & Software 62: 385–98. https://doi.org/10.1016/j.envsoft.2014.09.005.",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "PMF"
    ]
  },
  {
    "objectID": "docs/Models/Traits/index.html",
    "href": "docs/Models/Traits/index.html",
    "title": "Traits",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\n\n\n\n\n\nCO2\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home",
      "Docs",
      "Models",
      "Traits"
    ]
  },
  {
    "objectID": "docs/abbreviations.html",
    "href": "docs/abbreviations.html",
    "title": "Glossary of Abbreviations",
    "section": "",
    "text": "This glossary provides definitions for common abbreviations used throughout the APSIM NG documentation.\nIt helps ensure clarity and consistency for all readers and contributors.",
    "crumbs": [
      "Home",
      "Docs",
      "Glossary of Abbreviations"
    ]
  },
  {
    "objectID": "docs/abbreviations.html#common-abbreviations",
    "href": "docs/abbreviations.html#common-abbreviations",
    "title": "Glossary of Abbreviations",
    "section": "Common Abbreviations",
    "text": "Common Abbreviations\n\n\n\n\n\n\n\n\nAbbreviation\nMeaning\nNotes\n\n\n\n\nTT\nThermal Time\nDaily thermal time in °Cd\n\n\nPP\nPhotoperiod\nDay length influencing development in phenology\n\n\nPh\nPhyllochron\nThermal time required for the appearance of successive leaves on the main stem",
    "crumbs": [
      "Home",
      "Docs",
      "Glossary of Abbreviations"
    ]
  },
  {
    "objectID": "docs/abbreviations.html#usage-notes",
    "href": "docs/abbreviations.html#usage-notes",
    "title": "Glossary of Abbreviations",
    "section": "Usage Notes",
    "text": "Usage Notes\n\nPlease refer to this glossary before introducing new abbreviations to maintain consistency.\nWhen writing documentation or code comments, spell out abbreviations on first use followed by the abbreviation in parentheses, e.g., Photoperiod (Pp).\nThis glossary will be updated as the APSIM NG project evolves.",
    "crumbs": [
      "Home",
      "Docs",
      "Glossary of Abbreviations"
    ]
  },
  {
    "objectID": "docs/abbreviations.html#see-also",
    "href": "docs/abbreviations.html#see-also",
    "title": "Glossary of Abbreviations",
    "section": "See Also",
    "text": "See Also\n\nSymbols",
    "crumbs": [
      "Home",
      "Docs",
      "Glossary of Abbreviations"
    ]
  },
  {
    "objectID": "docs/management/fertiliser.html",
    "href": "docs/management/fertiliser.html",
    "title": "Fertiliser Types",
    "section": "",
    "text": "The fertiliser module defines the characteristics of different fertiliser types, such as their chemical composition and release behaviour. These definitions are stored in a resource file named Fertiliser.json.\nUnderstanding the composition and behaviour of different fertilisers allows users to select the most appropriate input for specific scenarios, such as rapid nitrogen availability, slow-release fertilisers, or dual-nutrient blends.",
    "crumbs": [
      "Home",
      "Docs",
      "Management",
      "Fertiliser Types"
    ]
  },
  {
    "objectID": "docs/management/fertiliser.html#introduction",
    "href": "docs/management/fertiliser.html#introduction",
    "title": "Fertiliser Types",
    "section": "",
    "text": "The fertiliser module defines the characteristics of different fertiliser types, such as their chemical composition and release behaviour. These definitions are stored in a resource file named Fertiliser.json.\nUnderstanding the composition and behaviour of different fertilisers allows users to select the most appropriate input for specific scenarios, such as rapid nitrogen availability, slow-release fertilisers, or dual-nutrient blends.",
    "crumbs": [
      "Home",
      "Docs",
      "Management",
      "Fertiliser Types"
    ]
  },
  {
    "objectID": "docs/management/fertiliser.html#structure-of-fertiliser-definitions",
    "href": "docs/management/fertiliser.html#structure-of-fertiliser-definitions",
    "title": "Fertiliser Types",
    "section": "Structure of Fertiliser Definitions",
    "text": "Structure of Fertiliser Definitions\nEach fertiliser type in APSIM has the following attributes:\n\nName: Identifier used within the simulation to refer to this fertiliser.\nDescription: A human-readable explanation of the fertiliser’s nature or composition.\nSolute: The main chemical form of the nutrient (e.g., nitrate, ammonium) that the fertiliser releases into the soil.\nFraction: The proportion (from 0 to 1) of the nutrient solute in the fertiliser product.\nRelease Rate: The fixed amount or rate at which the nutrient becomes available in the soil after application. In most cases, this represents instantaneous release, but could be extended for controlled-release products.",
    "crumbs": [
      "Home",
      "Docs",
      "Management",
      "Fertiliser Types"
    ]
  },
  {
    "objectID": "docs/management/fertiliser.html#example-fertiliser-types-in-apsim",
    "href": "docs/management/fertiliser.html#example-fertiliser-types-in-apsim",
    "title": "Fertiliser Types",
    "section": "Example Fertiliser Types in APSIM",
    "text": "Example Fertiliser Types in APSIM\nBelow is a simplified summary of several fertiliser types defined in APSIM NG:\n\n\n\n\n\n\n\n\n\n\n\n\nName\nDescription\nSolute1Name\nSolute1Fraction\nRelease\n\n\n\n\nCalciteCA\nCa as finely ground Agricultural Lime\nCa\n1.00\n1\n\n\nCalciteFine\nfinely ground Agricultural Lime\nCa\n0.40\n1\n\n\nDolomite\nfinely ground dolomite\nCa\n0.22\n1\n\n\nNO3N\nN as nitrate\nNO3\n1.00\n1\n\n\nNH4N\nN as ammonium\nNH4\n1.00\n1\n\n\nNH4NO3N\nammonium nitrate\nNO3\n0.50\n1\n\n\nDAP\ndi-ammonium phosphate\nNH4\n0.18\n1\n\n\nMAP\nmono-ammonium phosphate\nNH4\n0.11\n1\n\n\nUAN_N\nN as Urea-AmmoniumNitrate\nNO3\n0.25\n1\n\n\nUreaN\nN as urea\nUrea\n1.00\n1\n\n\nUreaNO3\nN as urea\nNO3\n0.50\n1\n\n\nUreaGranular\nUrea fertiliser\nUrea\n0.46\n1\n\n\nNH4SO4N\nammonium sulphate\nNH4\n1.00\n1\n\n\nRockP\nRock phosphorus\nRockP\n0.80\n1\n\n\nBandedP\nBanded phosphorus\nBandedP\n1.00\n1\n\n\nBroadcastP\nBroadcast phosphorus\nLabileP\n1.00\n1",
    "crumbs": [
      "Home",
      "Docs",
      "Management",
      "Fertiliser Types"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "APSIM Next Generation Notes",
    "section": "",
    "text": "Quarto Publish\nWelcome to APSIM Next Generation Notes — my personal collection of notes, tips, tutorials, and code snippets for working with APSIM Next Generation (APSIM NG).\nThis repository serves as a knowledge base documenting my learning journey, experiments, and solutions to problems I’ve encountered while using APSIM NG. It includes:"
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "APSIM Next Generation Notes",
    "section": "🤝 Contributing",
    "text": "🤝 Contributing\nIf you find any errors, have suggestions, or want to contribute improvements, you’re welcome to create a pull request or open an issue on GitHub."
  },
  {
    "objectID": "index.html#license-and-attribution",
    "href": "index.html#license-and-attribution",
    "title": "APSIM Next Generation Notes",
    "section": "⚖️ License and Attribution",
    "text": "⚖️ License and Attribution\nThis documentation includes content derived from:\n\nThe source code of APSIM Next Generation\n\nThe official APSIM Website\n\nOfficial documentation and personal communications with APSIM developers\n\nIt is provided under the General Use Licence Agreement for Agricultural Production Systems Simulator (APSIM).\n\nThis is an independent learning resource compiled and maintained by myself. It is not an official publication of the APSIM Initiative and may contain personal interpretations or errors.\nWhile I contribute to APSIM NG development, this site reflects my personal understanding and is intended as a resource to support learning and exploration."
  },
  {
    "objectID": "index.html#acknowledgment",
    "href": "index.html#acknowledgment",
    "title": "APSIM Next Generation Notes",
    "section": "🙏 Acknowledgment",
    "text": "🙏 Acknowledgment\nAcknowledgment is made to the APSIM Initiative which takes responsibility for quality assurance and a structured innovation programme for APSIM’s modelling software, which is provided free for research and development use. See www.apsim.info for details.\nWeather data used in this project are sourced from the SILO Patched Point Dataset provided by the Queensland Government. SILO climate data are freely available under the Creative Commons Attribution 4.0 International (CC BY 4.0) licence."
  },
  {
    "objectID": "tips/index.html",
    "href": "tips/index.html",
    "title": "Tips",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\n\n\n\n\n\nPhotoperiod Effects on Heading Phase for Wheat in Australia\n\n\n\n\n\n\n\n\n\nPhotoperiod Effects on Leaf Appearance for Wheat in Australia\n\n\n\n\n\n\n\n\n\nSetting CO₂ Concentration\n\n\n\n\n\n\n\n\n\nAccessing Internal Model Variables in the Manager Scripts\n\n\n\n\n\n\n\n\n\nWriting Debug Info to Summary\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "GENERAL USE LICENCE AGREEMENT FOR AGRICULTURAL PRODUCTION SYSTEMS SIMULATOR (APSIM)",
    "section": "",
    "text": "GENERAL USE LICENCE AGREEMENT FOR AGRICULTURAL PRODUCTION SYSTEMS SIMULATOR (APSIM)\nThe Licensee must carefully read all the terms and conditions of this Agreement before downloading the APSIM Software. The terms and conditions of this Agreement are legally binding. Download of the APSIM Software indicates the Licensee’s acceptance of these terms and conditions. The licence granted under this Agreement is only given on the Licensee’s acceptance of these terms and conditions and will be subject to the Licensee’s continual compliance with them. If the Licensee does not agree to these terms and conditions they must not download, install or use the APSIM Software.\nThis Agreement is effective and commences on and from the date of download of the APSIM Software.\nBETWEEN\nThe State of Queensland acting through its Department of Agriculture and Fisheries (ABN 66 934 348 189) which has its head office at 41 George Street, Brisbane, QLD 4000, Australia (DAF)\nThe University of Queensland (ABN 63 942 912 684) a body corporate established under the University of Queensland Act 1998 (Qld) which has its head office at St Lucia, QLD 4072, Australia (UQ)\nCommonwealth Scientific and Industrial Research Organisation (ABN 41 687 119 230), a body corporate established by the Commonwealth Science and Industry Research Act 1949 and having its principal office at CSIRO Black Mountain Science and Innovation Park, Clunies Ross Street, Acton, ACT 2601, Australia (CSIRO)\nAgResearch Limited (Company Number 552736), a Crown Research Institute established under the Crown Research Institutes Act 1992 having its registered office at Lincoln Research Centre, 1365 Springs Road, Lincoln, 7674, New Zealand (AgResearch)\nUniversity of Southern Queensland (ABN 40 234 732 081) a body corporate established pursuant to the provisions of the University of Southern Queensland Act 1998 (Qld) of West Street, Toowoomba, QLD 4350, Australia (USQ)\nIOWA State University of Science and Technology with offices at 1138 Pearson Hall, 505 Morrill Road, Ames, Iowa, 50011-2103, USA (ISU)\nThe New Zealand Institute for Plant and Food Research Limited, (Company Number 547965) (NZBN 9429038983559) a Crown Research Institute established under the Crown Research Institutes Act (1992) whose registered office is at 120 Mt Albert Road, Auckland, New Zealand (PFR) (DAF, UQ, CSIRO, AgResearch, USQ, ISU and PFR are collectively referred to as the “Licensor”)\nAND\nThe entity accepting the terms and conditions of this Agreement by downloading the APSIM Software (the “Licensee”)\nBACKGROUND\n\nThe Licensor is the owner of or is entitled to licence the APSIM Software.\nThe Licensee wishes to obtain a General Use license to the APSIM Software from the Licensor.\nThe Licensor has agreed to grant such a licence to the Licensee on the terms and conditions of this Agreement.\n\nTHE PARTIES AGREE\n\n1. DEFINITIONS\n\n1.1 In this Agreement:\nAgreement means this licence agreement.\nAPSIM Software means the APSIM Executable, including any Updates, and the Source Code.\nAPSIM Executable means the computer software system known as ‘Agricultural Production System Simulator’ (APSIM) for developing, testing and using models of production related processes, consisting of:\n(a) collection of biological and physical sub-models (referred to as modules) made available from time to time;\n\n(b) operation, management and system control modules made available from time to time; and\n\n(c) a communication system that allows all modules to interact for the simulation of agricultural systems, and containing:\n\n(d) a range of interfaces that facilitate data input and output processing for the simulator; and\n\n(e) templates that enable new modules to be developed for other crop and soil components via re-parameterisation of the templates.\nGeneral Use means, in relation to the APSIM Software:\n(a) to use or develop the APSIM Software and publish and make publicly available data and/or results generated from using the APSIM Software;\n\n(b) if it is a product or process that incorporates or is derived from the APSIM Software, to use the product or process and publish and make publicly available data and/or results generated from using the APSIM Software as part of that product or process; or\n\n(c) if it is a service that uses the APSIM Software, to provide that service and publish and make publicly available data and/or results generated from using the APSIM Software for the provision of the service.\nImprovements means any developments, modifications, additions or alterations made to the APSIM Software or any component of the APSIM Software.\nInsolvency Event means when the Licensee:\n(a) has a receiver, receiver and manager, trustee, administrator, other controller (as defined in the Corporations Act 2001 (Cth)) or similar analogous official appointed over any of its assets or undertakings;\n\n(b) suspends payment of its debts generally;\n\n(c) is or becomes unable to pay its debts as and when they are due;\n\n(d) is presumed to be insolvent within the meaning of section 459C(2) of the Corporations Act 2001 (Cth);\n\n(e) enters into or resolves to, or any steps are taken to enter into, any arrangement, composition or compromise with, or assignment for the benefit of, its creditors or any class of them;\n\n(f) ceases to carry on business or threatens to cease to carry on business;\n\n(g) has a resolution passed or steps are taken to appoint, or to pass a resolution to appoint, an administrator, receiver, receiver and manager, trustee in bankruptcy, liquidator, provisional liquidator, controller, or other like person to the whole or any part of its business or assets;\n\n(h) has an application or order made for its winding up or dissolution or a resolution is passed or any steps are taken to pass a resolution for its winding up or dissolution, otherwise than for the purpose of an amalgamation or reconstruction that has the prior written consent of the other party; or\n\n(i) does anything that has a substantially similar effect to the events set out in (a) through\n\n(h) above.\nIntellectual Property Rights or IP means all intellectual property rights, including:\n(a) patents, plant breeders rights, copyright, rights in circuit layouts, registered designs, trade marks, know how, trade secrets and any right to have confidential information kept confidential; and\n  \n(b) any application or right to apply for registration of any of the rights referred to in (a).\nLicensor’s Representative means the APSIM Initiative Project Officer.\nParty or Parties means a party to this Agreement including its officers and employees.\nSource Code means the human-readable source code which resides on https://github.com/APSIMInitiative, which may include Improvements.\nTerm means the period from the date of download of the APSIM Software until this Agreement is terminated in accordance with clause 11.\nThird Party Claims means any claim (threatened or actual) by, or judgment or award in favour of, a third party against any Party or any other person arising directly or indirectly out of the use by the Licensee or its users of the APSIM Software or Improvements.\nUpdate means any revised or new version of the APSIM Executable which may include Improvements or error corrections but does not necessarily provide additional functionality or performance.\n\n\n1.2. Interpretation\n\nThe following rules apply unless the context requires otherwise:\n\nHeadings are for convenience only and do not affect interpretation.\nThe meaning of general words is not limited by specific examples introduced by ‘including, ’for example’ or similar expressions.\nNo provisions of this Agreement will be construed adversely against a party on the grounds that such party was responsible for the preparation of this Agreement or that provision.\n\nUnless the contrary intention appears, a reference in this Agreement to:\n\nthe rights, duties, obligations and liabilities of the members of the Licensor are several, not joint or joint and several;\nan agreement, representation or warranty in favour of the Licensor is for the benefit of each member of the Licensor individually; and\nan agreement, representation or warranty by the Licensor binds each member of the Licensor individually only.\n\n\nNotwithstanding the foregoing, the Licensee shall only be singly liable or responsible for any payment, liability, obligation, representation or warranty of the Licensee hereunder, and it is the responsibility of the Licensor to allocate any rights among its respective constituents.\n\n\n\n2. GRANT OF LICENCE\n\nSubject to the terms and conditions of this Agreement, the Licensor hereby grants the Licensee a limited non-exclusive, fee-free, revocable, worldwide, non-sublicensable and non-transferable, General Use licence for the Term.\nThe Licensee acknowledges and agrees that this Agreement does not restrict the Licensor’s capacity to use, and license third parties to use, the APSIM Software or Improvements for any application or to modify, develop, license, sell and/or otherwise exploit the APSIM Software and Improvements as the Licensor sees fit.\n\n\n\n3. LICENSEE’S OBLIGATIONS\n\nThe Licensee covenants and agrees that the Licensee will at all times:\n\nensure that the APSIM Software is used in a proper and skillful manner by competent and trained persons only in accordance with best computing practice;\ncomply with the Licensor’s instructions and advice in relation to the use of the APSIM Software; and\nnotify the Licensor in writing of any changes to the Licensee’s details provided at the time the Licensee accepted the terms and conditions of this Agreement as part of the download of the APSIM Software.\n\nThe Licensee shall not:\n\npermit unauthorised access to the APSIM Software; or\nrent, loan, market, distribute network or transfer all or any part of the APSIM Software or any copy thereof to any person, either on its own or with or as part of any other product or equipment, without the prior written consent of the Licensor.\n\n\n\n\n4. INTELLECTUAL PROPERTY RIGHTS\n\nThe Licensor retains full ownership of the APSIM Software and the Licensee acknowledges and agrees that this Agreement does not transfer to the Licensee any ownership in the APSIM Software made available by the Licensor.\nThe Licensee:\n\nmust keep the Licensor informed of any Improvements the Licensee makes to the APSIM Software and provide the Improvements and associated details as reasonably requested by the Licensor;\nagrees that all IP in Improvements vests in the Licensor on and from creation, and hereby irrevocably assign to the Licensor on creation all IP in any Improvements made by the Licensee;\nwarrants that:\n\nA.  the Licensee has all necessary rights to grant the assignment in clause 4(b)(ii); and\n\nB.  the Improvements do not and will not infringe any IP or other rights of any third party; and\n\nwithout charging the Licensor a fee will do all things necessary and execute all documents that may be necessary to complete the vesting of ownership of the IP in Improvements in the Licensor.\n\nThe Licensee must not take any action to challenge the validity of any IP licensed to the Licensee under this Agreement.\nThe Licensee must advise the Licensor immediately on becoming aware of:\n\nany suspected or actual infringement by any person of the IP in the APSIM Software or Improvements; and\nany person claiming that the APSIM Software or Improvements infringe the rights of any person.\n\nNotwithstanding anything to the contrary in this Agreement, the Licensee acknowledges the right of the Licensor to adopt, use and otherwise exploit the Improvements in any way, including a right to not adopt and/or not use or otherwise exploit the Improvements whilst retaining ownership of IP in the Improvements.\nIn the event of a claim being made in relation to any infringement or alleged infringement (including but not limited to the defence of such alleged infringement) of any IP of a third party in connection with the APSIM Software (‘Claim’), the Licensor shall have the right in its absolute discretion and at its own expense to:\n\nprocure the right for the Licensee to continue to use the APSIM Software in accordance with this Agreement;\nmake any alterations, modifications or adjustments to the APSIM Software and documentation so that it becomes non-infringing but maintains an equivalent functional level; and/or\nreplace the APSIM Software with non-infringing software with an equivalent functional level and provide new documentation as required.\n\nIf the Licensor cannot resolve a Claim, or determines it is not likely to resolve it on terms acceptable to the Licensor (whether or not it has taken or pursued any of the actions set out in subclause 4(f) and whether or not the Claim is known to be valid or is settled or defended), the Licensor may terminate this Agreement.\nWhere a Claim is made, or threatened to be made, against the Licensee, the Licensee shall:\n\ngive written notice to the Licensor of the Claim as soon as reasonably practicable;\nnot make any admission as to liability, compromise or agree to any settlement, or otherwise prejudice the Licensor�s defence of any Claim without the prior written consent of the Licensor (which consent shall not be unreasonably withheld); and\nat the request and expense of the Licensor, give the Licensor all reasonable assistance in respect of the conduct or settlement of any negotiations and litigation resulting from a Claim.\n\n\n\n\n5. UPDATES\nIf the Licensor develops an Update to the APSIM Software then, at its discretion, the Licensor may make such Update available to the Licensee on the same terms as this Agreement. The Licensor is not obliged to develop or distribute any Update to the APSIM Software.\n\n\n6.LIMITATION OF LIABILITY AND WARRANTIES\n\nTo the full extent permitted by applicable law (and subject to clause 6(d)), the Licensor excludes any and all liability under or in relation to this Agreement and/or the APSIM Software whether under contract, tort, equity, legislation or otherwise. In no circumstances will the Licensor be liable in respect of consequential or special loss or damage (including but not limited to consequential financial loss, loss or corruption of data, loss of information, loss of profit, loss of revenue, loss of business opportunity, loss due to business interruption, loss arising from defects, wasted overheads or for any damage to goodwill or reputation) of the Licensee, or any third party however caused, which may be suffered or incurred or which may arise directly or indirectly out of the use, or inability of the Licensee or any third party to use, the APSIM Software or Improvements.\nThe Licensor and the Licensee represent and warrant that each, respectively, has the right to enter into this Agreement. The Licensor represents and warrants that it has the right to provide APSIM Software to the Licensee as required herein and to grant the licenses described. The Licensor further represents and warrants it has not granted to any third party an exclusive license to APSIM Software.\nSubject to clause 6(d), except as otherwise expressly provided herein, the Licensor makes no warranties, express or implied, and excludes all warranties, representations, terms or conditions, whether express or implied, oral or written, statutory or otherwise, relating in any way to the APSIM Software or this Agreement, including any implied warranty or guarantee of merchantability or of fitness for a particular purpose to the full extent permitted by the laws in force in Australia or the laws in force in any State or Territory of Australia.\nThis Agreement does not exclude or limit any guarantee, condition, warranty, right or liability implied into it by law (including the Competition and Consumer Act 2010), the exclusion of which would contravene the law or cause this Agreement to be void (Non-Excludable Consumer Guarantees). This Agreement is at all times to be read subject to such Non-Excludable Consumer Guarantees. The Licensor’s liability to the Licensee for breach of any term of this Agreement or of any Non-Excludable Consumer Guarantees is limited, at the Licensor’s option, to (where applicable) re-performing the goods or services, re-supplying the goods or services, or payment of the cost of re-performing or re-supplying the affected part of the goods or services. To the extent that liability can be limited, the liability of the Licensor to the Licensee in relation to this Agreement and/or the APSIM software is limited in aggregate to a maximum of AUD$100.\n\n\n\n7. ASSUMPTION OF RISK\n\nWithout limiting the generality of clause 6 of this Agreement, the Licensee acknowledges and agrees that:\n\nthe APSIM Software was developed for research purposes and may have inherent defects, errors or deficiencies;\nthe Licensee’s use of the APSIM Software and any advice, opinions or information supplied by the Licensor, its officers, employees or agents concerning the APSIM Software is at the Licensee’s own risk;\nit is the Licensee’s responsibility to make the Licensee’s own assessment regarding the suitability of the APSIM Software and any information or management advice generated from it;\nthe APSIM Software is supplied on the understanding that the Licensee will not hold the Licensor, their officers, employees or agents liable for any loss or damage resulting from the Licensee’s use of the APSIM Software; and\nthe Licensee accepts this Agreement on the condition that the Licensor gives no warranty, whether express or implied:\n\nas to the merchantable quality of the APSIM Software;\nthat the APSIM Software or any part of it does not infringe the IP of any third party;\nthat the APSIM Software will be suitable for a particular purpose;\nthat use of the APSIM Software will provide any financial or monetary advantage;\nthat the APSIM Software is or will be error free; or\nthat the APSIM Software will not fail to operate or operate without error or other defects.\n\n\n\n\n\n8. LICENSEE’S INDEMNITY\n\nSubject to clause 8(c), the Licensee agrees to indemnify the Licensor, their officers, employees and agents and keep the Licensor, their officers, employees and agents indemnified in respect of any (1) Third Party Claims; and (2) breach by the Licensee of the Licensee’s obligations under this Agreement, except to the extent that such breach was caused or contributed to by the negligence, or wilful misconduct, of the Licensor. The Licensee shall have no liability to the Licensor in relation to a Claim that is directly related to the infringement of the IP of a third party to which clause 4(f) applies and the Licensor fails to take the actions described in clauses 4(f) or fails to resolve the matter and providing that the Licensee provides the Licensor with reasonable co-operation in relation to a Claim as set out in 4(h) above.\nThe Licensee’s obligation to indemnify the Licensor and their officers, employees and agents set out in clause 8(a) is a continuing obligation separate and independent of the Licensee’s other obligations and shall survive expiration or, where relevant, earlier termination of this Agreement.\nClause 8(a) does not apply to the extent it would have the effect of limiting or excluding Non-Excludable Consumer Guarantees.\n\n\n\n9. INSURANCE\n\nThe Licensee:\n\nmust take out and maintain insurances adequate to cover its obligations under this Agreement; and\nmust comply with the terms of its insurance policies.\n\n\n\n\n10. DISPUTE RESOLUTION\n\nA Party must not start court proceedings (except proceedings seeking interlocutory relief) about a dispute arising out of this Agreement (‘Dispute’) unless it has complied with this clause 10.\nA Party claiming that a Dispute has arisen must notify the other Party to the Dispute giving details of the Dispute (‘Notification’).\nOn receipt of a Notification each Party must with appropriate senior management negotiate in good faith to resolve the Dispute.\nIf the Dispute is not resolved under clause 10(c) within 60 days after referral (or longer period agreed between the Parties) either Party may initiate proceedings in a court.\n\n\n\n11. TERMINATION\n\nThe Licensor may immediately terminate this Agreement by notice in writing if the Licensee commits an Insolvency Event.\nEither the Licensor or the Licensee may immediately terminate this Agreement by written notice to the other Party if that other Party:\n\ncommits a breach of this Agreement which is capable of remedy and is not remedied within thirty (30) days of notice to do so by the first Party; or\ncommits a material breach of this Agreement (without limiting any other breach, any breach by the Licensee of clauses 3(b), 4 or 13 is a material breach).\n\nEither Party may end this Agreement by giving 30 days written notice to the other Party.\n\n\n\n12. POST TERMINATION/EXPIRATION\nOn expiration or termination of this Agreement:\n\nall licences granted to the Licensee under this Agreement immediately cease;\nthe Licensee must immediately:\n\nuninstall and stop using the APSIM Software and Improvements; and\nif requested by the Licensor, confirm by letter signed by an authorised person that the Licensee has complied with all of the Licensee’s obligations under this clause 12.\n\nthe following clauses continue:\n4 (Intellectual Property Rights), 6 (Limitation of Liability and Warranties), 7 (Assumption of Risk), 8 (Licensee’s Indemnity), 9 (Insurance), 10 (Dispute Resolution), this clause 12 (Post Termination/Expiration) and 13 (Use of Names); and\naccrued rights and remedies of either Party are not affected.\n\n\n\n13. USE OF NAMES\n\nThe Licensee must not use the names, trademarks or logos of DAF, UQ, CSIRO, AgResearch, USQ, ISU or PRF without first obtaining written consent from that party.\nThe Licensee must not use the APSIM logo or trade marks without first obtaining written consent from the Licensor.\nThe Licensee must not use the APSIM name in any way whatsoever to represent a connection with or a sponsorship or endorsement of the Licensor without first obtaining written consent from the Licensor.\n\n\n\n14. NOTICES\nA Party notifying or giving notice under this Agreement must:\n\nwhere notice is being given to the Licensor, provide it in writing to the person specified as being the Licensor’s Representative (from time to time) and transmit such notice by email to apsim@csiro.au; and\nwhere notice is being given to the Licensee, provide it in writing to the person specified in the Licensee’s registration details as being the Licensee’s representative, and transmit such notice by email to the email address provided by the Licensee in their registration details.\n\n\n\n15. GENERAL\n\nRelationships: This Agreement does not create a relationship of employment, agency or partnership between:\n\nany one or more of the persons comprising the Licensor from time to time; or\nthe Licensee and any one or more of the persons referred to in paragraph (i) above.\n\nthe Licensor or the Licensee or each party comprising the Licensor and each other or the Licensee.\nSeveral Rights: The rights and obligations of each Party and each party comprising the Licensor under this Agreement are several, not joint or joint and several.\nFurther Action: Each Party must do or cause to be done all things necessary or desirable to give effect to, and refrain from doing things that would hinder performance of, this Agreement.\nAssignment: The Licensee must not assign or attempt to assign or otherwise transfer any right arising out of this Agreement.\nWaiver: The failure of a Party (being the Licensor or the Licensee) at any time to insist on performance by the other Party of any obligation under this Agreement is not a waiver of its right:\n\nto insist on performance of, or to claim damages for breach of, that obligation unless that Party acknowledges in writing that the failure is a waiver; and\nat any other time to insist on performance of that or any other obligation of the other Party under this Agreement.\n\nSeverability: If part or all of any clause of this Agreement is illegal or unenforceable it will be severed from this Agreement and will not affect the continued operation of the remaining provisions.\nEntire Agreement: This Agreement records the entire Agreement between the Licensor and the Licensee and supersedes all earlier agreements, arrangements and understandings between the Licensor and the Licensee (if any) in relation to the APSIM Software\nAmendment: The Licensor reserves the right to change or modify this Agreement at any time and at its sole discretion by posting revisions on www.apsim.info. Continued use of the APSIM Software following the posting of these changes or modifications will constitute acceptance of such changes or modifications.\nAcknowledgement: Installing the APSIM Software indicates that the Licensee has read and understood this Agreement, and agrees to be bound by its terms and conditions.\nGoverning Law: This Agreement is governed by the laws of the State of Queensland. The Parties submit to the non-exclusive jurisdiction of the courts of the State of Queensland."
  },
  {
    "objectID": "tips/internal_variable.html",
    "href": "tips/internal_variable.html",
    "title": "Accessing Internal Model Variables in the Manager Scripts",
    "section": "",
    "text": "In APSIM Next Gen, internal variables such as [Wheat].Phenology.FloweringDAS and [Wheat].Stem.N are accessible within the Report model. However, accessing these variables directly in a Manager Script requires a different approach.\nTo retrieve these values within a Manager Script, you can use the zone.Get() method to access the specific model. After obtaining the model, cast it to the appropriate type (e.g., IFunction, Plant, or IOrgan) to access its properties or methods. You can determine the model type by hovering over the model name in the APSIM user interface, which will display its full type name."
  },
  {
    "objectID": "tips/internal_variable.html#objective",
    "href": "tips/internal_variable.html#objective",
    "title": "Accessing Internal Model Variables in the Manager Scripts",
    "section": "Objective",
    "text": "Objective\nRetrieve internal variables from models (e.g., [Wheat].Phenology.FloweringDAS and [Wheat].Stem.N) during the simulation using a Manager script."
  },
  {
    "objectID": "tips/internal_variable.html#implementation",
    "href": "tips/internal_variable.html#implementation",
    "title": "Accessing Internal Model Variables in the Manager Scripts",
    "section": "Implementation",
    "text": "Implementation\nBelow is a complete Manager script that demonstrates how to access these variables:\n\nusing System;\nusing Models.Core;\nusing Models.Functions;\nusing Models.PMF;\nusing Models.PMF.Organs;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // Link to the simulation's Zone to access other models\n        [Link] private Zone zone = null;\n\n        // Link to the Summary model to write messages to the simulation log\n        [Link] private Summary summary = null;\n\n        // Subscribe to the 'DoManagement' event, which is triggered daily\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            // Access the FloweringDAS function from the Wheat model's Phenology\n             OnEventFunction floweringEvent = (OnEventFunction)zone.Get(\"[\" + \"Wheat\" +\"].Phenology.FloweringDAS\");\n\n            if (floweringEvent != null)\n            {\n                // Evaluate the function to get the days after sowing to flowering\n                double floweringDAS = floweringEvent.Value();\n\n                // Write the retrieved value to the simulation summary for diagnostic purposes\n                summary.WriteMessage(this, $\"[Wheat].Phenology.FloweringDAS: {floweringDAS}\", MessageType.Diagnostic);\n            }\n            else\n            {\n                // Handle the case where the function is not found\n                summary.WriteMessage(this, \"[Wheat].Phenology.FloweringDAS not found.\", MessageType.Warning);\n            }\n\n       \n            // Access the Stem organ\n             GenericOrgan Stemorgan = (GenericOrgan)zone.Get(\"[\" + \"Wheat\" +\"].Stem\");\n\n            if (Stemorgan != null)\n            {\n                // Retrieve the Nitrogen amount in the Stem\n                double stemN = Stemorgan.N;\n\n                // Write the retrieved value to the simulation summary for diagnostic purposes\n                summary.WriteMessage(this, $\"[Wheat].Stem.N: {stemN}\", MessageType.Diagnostic);\n            }\n            else\n            {\n                // Handle the case where the Stem organ is not found\n                summary.WriteMessage(this, \"[Wheat].Stem.N not found in Wheat model.\", MessageType.Warning);\n            }\n        \n        }\n    }\n}"
  },
  {
    "objectID": "tips/internal_variable.html#explanation",
    "href": "tips/internal_variable.html#explanation",
    "title": "Accessing Internal Model Variables in the Manager Scripts",
    "section": "Explanation",
    "text": "Explanation\n\nAccessing [Wheat].Phenology.FloweringDAS\nThe [Wheat].Phenology.FloweringDAS variable is typically defined as a OnEventFunction function within the Phenology component of a Wheat model.\nTo access this function within a Manager script:\n\nRetrieve the Function: Use the zone.Get() method with the path to the function, e.g., \"[Wheat].Phenology.FloweringDAS\".\nCast to OnEventFunction: Cast the retrieved object to the OnEventFunction interface, which provides the Value() method to evaluate the function.\nEvaluate the Function: Call the Value() method to obtain the current value of FloweringDAS.\n\nThis approach allows dynamic access to model functions during simulation, enabling custom management decisions based on plant development stages.\n\n\nAccessing [Wheat].Stem.N\nThe nitrogen content (N) of the Stem organ is reportable variable. To access this variable:\n\nRetrieve the Plant Model: Use zone.Get(\"[Wheat].Stem\") to obtain the Stem model.\nCast to IOrgan: Cast the Stem organ to the GenericOrgan interface, which provides access to the N property.\nRetrieve Nitrogen Content: Access the N property to get the current nitrogen content of the Stem organ.\n\nThis method enables monitoring and managing nutrient dynamics within specific plant organs during simulation."
  },
  {
    "objectID": "tips/internal_variable.html#additional-resources",
    "href": "tips/internal_variable.html#additional-resources",
    "title": "Accessing Internal Model Variables in the Manager Scripts",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nManager Model Documentation and Examples\nProvides guidance on scripting within the Manager model, including examples of accessing and manipulating model variables.\nAPSIM Next Gen Training Manuals\nA collection of tutorials and manuals covering various aspects of APSIM Next Gen.\nAPSIM GitHub Discussions\nA community forum for discussing APSIM-related topics and getting help from other users and developers."
  }
]