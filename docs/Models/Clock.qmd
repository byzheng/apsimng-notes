---
title: "Clock"
output: html_document
---

The APSIM Clock is a central component of the APSIM simulation framework, responsible for managing the simulation time and orchestrating the sequence of events that occur during a simulation. It defines the start and end dates of the simulation and raises various events at specific times to allow different models to perform their calculations.



## Overview

The `Clock` model defines the simulation's start and end dates, controls the passage of time, and raises numerous events used to coordinate actions across models. It forms the central timing mechanism within the APSIM NG framework, driving the daily timestep loop.


## Inputs


- **Start**: The start date of the simulation with format `YYYY-MM-DD` (optional if weather data is available).
- **End**: The end date of the simulation with format `YYYY-MM-DD` (optional if weather data is available).
- **Weather**: If no explicit start/end dates are defined, the model will attempt to derive them from the associated weather model.


## Methodology

If `Start` or `End` are not defined, the model looks for a weather model in the scope and adopts its `StartDate` or `EndDate`. The simulation begins on the resolved start date and continues day by day until the end date. Each day, the `Clock` publishes multiple events to signal simulation actions across components. These include daily updates, management actions, soil processes, plant growth, CLEM processes, and reporting.


1. [`DoInitialSummary`](/docs/Models/Events/DoInitialSummary.qmd) – Initial summary at the start.
2. [`StartOfSimulation`](/docs/Models/Events/StartOfSimulation.qmd) – Marks the simulation's beginning.
3. [`FinalInitialise`](/docs/Models/Events/FinalInitialise.qmd) – Final initialisation before the first day.
4. [`StartOfFirstDay`](/docs/Models/Events/StartOfFirstDay.qmd) – First day setup.
5. For each day (from `StartDate` to `EndDate`), the following events are raised in sequence (some only on specific days): `DoCatchYesterday`, `DoWeather`, `DoDailyInitialisation`, `StartOfDay`, `StartOfMonth`, `StartOfYear`, `StartOfWeek`, `DoManagement`, `DoFertiliserApplications`, `DoPestDiseaseDamage`, `DoEnergyArbitration`, `DoSoilErosion`, `DoSoilWaterMovement`, `DoSoilTemperature`, `DoSolute`, `DoSurfaceOrganicMatterPotentialDecomposition`, `DoSoilOrganicMatter`, `DoSurfaceOrganicMatterDecomposition`, `DoUpdateWaterDemand`, `DoDCAPST`, `DoWaterArbitration`, `PrePhenology`, `DoPhenology`, `DoPotentialPlantGrowth`, `DoPotentialPlantPartioning`, `DoPastureWater`, `DoNutrientArbitration`, `DoActualPlantPartioning`, `DoActualPlantGrowth`, `PartitioningComplete`, `DoStock`, `DoLifecycle`, `DoUpdate`, `DoManagementCalculations`, `DoEndPasture`, `DoReportCalculations`, `EndOfWeek`, `EndOfYear`, `EndOfMonth`, `EndOfDay`, `DoReport`.
6. After the last day, [`EndOfSimulation`](/docs/Models/Events/EndOfSimulation.qmd) is raised.



## Events

**Events Listened For**

| Event | Purpose |
|-------|---------|
| [Commencing](/docs/Models/Events/Commencing.qmd) | Set Today as StartDate |
| [OnDoCommence](/docs/Models/Events/OnDoCommence.qmd) | The main function to run a simulation to trigger major loop |

**Events Raised To**

| Event | Purpose |
|-------|---------|
| [StartOfSimulation](/docs/Models/Events/StartOfSimulation.qmd) | Occurs once at the start of the simulation |
| [StartOfFirstDay](/docs/Models/Events/StartOfFirstDay.qmd) | Occurs once at the start of the first day of the simulation |
| [StartOfDay](/docs/Models/Events/StartOfDay.qmd) | Occurs at start of each day |
| [StartOfMonth](/docs/Models/Events/StartOfMonth.qmd) | Occurs at start of each month |
| [StartOfYear](/docs/Models/Events/StartOfYear.qmd) | Occurs at start of each year |
| [StartOfWeek](/docs/Models/Events/StartOfWeek.qmd) | Occurs at start of each week |
| [EndOfDay](/docs/Models/Events/EndOfDay.qmd) | Occurs at end of each day |
| [EndOfMonth](/docs/Models/Events/EndOfMonth.qmd) | Occurs at end of each month |
| [EndOfYear](/docs/Models/Events/EndOfYear.qmd) | Occurs at end of each year |
| [EndOfWeek](/docs/Models/Events/EndOfWeek.qmd) | Occurs at end of each week |
| [EndOfSimulation](/docs/Models/Events/EndOfSimulation.qmd) | Occurs at end of simulation |
| [FinalInitialise](/docs/Models/Events/FinalInitialise.qmd) | Final Initialise event. Occurs once at start of simulation |
| [DoCatchYesterday](/docs/Models/Events/DoCatchYesterday.qmd) | Occurs first each day to allow yesterdays values to be caught |
| [DoWeather](/docs/Models/Events/DoWeather.qmd) | Occurs each day to calculate weather |
| [DoDailyInitialisation](/docs/Models/Events/DoDailyInitialisation.qmd) | Occurs each day to do daily updates to models |
| [DoInitialSummary](/docs/Models/Events/DoInitialSummary.qmd) | Occurs each day to make the initial summary |
| [DoManagement](/docs/Models/Events/DoManagement.qmd) | Occurs each day to do management actions and changes |
| [DoFertiliserApplications](/docs/Models/Events/DoFertiliserApplications.qmd) | Invoked to perform all fertiliser applications |
| [DoPestDiseaseDamage](/docs/Models/Events/DoPestDiseaseDamage.qmd) | Occurs to do Pest/Disease actions |
| [DoEnergyArbitration](/docs/Models/Events/DoEnergyArbitration.qmd) | Occurs when the canopy energy balance needs to be calculated with MicroClimate |
| [DoSoilWaterMovement](/docs/Models/Events/DoSoilWaterMovement.qmd) | Occurs each day to do water calculations such as irrigation, swim, water balance etc |
| [DoSoilErosion](/docs/Models/Events/DoSoilErosion.qmd) | Occurs to tell soil erosion to perform its calculations |
| [DoSoilTemperature](/docs/Models/Events/DoSoilTemperature.qmd) | Occurs to perform soil temperature calculations to do solute processes |
| [DoSolute](/docs/Models/Events/DoSolute.qmd) | Occurs each day |
| [DoSurfaceOrganicMatterPotentialDecomposition](/docs/Models/Events/DoSurfaceOrganicMatterPotentialDecomposition.qmd) | Occurs each day to perform daily calculations of organic soil matter |
| [DoSoilOrganicMatter](/docs/Models/Events/DoSoilOrganicMatter.qmd) | Occurs each day to perform daily calculations of organic soil matter |
| [DoSurfaceOrganicMatterDecomposition](/docs/Models/Events/DoSurfaceOrganicMatterDecomposition.qmd) | Occurs each day to do the daily residue decomposition |
| [DoUpdateWaterDemand](/docs/Models/Events/DoUpdateWaterDemand.qmd) | Occurs each day to do daily growth increment of total plant biomass |
| [DoWaterArbitration](/docs/Models/Events/DoWaterArbitration.qmd) | Occurs each day to do water arbitration |
| [DoPastureWater](/docs/Models/Events/DoPastureWater.qmd) | Initiates water calculations for the Pasture model |
| [PrePhenology](/docs/Models/Events/PrePhenology.qmd) | Occurs between DoWaterArbitration and DoPhenology. Performs sorghum final leaf no calcs |
| [DoPhenology](/docs/Models/Events/DoPhenology.qmd) | Occurs each day to perform phenology |
| [DoPotentialPlantGrowth](/docs/Models/Events/DoPotentialPlantGrowth.qmd) | Occurs each day to do potential growth |
| [DoPotentialPlantPartioning](/docs/Models/Events/DoPotentialPlantPartioning.qmd) | Occurs each day to do the water limited dm allocations. Water constraints to growth are accounted for in the calculation of DM supply and does initial N calculations to work out how much N uptake is required to pass to SoilArbitrator |
| [DoNutrientArbitration](/docs/Models/Events/DoNutrientArbitration.qmd) | Occurs each day to do nutrient arbitration |
| [DoActualPlantPartioning](/docs/Models/Events/DoActualPlantPartioning.qmd) | Occurs each day to do nutrient allocations |
| [DoActualPlantGrowth](/docs/Models/Events/DoActualPlantGrowth.qmd) | Occurs each day to do nutrient allocations. Pasture growth |
| [PartitioningComplete](/docs/Models/Events/PartitioningComplete.qmd) | Occurs each day to finish partitioning |
| [DoUpdate](/docs/Models/Events/DoUpdate.qmd) | Occurs near end of each day to do checks and finalising |
| [DoStock](/docs/Models/Events/DoStock.qmd) | Occurs each day to process stock methods in GrazPlan Stock |
| [DoLifecycle](/docs/Models/Events/DoLifecycle.qmd) | Occurs each day to process a Pest and Disease lifecycle object |
| [DoManagementCalculations](/docs/Models/Events/DoManagementCalculations.qmd) | Occurs each day after the simulation is done. Does management calculations |
| [DoEndPasture](/docs/Models/Events/DoEndPasture.qmd) | Occurs after pasture growth and sends material to SOM |
| [DoReportCalculations](/docs/Models/Events/DoReportCalculations.qmd) | Occurs when do report calculations |
| [DoReport](/docs/Models/Events/DoReport.qmd) | Occurs at end of each day |
| [DoDCAPST](/docs/Models/Events/DoDCAPST.qmd) | Occurs each day when dcaps performs its calculations. This must happen between DoPotentialPlantGrowth and DoPotentialPlantPartitioning |
| [CLEMInitialiseResource](/docs/Models/Events/CLEMInitialiseResource.qmd) | CLEM initialise Resources occurs once at start of simulation |
| [CLEMInitialiseActivity](/docs/Models/Events/CLEMInitialiseActivity.qmd) | CLEM initialise Activity occurs once at start of simulation |
| [CLEMValidate](/docs/Models/Events/CLEMValidate.qmd) | CLEM validate all data entry |
| [CLEMStartOfTimeStep](/docs/Models/Events/CLEMStartOfTimeStep.qmd) | CLEM start of timestep event |
| [CLEMUpdateLabourAvailability](/docs/Models/Events/CLEMUpdateLabourAvailability.qmd) | CLEM set labour availability after start of timestep and financial considerations |
| [CLEMUpdatePasture](/docs/Models/Events/CLEMUpdatePasture.qmd) | CLEM update pasture |
| [CLEMDetachPasture](/docs/Models/Events/CLEMDetachPasture.qmd) | CLEM detach pasture |
| [CLEMPastureReady](/docs/Models/Events/CLEMPastureReady.qmd) | CLEM pasture has been added and is ready for use |
| [CLEMDoCutAndCarry](/docs/Models/Events/CLEMDoCutAndCarry.qmd) | CLEM cut and carry |
| [CLEMAnimalBreeding](/docs/Models/Events/CLEMAnimalBreeding.qmd) | CLEM Do Animal (Ruminant and Other) Breeding and milk calculations |
| [CLEMPotentialIntake](/docs/Models/Events/CLEMPotentialIntake.qmd) | Get potential intake. This includes suckling milk consumption |
| [CLEMCalculateManure](/docs/Models/Events/CLEMCalculateManure.qmd) | Request and allocate resources to all Activities based on UI Tree order of priority. Some activities will obtain resources here and perform actions later |
| [CLEMCollectManure](/docs/Models/Events/CLEMCollectManure.qmd) | Request and allocate resources to all Activities based on UI Tree order of priority. Some activities will obtain resources here and perform actions later |
| [CLEMGetResourcesRequired](/docs/Models/Events/CLEMGetResourcesRequired.qmd) | Request and perform the collection of manure after resources are allocated and manure produced in time-step |
| [CLEMAnimalMilkProduction](/docs/Models/Events/CLEMAnimalMilkProduction.qmd) | CLEM Calculate Animals (Ruminant and Other) milk production |
| [CLEMAnimalWeightGain](/docs/Models/Events/CLEMAnimalWeightGain.qmd) | CLEM Calculate Animals(Ruminant and Other) weight gain |
| [CLEMAnimalDeath](/docs/Models/Events/CLEMAnimalDeath.qmd) | CLEM Do Animal (Ruminant and Other) death |
| [CLEMAnimalMilking](/docs/Models/Events/CLEMAnimalMilking.qmd) | CLEM Do Animal (Ruminant and Other) milking |
| [CLEMCalculateEcologicalState](/docs/Models/Events/CLEMCalculateEcologicalState.qmd) | CLEM Calculate ecological state after all deaths and before management |
| [CLEMAnimalMark](/docs/Models/Events/CLEMAnimalMark.qmd) | CLEM Do animal marking so complete before undertaking management decisions |
| [CLEMAnimalManage](/docs/Models/Events/CLEMAnimalManage.qmd) | CLEM Do Animal (Ruminant and Other) Herd Management (adjust breeders and sires etc.) |
| [CLEMAnimalStock](/docs/Models/Events/CLEMAnimalStock.qmd) | CLEM stock animals to pasture availability or other metrics |
| [CLEMAnimalSell](/docs/Models/Events/CLEMAnimalSell.qmd) | CLEM sell animals to market including transporting and labour |
| [CLEMAnimalBuy](/docs/Models/Events/CLEMAnimalBuy.qmd) | CLEM buy animals including transporting and labour |
| [CLEMAgeResources](/docs/Models/Events/CLEMAgeResources.qmd) | CLEM Age your resources (eg. Decompose Fodder, Age your labour, Age your Animals) |
| [CLEMHerdSummary](/docs/Models/Events/CLEMHerdSummary.qmd) | CLEM event to calculate monthly herd summary |
| [CLEMFinalizeTimeStep](/docs/Models/Events/CLEMFinalizeTimeStep.qmd) | CLEM finalize time-step before end |
| [CLEMEndOfTimeStep](/docs/Models/Events/CLEMEndOfTimeStep.qmd) | CLEM end of timestep event |


## Properties

**Configurable and Reportable Properties**

|--------------|-----------|-------------------------------------------------|
| `Start`      | DateTime? | Start date of the simulation with format `YYYY-MM-DD`                   |
| `End`        | DateTime? | End date of the simulation with format `YYYY-MM-DD`                      |


**Read-Only Reportable Properties**


| Property             | Type     | Description                                                                 |
|----------------------|----------|-----------------------------------------------------------------------------|
| `StartDate`          | DateTime | Derived start date                                                          |
| `EndDate`            | DateTime | Derived end date                                                            |
| `Today`              | DateTime | Current simulation date                                                     |
| `FractionComplete`   | double   | Fraction of the simulation completed                                        |
| `IsStartMonth`       | bool     | Whether today is the first of the month                                     |
| `IsStartYear`        | bool     | Whether today is the first day of the year                                  |
| `IsEndMonth`         | bool     | Whether today is the last day of the month                                  |
| `IsEndYear`          | bool     | Whether today is the last day of the year                                   |

## User Interface

`Clock` can be added as a child of a `Simulation` node in the model tree. Right-click the simulation node, select "Add Model...", and search for `Clock` in the Filter Box.


## Practical Example

> No practical example is provided for this function.

## See Also

- Source code: [Clock.cs on GitHub](https://github.com/APSIMInitiative/ApsimX/blob/master/Models/Clock.cs)
